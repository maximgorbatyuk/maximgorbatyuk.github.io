[{"content":"Открытые зарплатные вилки – это когда каждый миддл знает, сколько зарабатывают миддлы и другие грейды в той компании, где он работает. Условно говоря, получает специалист 1500$, но он знает, что вилка его уровня составляет от 1200$ до 2000$. Но просто взять и рассказать всем про деньги, которые они могут получать, нельзя. Мало знать возможности, нужно еще и понимать, как достигнуть ее. Для того, чтобы работники знали путь достижения нового грейда, компании нужно привести в порядок бизнес-процессы.\n1. Открытая информация о грейдах коллег Разработчик, зная свои навыки и грейд, сравнивает себя с коллегами. Например, джун, который хочет расти, ищет для себя ролевую модель. Он видит сеньора в команде и захочет стать таким же. Он будет задавать вопросы и обсуждать решения и по рабочему проекту, и по личным пет-проектам.\nА чтобы новички в команде видели, кто сеньор среди коллег, компании нужна система с публичными профилями и грейдами. Это может быть внутренний интранет, собственное решение или купленное. Также в качестве заглушки используют слак, где каждый напишет в описании профиля свой грейд. В любом случае, разработчики компании должны видеть грейды других.\n2. Открытые стандарты присвоения грейдов Стандартификация грейдов позволит сравнивать умения специалистов в рамках одних компетенций. Каждый работник знает свой грейд и видит грейды коллег. Теперь ему нужно знать, что сделать для повышения грейда. Когда человек не знает, за что присвоен грейд, то он не знает и направление, куда двигаться. Помимо требований, человек заранее видит и задачи, которые выполняет сеньор в вашей компании: проведение собеседований, менторство над коллегами, консультации по другим проектам.\nВ интернете полно роадмапов разработчика для разных направлений. Если разработчики вашей компании следуют разным гайдам, то и сопоставить их навыки вам сложнее. Уделите время и проработайте стандарты грейдирования, чтобы работники знали, как им расти. Если они не будут понимать это, то они пойдут искать возможность в других проектах.\nВажно создать такую систему, где разработчики могут посмотреть требование к грейдам для других специализаций. Возможно, кто-то захочет попробовать себя в другой области и захочет увидеть требования для нее. В рамках одной компании поменять специализацию человеку легче, ведь команда и люди ему знакомы, а процессы уже известны. Работник фокусируется только на освоении новой профессии и не будет тратить энергию на выстраивание взаимоотношений с новыми коллегами.\n3. Политика для менторов и менти Менторство – один из способов помощи обучающимся специалистам. Когда прокачиваешь навыки, необходима обратная связь: в нужную ли сторону ты двигаешься, правильно ли применяешь новые знания. Если же джуны не знают, как получить менторство, они пойдут искать такую возможность в других компаниях.\nЧтобы люди росли в вашей команде, позаботьтесь о проработке политик менторства. Обдумайте и опишите процессы:\nкак можно стать ментором, что нужно сделать, чтобы перестать быть ментором, какие требования выставляются менторам, какую часть рабочего времени можно уделять менторству, к кому можно обратиться, чтобы получить менторскую помощь как можно завершить менторскую программу по достижению цели или досрочно. Люди, зная ответы на эти вопросы заранее, смогут более осознанно принять решение. А вдруг ваши потенциальные менторы и менти не знают, как завершить программу, если цели не достигнуты были и это их пугает? А вдруг они стесняются задавать такие вопросы? Дайте ответы на них, не дожидаясь озвучивания, и вы сделайте хорошо вашим менторам и менти.\nСам факт подготовки кандидата на повышение даст бонусы не только ему самому, но и вам. Разработчик пересмотрит свои знания и навыки, почерпнет новое и начнет применять их на практике еще до того, как грейд повышен. Для менти это практика и обратная связь, а для компании – эффективнее закрытые задачи.\nЭксперты для комитета тоже держат себя в тонусе, ведь у них появляется еще один повод следить за развитием технологий и подходов кодинга. Им будет сложно задавать одни и те же вопросы из года в год в то время как технологии и языки программирования развиваются.\n4. Политика проведения ассессментов Ассессмент – это процедура повышения грейда. Он должен быть так же прозрачен, как и присвоение грейда на старте. Ассессмент похож на собеседование внутри компании – коллеги оценивают уровень кандидата на повышение.\nАссессмент проводят с участием незаинтересованных экспертов. Другие старшие разработчики судят об уровне навыков кандидата на повышение. Ментор лишь готовит кандидата, но не участвует в принятии решения. Каждый эксперт комитетапишет мнение о грейде кандидата. Если же кандидат не проходит порог достаточности, то ему предлагают материалы, как можно подготовиться к следующей попытке.\nПо результатам ассессмента важно дать структурированную обратную связь. Для этого нужно подготовить и экспертов, чтобы они оформляли фидбек по одному стандарту. В политике необходимо описать:\nорганизацию подготовки ассессмента, сбор комитета экспертов, организацию проведения ассессмента: онлайн, офлайн, место проведения, сроки, когда эксперты должны дать обратную связь, что делать в случае, если кандидат успешно прошел ассессмент: процесс повышения грейда, пересмотр зарплаты, что делать, если кандидат не смог защитить грейд: проработка обратной связи с работником, организация менторства по повторной подготовке. Опишите эти процессы заранее, чтобы еще до начала подготовки работники знали что делать в том или ином случае.\n5. Открытые зарплатные вилки по грейдам Когда работники знают, какие грейды у коллег, как можно подготовиться к повышению и как получить новый грейд, они знают путь достижения цели. Теперь пришло время показать им цель. Они знают навыки и умения сеньора в компании, но какое за это вознаграждение? Покажите вилки грейдов, и тогда у работников будет вся информация.\nЧтобы вилки были актуальны, следите за состоянием рынка. Если финансовое положение не дает вам платить выше рынка, то предложите нематериальные бонусы: свободный график, возможность работы из другой страны, техника на выбор. Проинформируйте работников об этом в политике по грейдированию.\nЕсли ваша компания пока не может угнаться за рыночными вилками и новоиспеченный сеньор, не зная вилки грейда заранее, получит меньше ожидаемой суммы, то он будет разочарован. Новые знания разработчик получил, тайтл тоже, а вознаграждение не кажется ему соразмерным. Спустя какое-то время он начнет искать другие проекты и пойдет на собеседования. Опыт защиты грейда даст ему преимущество на интервью, и ему охотно предложат новый оффер на желаемый доход.\nОткрытая вилка покажет работникам, что компания не пытается скрыть выбивающиеся из грейдов зарплаты. Такую открытость и прозрачность в рыночных отношениях оценят.\nЗаключение Прозрачность процессов позволяет ответить на вопросы работников компании еще до того, как они решатся их задать. Каждый знает не только возможности заработка в компании, но и что ему нужно сделать для повышения. Открытие зарплатных вилок побудит пересмотреть процессы найма и удержания людей, а их развитие будет поставлено на поток.\n","permalink":"https://maximgorbatyuk.github.io/blog/management/2022-06-06-why-you-should-show-grade-salaries/","summary":"Открытые зарплатные вилки – это когда каждый миддл знает, сколько зарабатывают миддлы и другие грейды в той компании, где он работает. Условно говоря, получает специалист 1500$, но он знает, что вилка его уровня составляет от 1200$ до 2000$. Но просто взять и рассказать всем про деньги, которые они могут получать, нельзя. Мало знать возможности, нужно еще и понимать, как достигнуть ее. Для того, чтобы работники знали путь достижения нового грейда, компании нужно привести в порядок бизнес-процессы.","title":"Почему открытые зарплатные вилки – это хорошо"},{"content":"Каждый из нас так или иначе сталкивается с техническими собеседованиями: кто-то их проходит, а кто-то - проводит. И каждый вспомнит удачные и неудачные примеры из своего опыта. Чтобы интервью прошло с пользой для всех его участников, стоит придерживаться набора шаблонов и паттернов. Тогда разговор не пойдет на самотек и собеседование будет успешным.\nВ статье я расскажу о том, что стоит делать интервьюеру и чего делать не стоит ни в коем случае.\nКрошка джун к лиду пришел\nИ спросила кроха\nЧто такое хорошо и что такое плохо\nДелаем хорошее Интервью, как и любой разговор незнакомых людей, может пойти не по сценарию. И чтобы такого не случилось, задайте структуру интервью. Тогда и разговор будет конструктивным и доброжелательным. Все случаи заранее не просчитаешь, однако можно следовать нескольким советам для того, чтобы вывести ваши собеседования на новый уровень.\n✔️ Готовимся к интервью Проведите домашнюю работу: ознакомьтесь с резюме кандидата, немного отдохните и отключите мессенджеры, чтобы ничего не отвлекало. Если кандидат поймет, что мысли интервьюера где-то в другом месте, то он закроется и собеседование считай закончено. Сместите фокус внимания только на интервью, сейчас только это важно. Лучше перенести интервью, чем провести его некачественно.\n✔️ Помогаем кандидату раскрыться Собеседование нужно для знакомства. Вам нужно понять, сработаетесь ли вы с кандидатом. На собеседовании волнуются почти всегда и почти все:\nкандидат, пытающийся не прогадать с проектом, интервьюер, который боится словить конфуз, рекрутер, который уже провалил сроки закрытия вакансии. Не нужно “закапывать” кандидата, если он поплыл. Так вы никому хорошо не сделаете.\nЕсли вы чувствуете, что кандидат начинает волноваться, то переведите тему. Не нужно “закапывать” кандидата, если он поплыл, так вы никому хорошо не сделаете.\n✔️ Ведем интервью по запланированному шаблону Шаблон поможет не забыть спросить критичные для позиции вопросы. Также шаблон поможет дать развернутый фидбек для других участников процесса найма и самого кандидата.\nСистема оценивания поможет сравнить кандидатов при ограничении бюджета\nШаблон также поможет выставить баллы. Система баллов поможет сравнить кандидатов при ограничении бюджета. Баллы однозначно будут субъективны, ведь это вы их выставляете, однако это будет стандартизированная для вас система оценивания.\n✔️ Оставляем развернутый фидбек Фидбек после интервью необходим и другим участникам процесса найма, и вам самим. Если ваша задача - сделать срез знаний кандидата, то проектный или нанимающий менеджер хочет ознакомиться с ревью для принятия решения. Слишком подробный фидбек тоже плохо. Оставляем только самую суть.\nНачать можно с самого необходимого в шаблоне. Например, эта информация сделает фидбек структурированным:\nОбщее впечатление о кандидате. Пары предложений достаточно. Задача в опыте кандидата, которая была для него вызовом. Озвученные темы в разговоре и баллы к ним. Например, “.NET - 5/10, SQL - 6/10” Red flags, если заметили. Нечто в поведении кандидата, что неприемлемо для вас. Decision: работал бы с ним в одной команде? Отзыв в таком формате поможет не только менеджеру, но и вам самим спустя время. Если кандидат вернется к вам спустя полгода-год, то вам не нужно будет проводить интервью еще раз, ведь вы сможете вспомнить впечатление о нем.\n✔️ Делаем интервью полезным для обоих сторон Кандидат отметит для себя вашу компанию, если собеседование будет полезным и для него. Если кандидат не ответил на вопрос, то тут же сами ответьте на него. Лекцию проводить не нужно, но пары слов будет достаточно.\nПосле интервью составьте публичный фидбек для самого кандидата. Вот такой формат публичного фидбека применяю я:\nОтмечаем уровень кандидата: Junior/Middle/Senior. Положительные качества кандидата. Список тем, которые стоит подтянуть. Преподносите их, как возможности для роста. Список материалов: что почитать, посмотреть, послушать Кандидат может и не захотеть попасть в вашу компанию, однако со своей стороны сделайте максимально возможное, чтобы он захотел.\nПолучив такой структурированный отзыв, кандидат будет знать, что ему нужно подтянуть для того, чтобы попасть в вашу компанию.\n✔️ Готовимся к вопросам кандидата вам Кандидат выбирает компанию, а вы можете помочь ему сделать верный выбор. Если кандидат заинтересован в компании и позиции, то он будет задавать вопросы. Часто спрашивают про технологический стек, размер команды и причины поиска нового человека.\nЛучше всего начать рассказ с того, для какой задачи ваша компания ищет человека: рефакторинг легаси, поддержка системы, новый релиз или расширение команды.\nЯ заранее рассказываю об этом после технической части интервью, чтобы:\nдать вводную информацию, которую кандидат мог бы спросить, но забыл после собеседования, дать кандидату перевести дыхание и расслабиться, дать возможность кандидату услышать то, о чем он мог даже и не спросить. Как технический интервьюер, расскажите о процессах разработки в команде, о регулярных митингах и как вам вообще работается на проекте. Если есть нечто, что может оттолкнуть кандидата от позиции, то не скрывайте это и расскажите. Пусть лучше человек сам откажется от позиции, чем уйдет через полтора-два месяца, поняв, что ему недосказали важного.\nНе делаем плохое ❌ Не спрашиваем то, что не делаем в работе Никто не запрещает спрашивать алгоритмы и задачи на логику. Никто даже не запрещает вам посвятить этому интервью целиком. Однако если после такого собеседования кандидат будет переносить из одной таблицы в другую json-ки fulltime, то у него возникнет вопрос: а зачем так сложно нужно было?\nЕсли после собеседования с алгоритмами кандидат будет переносить из одной таблицы в другую данные fulltime, то у него возникнет вопрос: а зачем так сложно нужно было?\nСпрашивать стоит только то, с чем кандидату придется работать в будущем. Если у вас highload и вам важен оптимизированный код, то задачи по алгоритмам имеют смысл.\n❌ Не играем мускулами перед кандидатом и другими собеседующими Помним главную цель собеседования - понять, подходит ли кандидат в вашу команду. Придумывать же заковыристые вопросы для того, чтобы кандидат не смог на них ответить - только себе вредить. Более того, кандидат это почувствует и закроется. И вряд ли захочет прийти к вам в команду.\n❌ Не прерываем кандидата Кандидат - тоже человек, который любит, когда его слушают. И если кандидат начинает о чем-то увлеченно рассказывать из опыта, то дайте ему договорить.\nКогда человек видит, что его слушают, он рассказывает охотнее.\nВы не только уловите детали о поведении кандидата в той или иной ситуации, но и поможете кандидату раскрыться лучше. Когда человек видит, что его слушают, он рассказывает охотнее.\nЕсли вы ограничены по времени, то в начале разговора предупредите кандидата, что вы можете прерывать его ответы, если поняли, что с темой он знаком не понаслышке. Кандидат оценит такой подход.\n❌ Не проводим интервью больше полутора часов Собеседование – утомительный процесс:\nкандидат рассказывает о себе, вспоминает теорию, думает над заданными вопросами и задачами интервьюер внимательно слушает кандидата, выстраивает цепочку разговора, подбирает следующий вопрос и анализирует ответы. Полтора часа – уже много, старайтесь свести собеседование хотя бы до часа. Чем больше опыта проведения интервью у вас будет, тем быстрее вы будете делать для себя вывод, хороший перед вами специалист или нет.\n❌ Не проводим собес по одному шаблону всегда Пробуйте разные варианты структуры интервью:\nЗадавайте разные вопросы Развивайте тему разговора, которую обсуждаете с кандидатом Добавьте решение практических задач Попробуйте провести сессию код-ревью вместе с кандидатом Начинайте с общих вопросов, чтобы идти дальше в глубь тематики. Так вы поймете уровень знаний кандидата. Не стоит прерывать увлеченный рассказ собеседника, чтобы перейти к следующему вопросу. Ориентируйтесь на предполагаемый уровень кандидата: не стоит тратить время на базовые вопросы сеньор. Лучше идти “сверху вниз”: сначала задаем высокоуровневые вопросы, а если кандидат затрудняется с ответом, начинайте спускаться к темам полегче.\nСессия код-ревью покажет практические навыки кандидата. Многие кандидаты рассказывают увлеченно о паттернах проектирования, SOLID и чистоте кода, но только код-ревью покажет реальный опыт кандидата. Подготовьте заранее класс или маленький проект с набором классов, где намеренно будут допущены архитектурные ошибки и нарушения “чистоты кода”. Пусть кандидат их ищет и предлагает улучшения, а по найденным issue вы убедитесь, насколько кандидат чисто пишет код. Чтобы было все честно, в самом репозитории кода оставьте список всех проблем кода, чтобы кандидат после собеседования мог сам с ним ознакомиться.\n❌ Не игнорируем опыт кандидата Резюме кандидата вам подскажет, какие вопросы лучше задавать на интервью. Опыт на последних одном или двух проектах может быть полезен для задач в вашей компании.\nЕсли вы делаете только срез знаний, но не знаете задач для будущего коллеги, то можно поспрашивать об опыте на том или ином проекте или затронуть темы, которые кандидат описал в резюме. Мультипоточность, специфичная библиотека, highload, etc. Кандидату будет приятно, что интервьюер уделил время прочтению CV.\n❌ Не обращаем внимание на вопросы кандидата Вспоминаем, что главная цель собеседования - понять, сможете ли вы сотрудничать с кандидатом. Свои вопросы вы уже задали кандидату. Логично же, что кандидат тоже задаст какие-нибудь вопросы, не так ли?\nЕсли кандидат не задал ни одного встречного вопроса о компании и проектах, то это означает, что он не заинтересовался позицией. Иногда кандидат задает неподходящие вопросы и иногда даже личного характера.\nСтоит обратить внимание на вопросы и занести в фидбек, если вам они показались нерелевантными. Что с этой информацией будет делать нанимающий менеджер - решать ему.\n❌ Не продаем компанию как хорошего работодателя Собеседование - это когда не только компания выбирает людей, но и люди - компанию. Интервьюер - это представитель компании, поэтому важно не только вести себя сдержанно, но и рассказать о том, как работается в компании и чему кандидат научится, работая у вас.\nРассказываем честно о том, что есть у вас и что предлагаете. Если есть минусы, то говорим о том, как вы над ними работаете и как исправляете их. Если есть информация о долгосрочных планах проекта, то тоже рассказываем о них. Важно дать кандидату полную информацию, не утаивая ничего. Подчеркивайте положительные стороны работы у вас и расскажите о том, как исправляете отрицательные стороны.\nЗаключение Технический интервьюер - это представитель компании, поэтому важно провести собеседование на высшем уровне. Будьте лицом компании перед кандидатом. Поведение интервьюера может как зажечь желание кандидата устроиться в компанию, так и резко оттолкнуть. Будьте открытыми и доброжелательными к кандидату и помните, что собеседование – это стресс для всех его участников. Сделайте все, что можете, и будь что будет.\n","permalink":"https://maximgorbatyuk.github.io/blog/employment/2022-05-27-how-to-not-make-interviews-be-nightmare/","summary":"Каждый из нас так или иначе сталкивается с техническими собеседованиями: кто-то их проходит, а кто-то - проводит. И каждый вспомнит удачные и неудачные примеры из своего опыта. Чтобы интервью прошло с пользой для всех его участников, стоит придерживаться набора шаблонов и паттернов. Тогда разговор не пойдет на самотек и собеседование будет успешным.\nВ статье я расскажу о том, что стоит делать интервьюеру и чего делать не стоит ни в коем случае.","title":"Что такое хорошо и что такое плохо. Как не превратить собеседование в кошмар"},{"content":"RU version of this blogpost is here\nOnly conflicts of interest lead projects to make progress. The project may be any: it-product, building houses, or society and state regime. In systems where its elements keep being static, life stops. Everyone is satisfied with everything he has at the moment.\nFirst of all, I should declare what is “conflict of interests”. A conflict of interest is a dispute where the interests of two or more stand against each other to reach one common cause. Meanwhile, people do not get personal about those conflicts. They know that the dispute is needed to find the right ways and approaches.\nPeople know that conflicts are needed to find the right ways and approaches.\nConflicts in IT In IT, there are conflicts between a customer who ordered a product development and teams, including Project Manager (PM). The customer wants as many features as possible for fewer resources and money. On the other hand, the team wants to work less for more money. Somewhere in the middle, a balance between the scope of work and resources which will be paid takes place. The project manager stands with the team in this dispute. His main goal is to explain why the team does not develop more with the same payment. He uses velocity metrics, negotiates, makes processes transparent, and keeps documents clear.\nInside the development team, some conflicts exist as well as outside they do.\nQA specialists find more bugs to show that the product was not developed correctly; meanwhile, developers say the opposite. Tech/team lead makes a code repository to reject invalid code with failed tests, incorrect code style, or without code-review approvals; meanwhile, developers want to contribute more and more as fast as possible. The project manager watches the team members do their job as much as possible. Conflict between QA and developers QA should say that the product is not developed in the right way. As the QA will find more bugs, as much better they work. QA specialist should not like the product which he/she works with, because he/she always should see something to improve in it. QA should not say: \u0026ldquo;The product version is ready for deployment\u0026rdquo; because developers can do the same without them. QA should say: \u0026ldquo;The product is awful; there are many bugs and defects.\u0026rdquo;\nAs the QA will find more bugs, as much better they work.\nQA finds bugs, creates bug reports, then says their severity. When it\u0026rsquo;s time to deploy a new version of the product, the project manager should decide where is a balance between bugs and new features to make a deployment. Also, the manager should set priority to bug reports: which ones should be fixed as soon as possible and which ones are low priority.\nConflict between code repository and developers A developer wants to implement features as much as possible to take a new one or finish his work. On the other hand, the code repository wants the code to be more maintainable, reliable, and clear to understand. Tech/team lead as a repository representative should set appropriate reject rules to decline invalid code. The code with failed tests, without review approval, or violating code style rules, should be rejected. For implementing this approach, tech/team lead sets continuous integration and declares code review rules.\nTech/team lead as a repository representative should set appropriate reject rules to decline invalid code.\nThe code repository is not a friend to developers. It wants to get only high-quality and maintainable code. The project manager\u0026rsquo;s goal is to manage team/tech lead to declare and set reject rules.\nConflict between project manager and team members Despite the project manager being a part of the development team, he often stands opposed to them. He should monitor the velocity of work of the whole team and every person inside it. If someone fails, the project manager should manage it. As I said before, people want to work less than possible and get paid more. The manager should take it into account. He declares rules of people interactions to make them deliver product or product version in time.\nProject manager declares rules of people interactions to make them deliver product or product version in time.\nTo do this, the manager does the following:\nmakes appointments for task estimation, sets up different dashboards and metrics in the issue tracking system to see progress and velocity, facilitates performance review in the team, makes processes transparent for customers and the team, keeps negotiating results in documents or emails, keeps documents clear for every person in the team and outside. A good manager differs from a bad one because he can prove his arguments by metrics and facts.\nWhy it is crucial to mind conflicts People as team members should consider conflicts as a way to reach a common goal. They should not fight against personalities. Meanwhile, every team member follows their interests during project implementation. Very often, those interests stand opposite each other.\nThe only balance between interests leads to product version delivery which is the primary goal of the project processes. As much strong pressure will be applied from every side of impact, as much better quality the product will get.\n","permalink":"https://maximgorbatyuk.github.io/blog/management/2022-05-09-conflicts-in-it-en/","summary":"RU version of this blogpost is here\nOnly conflicts of interest lead projects to make progress. The project may be any: it-product, building houses, or society and state regime. In systems where its elements keep being static, life stops. Everyone is satisfied with everything he has at the moment.\nFirst of all, I should declare what is “conflict of interests”. A conflict of interest is a dispute where the interests of two or more stand against each other to reach one common cause.","title":"Conflicts lead to high-quality products"},{"content":"EN version of this blogpost is here\nТолько здоровый конфликт ведет к развитию системы, будь то айти-проект, строительство дома или устройство государства и общества. В системе, где элементы находятся в состоянии спокойствия, движение останавливается. Все довольны всем, что имеют на данный момент.\nДля начала стоит прояснить, что такое “здоровый конфликт”. Здоровый конфликт (далее “конфликт”) - это противостояние двух противоположных интересов для достижения результата между ними где-то посередине, и при этом участники конфликта не переходят в прямую конфротацию. Люди понимают, что конфликт нужен для достижения результата и не переходят на личности.\nЛюди понимают, что конфликт нужен для достижения результата и не переходит на личности.\nКонфликты в айти В айти-проекте конфликт присутствует между заказчиком и командой-исполнителем, куда включаем и проектного менеджера. Заказчик хочет сделать как можно больше задач за как можно меньшие деньги. Команда же хочет работать меньше и получить больше денег. Где-то посередине достигается баланс ресурсов и объема работ, что в итоге и разрабатывают исполнители. Проектный менеджер в этом противостоянии встает на сторону команды. Его задача — объяснить, почему они не сделают больше объема работы за те же или меньшие деньги. Менеджер мониторит метрики прогресса команды, проводит переговоры и закрепляет документами договоренности. Умелый менеджер использует числа и показатели, чтобы они становились весомым аргументов в переговорах.\nВнутри команды разработки также присутствуют конфликты:\nтестировщики находят как можно больше багов, чтобы показать, что разработчики выдали продукт недостаточного для клиента качества, Техлид проекта настраивает репозиторий кода таким образом, чтобы он реджектил код, написанный не по правилам общего стиля команды, с красными юниттестами или не прошедшим ревью другим разработчиком, проектный менеджер следит, чтобы каждый участник команды делал свое дело в необходимом объеме. Конфликт между тестировщиками и разработчиками Тестирование доказывает, что продукт не работает так, как нужно клиенту. Чем больше багов тестировщики найдут, тем лучше. Тестировщику не должен нравиться продукт, над которым он работает — всегда есть то, что можно улучшить еще и еще. Тестировщики — это не один из уровней Quality Gate для деплоя на продакшн, они не говорят: “Подтверждаем качество”. И без тестировщиков разработчик скажет, что продукт готов к деплою. Если тестировщик соглашается во всем с разработчиком, значит тестировщик делает свою работу неправильно.\nЧем больше багов, тем лучше и тем эффективней работает тестировщик.\nТестировщик ищет как можно больше багов, оформляет их в багрепорты и записывает в тикет-систему, присваивет уровни критичности. Чем больше багов, тем лучше и эффективней работает тестировщик. Во время деплоя проектный менеджер решает, где наступает тот самый баланс между качеством продукта и усилием команды над его выпуском. Менеджер изучает найденные баг-репорты и присваивает им приоритет исполнения: какие фиксим в первую очередь, какие - откладываем вниз бэклога.\nКонфликт между репозиторием и разработчиками Разработчик хочет написать как можно быстрее фичу и перейти к следующей задаче, но репозиторию важно качество заливаемого в него кода. Техлид как представитель репозитория настраивает правила приемки нового кода в дефолтовую ветку таким образом, чтобы разработчику было как можно сложнее залить некачественный код: с нарушением стилей, с зафейленными юниттестами, без понятной и поддерживаемой архитектуры. Для этого настраивают пайплайны Continious Integration и декларируют правила код-ревью.\nТехлид настраивает правила приемки нового кода в дефолтовую ветку таким образом, чтобы разработчику было как можно сложнее залить некачественный код.\nРепозиторий кода — не друг разработчику, он хочет получать только качественный код от них. Задача проектного менеджера заключается в том, чтобы проследить за правильной настройкой репозитория и пригласить, например, независимого техлида для этого.\nКонфликт между проектным менеджером и командой Несмотря на то, что проектный менеджер является частью команды, его задача заключается в том, чтобы проследить, что каждый ее участник выполняет обязанности в полном объеме. Люди преследуют свои цели, но если упростить отношения между людьми как элементами системы в капиталистическом мире, то каждый желает сделать как можно меньше и при этом получить вознаграждение как можно больше. Разработчик — не исключение, и он тоже хочет работать как можно меньше и получить зарплату как можно больше. Проектный менеджер учитывает это и настраивает взаимодействие между участниками процесса таким образом, чтобы проект доставили заказчику вовремя и в должном объеме несмотря на здоровую эгоистичность разработчиков.\nПроектный менеджер настраивает взаимодействие между участниками процесса таким образом, чтобы проект доставили заказчику вовремя и в должном объеме.\nУ проектного менеджера для этого пользуется разными наборами инструментов и практик:\nсобирает встречи для оценки сложности задач, настраивает тикет-систему так, чтобы видеть необходимые отчеты и показатели, мониторит метрики прогресса команды и отдельных ее участников, проводит оценку 360 и performance review, закрепляет договоренности в документах и письмах. Хороший менеджер отличается от плохого тем, что он свое мнение подкрепляет цифрами и фактами.\nПочему важно не забывать о конфликте Люди как участники команды разработки проекта понимают, что их общая задача — это доставка проекта заказчику. Однако часто забывают, что у каждого из них свои цели для достижения общего результата. И еще чаще эти цели находятся по разные стороны баррикад.\nЦель же проекта — доставка продукта заказчику — достигается на нахождении компромисса между противоборствующими сторонами, и чем сильнее давление с каждой из сторон, тем качественней будет продукт разработки команды.\n","permalink":"https://maximgorbatyuk.github.io/blog/management/2022-05-08-conflicts-in-it/","summary":"EN version of this blogpost is here\nТолько здоровый конфликт ведет к развитию системы, будь то айти-проект, строительство дома или устройство государства и общества. В системе, где элементы находятся в состоянии спокойствия, движение останавливается. Все довольны всем, что имеют на данный момент.\nДля начала стоит прояснить, что такое “здоровый конфликт”. Здоровый конфликт (далее “конфликт”) - это противостояние двух противоположных интересов для достижения результата между ними где-то посередине, и при этом участники конфликта не переходят в прямую конфротацию.","title":"Конфликт в проекте – качественный продукт"},{"content":"Я проводил технические собеседования во всех компаниях, где работал. Чаще всего это были собеседования, где я должен был сделать срез знаний специалиста, чтобы решение о найме принимал менеджер. Также проводил собеседования, где сам решал, продолжать ли процесс найма сотрудника. И я заметил, что иногда начинающие разработчики задают в конце интервью вопрос “Ну, как вам?” или “как я прошел собес?” На мой взгляд, этот вопрос бессмысленный.\nВо-первых, навряд ли интервьюер ответит честно. Я сам отвечаю на этот вопрос обтекаемыми общими фразами и стараюсь избегать однозначного ответа. Например, я чаще всего отвечаю так: “Есть хороший опыт в N и X и при этом есть пробелы в M и Y. Я оформлю финальный фидбек в ближайшие пару дней”. Очень корпоративные фразы, которые ничего конкретно не говорят, однако иначе можно сказать лишнего. Если я отвечу однозначно “да, мне собес понравился, ты подходишь”, а менеджер откажется от найма в пользу другого разработчика, то у моего кандидата останется неприятный осадок. В случае, если я скажу: “есть пробелы тут и тут и тут, а по требованиям вакансии они обязательны”, то у кандидата будет осадок уже сразу после собеседования.\nЕсли я отвечу однозначно “да, мне собес понравился, ты подходишь”, а менеджер откажется от найма в пользу другого разработчика, то у моего кандидата останется неприятный осадок\nВо вторых, решение о найме принимаю не я. Технический интервьюер - только часть процесса. Поэтому я не могу судить, кого компания наймет, а кому - откажет. Нанимающий менеджер, возможно, рассматривает кандидатов как возможности для инвестиций, и поэтому обратит внимание даже на тех кандидатов, которые на первый взгляд не пододят к позиции.\nТехнический интервьюер - только часть процесса. Поэтому я не могу судить, кого компания наймет, а кому - откажет.\nВ третьих, стоит ли пытаться понравиться кому-то? Будучи кандидатом, я тоже присматриваюсь к компании, куда прохожу собеседование. Интервьюерами обычно становятся те, кто отражает атмосферу в компании. Если мне нравится общаться со интервьюером из нее, а интервьюеру - со мной, значит наше сотрудничество будет, скорее всего, успешным. Если нет, то нет. Поэтому переживать из-за того, что после интервью ко мне не вернулись с обратной связью или вернулись с отказом, не стоит.\nСобеседование - как свидание, где важно найти точки соприкосновения и различия в характере, чтобы понять, по пути ли вам или нет.\n","permalink":"https://maximgorbatyuk.github.io/blog/employment/2022-02-20-do-not-ask-about-ti-rigth-after-it/","summary":"Я проводил технические собеседования во всех компаниях, где работал. Чаще всего это были собеседования, где я должен был сделать срез знаний специалиста, чтобы решение о найме принимал менеджер. Также проводил собеседования, где сам решал, продолжать ли процесс найма сотрудника. И я заметил, что иногда начинающие разработчики задают в конце интервью вопрос “Ну, как вам?” или “как я прошел собес?” На мой взгляд, этот вопрос бессмысленный.\nВо-первых, навряд ли интервьюер ответит честно.","title":"Не спрашивай на собеседовании “Ну как, я подхожу?”"},{"content":"Мне нравится проводить и проходить собеседования. Это прекрасная возможность познакомиться не только с новыми людьми, но и с другими подходами к работе. Какие-то подслушанные практики я применял у себя в проектах, каким-то находил очередное подтверждение, почему они не работают.\nКак интервьюер, я стараюсь сделать собеседование максимально полезным для кандидата. Во-первых, у него не останется чувство, что он отдал энергию впустую. Во вторых, даже если сейчас мы не договоримся, то впечатление о компании и людях у кандидата останется положительным. Такому подходу я следую всю свою карьеру, и я четко помню, почему я стал делать именно так.\nВ моем опыте было два собеседования, которые стали примером для меня:\nЧто должно быть в интервью, И чего точно в интервью быть не должно. Начну с хорошего. Будучи джуном, я старался проходить технические собеседования раз в два-три месяца и иногда даже не только в казахстанские компании. Договорился о собесе с в российскую продуктовую компанию, которая занимается развитием e-commerce портала. Собеседование шло плохо: мне задавали вопросы о том, как работает .net и CLR под капотом. На тот момент я не знал этого, так как фокусировался не на технике, а на бизнес-составляющей проектов: не “как правильно написать”, а “зачем именно это пишем, а не другое”. После собеседования я спросил интервьюера, как он оценивает мои знания. В ответ он разнес меня в пух и прах, сказав, что я - слабый специалист. Я попросил о рекомендациях и спросил, какую литературу мне нужно читать, чтобы стать профессионалом. И в ответ получил список книг и лекций. Из этого интервью я вынес для себя три вывода:\nКандидату нужно давать рекомендации для того, чтобы он улучшил свои знания. Говорить напрямую кандидату любого уровня, что он слабый специалист, нельзя. Даже если в моменте разговор будет конструктивным, осадок все равно останется, причем по отношению к компании, а не к лично мне. Пренебрегать книгами по программированию нелья. Несмотря на то, что версии языков идут вперед, в книгах закладываются базовые систематизированные знания, игнорировать которые никак нельзя. Второе интервью проходило в местной продуктовой компании. В это время я был все тем же джуном, но уже начавшим читать “CLR via C#” - этакую библию дотнетчика. Встал на путь исправления, иначе говоря.\nКомпания занималась продажами автозапчастей. Офис на краю города, но недалеко от моего дома. Решил откликнуться сам, и меня пригласили на собеседование. Офис мне понравился, он был оформлен в стиле лофт. В центре здания была зона с деревьями, огороженная стеклом и со стеклянной крышей. Мини-оранжерея с зелеными растениями в центре хайтек-лофта. Выглядело круто.\nСобеседование началось с разговора с рекрутером обо мне и моем опыте. Потом присоединился начальник отдела программистов и начал задавать вопросы. Он начал с алгоритмов и структур данных, а я поплыл. Буквально после четвертого или пятого вопроса он встал и вышел из кабинета, не попрощавшись. Было крайне неприятно. Рекрутер попыталась сохранить лицо и продолжила задавать свои вопросы, однако продлилось это недолго.\nВыйдя из офиса, я понял, что я на месте этого начальника отдела никогда бы так не поступил. Необходимо проявлять уважение всегда, какого бы уровня кандидат не был. Он тоже, как и вы, потратил свое время, чтобы приехать на встречу, и вы оба - равноправные участники кадрового рынка. Сегодня он интерн, а завтра - лид, который собеседует тебя на проект. Если я понимаю с самого начала, что кандидат не подходит на позицию, то я мягко завершаю интервью и все равно даю возможность ему задать свои вопросы. Мне важно, чтобы впечатление осталось положительное.\nС тех пор прошло несколько лет и несколько десятков интервью, где уже я оценивал уровень кандидата. Думаю, что именно эти два собеседования сформировали то, как я сам провожу их. С тех пор я стараюсь сделать собеседования максимально комфортными и полезными для обоих участников переговоров.\nEN: maximgorbatyuk.medium.com\n","permalink":"https://maximgorbatyuk.github.io/blog/employment/2022-01-29-most-important-interviews-in-my-experience/","summary":"Мне нравится проводить и проходить собеседования. Это прекрасная возможность познакомиться не только с новыми людьми, но и с другими подходами к работе. Какие-то подслушанные практики я применял у себя в проектах, каким-то находил очередное подтверждение, почему они не работают.\nКак интервьюер, я стараюсь сделать собеседование максимально полезным для кандидата. Во-первых, у него не останется чувство, что он отдал энергию впустую. Во вторых, даже если сейчас мы не договоримся, то впечатление о компании и людях у кандидата останется положительным.","title":"О двух интервью, которые стали для меня примером"},{"content":"Хороший баг-репорт – понятный, прозрачный, содержит в себе все, что потребуется для решения проблемы в проекте. Написать такой нетрудно. При составлении важно выложить всю необходимую информацию из своей головы в тикет в Jira, и тогда вопросы разработчики не будут спрашивать “очевидные вещи”.\nБаг-репорты составлять — тоже навык, который нужно развивать. Уметь донести свою мысль до другого человека - полезный навык не только для тестировщиков, но и разработчиков тоже. Проектные менеджеры — разработчикам, фронтендеры — бэкендерам, тестировщики — всем. Если junior-разработчик хочет перейти на следующую ступень карьеры, то он ему пригодится этот навык. Для сеньоров он must-have.\nЗа время работы на проектах разной степени сложности я понял, что хороший баг-репорт несложно оформить, в нем достаточно двух вещей: шаги для воспроизведения и Expected/Actual результаты. Остальная информация опциональна.\nЧтобы создать баг-репорт, который быстро пофиксят, нужно:\nОписать шаги воспроизведения. Начиная от начала авторизации в тестируемом портале и до получения ошибки. Данные для авторизации, Переход по ссылкам, клик по кнопке, ввод таких-то данных, вот это вот все должно быть упомянуто. Написать “Ожидаемый результат / Expected”. Написать “Текущий результат / Actual” Убедиться, что ни один шаг не был пропущен и не нужно будет никому пояснять что-либо. Очевидные вещи надо проговаривать/прописывать. Что очевидно для одного, не очевидно для другого. И наоборот. Если кажется, что “ну вот это они точно и так знают как делать”, то перечитай пункты 4 и 5 В итоге, если баг-репорт был оформлен верно, то:\nСокращается время на фикс. Твои коллеги не тратят свое время и мыслетопливо на прояснение деталей. Автору баг-репорта не задают уточняющие вопросы в личку. Особенно неприятно получать вопросы поле окончания рабочего дня, не так ли? Автор не становится блокером для коллег. Автору не приходится объяснять что-либо второй раз. А если уточняющие вопросы все же появились, то необходимо записать эту информацию в баг-репорт. Тогда обсуждение не потеряется из виду и будет сохранено в общей проектной документации.\nТаким образом, хороший баг-репорт будет выглядеть примерно так:\nTitle: There is no password security requirement error on the register page Steps to reproduce: 1. Go to https://example.com/regitster 2. Type login: \u0026#39;Vasya\u0026#39;, password: \u0026#39;qwerty\u0026#39; 3. Click on the Submit button Expected: Backend validation error, 400 http status response. Message is \u0026#34;Your password must contain at least 1 capital char and 1 digit\u0026#34; Actual: The user account is being created. No backend errors appear Таким образом, любой разработчик команды может взять задачу в разработку, даже если не он писал формы авторизации. Понятен ожидаемый результат и нет необходимости обращаться за разъяснением к оригинальной задаче разработки формы регистрации, автору или бизнес-аналитику. Может показаться, что я хочу переложить работу по прояснению деталей с плечей разработчиков на тестировщиков, ведь ожидаемый результат разработчик сам может посмотреть в требованиях. Однако автор баг-репорта уже знает, как нужно, и может сразу написать об этом, а потом на ретроспективе уже команда обсудит, как не допускать повторений таких случаев.\n","permalink":"https://maximgorbatyuk.github.io/blog/development/2021-12-28-how-to-create-effective-bug-reports/","summary":"Хороший баг-репорт – понятный, прозрачный, содержит в себе все, что потребуется для решения проблемы в проекте. Написать такой нетрудно. При составлении важно выложить всю необходимую информацию из своей головы в тикет в Jira, и тогда вопросы разработчики не будут спрашивать “очевидные вещи”.\nБаг-репорты составлять — тоже навык, который нужно развивать. Уметь донести свою мысль до другого человека - полезный навык не только для тестировщиков, но и разработчиков тоже. Проектные менеджеры — разработчикам, фронтендеры — бэкендерам, тестировщики — всем.","title":"Как создавать эффективные баг-репорты"},{"content":"Let’s imagine you have a web application built as a monolith and you want to introduce microservices. Or you may have several clients connected to your backend solution: mobile app, SPA, devices, etc. One of the first tasks that you have to solve is integrating authentication and authorization. In my opinion, one of the simplest ways is integrating SSO (Single-Sign-On system) into your application.\nThere is an open-source ready-to-use product IdentityServer4 which implements OpenID Connect and OAuth2.0 frameworks. The solution is built using .NET core 3.1 and is easy to modify according to your business rules. Also, it is an out-of-box solution ready to deploy. Therefore, you don’t have to develop and set up a custom authentication system.\nVersions of IdentityServer There are two versions of the IS application: free-to-use open-source IS4 and commercial IdentityServer5. According to documentation, IS5 is free for development and testing, but you should pay for using it on production. IS4 is declared as a legacy system, but it is free to use on production.\nEven though all new features are developing in the commercial IS5, you may start to go live with free IS4. The IS4 system contains all staff required by Open Id connect and OAuth2.0 frameworks.\nHow to integrate the IS4 Downloading the IS4 solution from the GitHub To integrate the IS4 into your system, you just need to download it from samples. I’d suggest you choose my extended solution but you still may choose one of the original ones.\nMy version contains the following:\nThe IS4 solution without any storage. You are free to integrate your favorite one. Several samples of clients including OAuth 2.0 debugger Custom profile service where you can write your code related to issuing claims Feel free to consider my repository as an instruction to integrate the IS4 from the original repository.\nSetup your IS4 Add your own Scope to restrict access to different APIs (like here). If your application has now domain segregation with different scopes, you may not use the custom scope or just use a single one. Here I use “core.api” as a key of the scope, but you may choose any other name. Add clients of the IS4 (like here). To proof the concept, I am adding a web-browser-debug client like this. The client allows me to see claims which are being encrypted in the JWT token. Also, don’t forget to mention your own scope in the clients’ allowed scopes property (like here). Optional Add external login providers like Google authentication if necessary. Here I have a sample code that integrates the Google. Also, the Facebook, GitHub, ActiveDirectory, etc, providers are available to be used. Optional In this Custom profile service you may change claims which will be used to prepare a JWT token for clients. Setup your Web API application Here I will give you an example using ASP.NET core Web API. I believe it is easy to find tutorials of integrating OAuth2.0 authentication services for other web frameworks for other programming languages.\nAdd Bearer authentication with the IS4 URL address (like this). Optional Add scope authorization to restrict accesses (like this). If you do step 2, and your Client without the scope does a web request, it will get a 403 error.\nSetup debug client like OAuth 2.0 debugger Add the client like this. Go to URL below: https://localhost:6001/connect/authorize?response_type=id_token\u0026amp;client_id=client\u0026amp;client_secret=secret\u0026amp;redirect_uri=https%3A%2F%2Foauthdebugger.com%2Fdebug\u0026amp;scope=openid%20email%20profile\u0026amp;nonce=wnpup8t4v2b ","permalink":"https://maximgorbatyuk.github.io/blog/development/2021-12-26-how-to-integrate-identity-server/","summary":"Let’s imagine you have a web application built as a monolith and you want to introduce microservices. Or you may have several clients connected to your backend solution: mobile app, SPA, devices, etc. One of the first tasks that you have to solve is integrating authentication and authorization. In my opinion, one of the simplest ways is integrating SSO (Single-Sign-On system) into your application.\nThere is an open-source ready-to-use product IdentityServer4 which implements OpenID Connect and OAuth2.","title":"How to integrate Identity Server into your web application"},{"content":"There is a recommendation: to write a postfix \u0026ldquo;\u0026hellip;Async\u0026rdquo; at the end of async methods in .NET. I always follow this rule, and also I recommend everyone to do this as well as I do. In this article, I want to share my thoughts on why this is an important rule when you deal with asynchronous programming.\nYou can call the async method without await and it will not throw any error In my opinion, it is a problem that .NET allows us to call an asynchronous method without the await keyword and without awaiting a result as well. and no compile error will be thrown. Also, a runtime error will not be thrown as well. Therefore, you should mark async methods with \u0026ldquo;\u0026hellip;Async\u0026rdquo; postfix to help yourself and your teammates not miss possible errors in the production.\nYou read the code not only with IDE That\u0026rsquo;s maybe a surprise for junior developers, but members of their team read the code not only with IDE. Github, git merge tool, etc are used to do it as well. There is no IntelliSense or warning from your programming language. Then, if you left the async method without Async postfix and passed it to code review, your colleague might be tired and miss the method to the production. Of course, it would be his mistake, but I hope you work for the project\u0026rsquo;s success, not only for moving Jira tickets from the \u0026ldquo;Development\u0026rdquo; column to \u0026ldquo;Code review\u0026rdquo; and that\u0026rsquo;s all you do on the project. Just help your senior - do not do code reviews harder than they should be.\nIt explicitly says that the method is asynchronous It might sound like obvious advice, but it is important to write explicit code which is not ambiguous. The code is the thing that you should not guess about. The code is something that is supposed to be explicit and to show its intention. In my opinion, the async approach is one of the intentions.\nConclusion If you don\u0026rsquo;t mind about leaving \u0026ldquo;..Async\u0026rdquo; postfix at the end of the async methods you write, please, change your mind. That makes code review sessions easier, and your code more transparent and clean.\n","permalink":"https://maximgorbatyuk.github.io/blog/development/2021-12-12-do-not-forget-about-async/","summary":"There is a recommendation: to write a postfix \u0026ldquo;\u0026hellip;Async\u0026rdquo; at the end of async methods in .NET. I always follow this rule, and also I recommend everyone to do this as well as I do. In this article, I want to share my thoughts on why this is an important rule when you deal with asynchronous programming.\nYou can call the async method without await and it will not throw any error In my opinion, it is a problem that .","title":"Do not forget about Async postfix"},{"content":"За время своей карьеры я провел много техничесикх собеседований. Почти в каждой компании я выступал в роли технического интервьюера. Довелось и быть тем, кто аппрувит кандидата на дальнейший этап найма. Мне нравится этот процесс, он позволяет держать теоретические знания в тонусе.\nКогда я сам выступаю в роли кандидата, я обращаю внимание на процесс интервью. В результате наблюдений я составил для себя несколько аспектов, которые позволяют сделать мне вывод о кандидате.\nКак для интервьюера, для меня важно\u0026hellip; \u0026hellip;умение говорить Теоретическая подготовка специалиста – это необходимая база, однако мне грустно, когда человек не умеет доходчиво и кратко рассказать об опыте. Во время митингов при планировании и ретро этот же спец будет так же неумело высказывать точку зрения, и в итоге качество встреч снизится.\nУмение говорить – это лаконичность, емкость содержания, отсутствие слов-паразитов. Все эти качества речи будут полезны не только при митингах, но и во время менторства и на встречах уже с заказчиками и pre-sales встречах. Более того, без умения говорить вряд ли получится пойти в тимлиды и/или проектные менеджеры, если у специалиста есть такое желание.\n\u0026hellip;встречные вопросы во время собеседования Когда кандидат не знает ответ на заданный вопрос, то мне интересно услышать, что скажет кандидат. Задаст ли он вопрос \u0026ldquo;а как тогда\u0026rdquo;, попытается ли рассуждать на эту тему? Если собеседник интересуется правильным ответом, то это хороший знак \u0026ndash; специалист старается покрыть отсутствие знаний. Он, скорее всего, открыт к новому, готов обсуждать спорные вопросы.\n\u0026hellip; вопросы после сессии проверки знаний Принято, что если кандидат пришел на собеседование, то он заинтересован в позиции. Даже если для кандидата это спортивное прохождение собеседований, то все равно он заинтересован в интервью. В конце интервью кандидат задает вопросы техническому спецу, который уже работает в компании. Если кандидат не спрашивает ничего или спрашивает нерелевантные вопросы, то это – желтая карточка. В моем опыте был такого рода вопрос: \u0026ldquo;А почему вы не уезжаете зарубеж работать?\u0026rdquo;. Ответ на вопрос точно не о проекте и зависит от множества личных факторов. Что ответ на этот вопрос может быть кандидату – не понятно.\nТакже странно задавать вопрос \u0026ldquo;прошел я или не прошел\u0026rdquo;. Смысла спрашивать это нет – интервьюер не ответит честно. Во-первых, его задача – определить уровень знаний, а решение о том, подходят ли знания под проект или нет, принимают другие люди. Во вторых, для составления фидбека интервьюеру необходимо время. Я обычно беру небольшой перерыв после собеседования, а потом уже пишу отзыв о кандидате. Это позволяет мне расслабиться и прокрутить некоторые моменты в памяти за чашкой чая или кофе.\n\u0026hellip;рассуждения вслух Цель любого собеседования – познакомиться друг с другом и рассказать о себе. За час-полтора общего времени интервью сложно составить объективную оценку друг о друге. На мой взгляд, рассуждения вслух позволяют дать о себе более глубокое представление.\nРассуждая вслух, кандидат показывает умение думать и делать выводы. Умение размышлять может быть подходящим под проект или команду или не подходящим, главное – чтобы его показали. Интервьюер уже определит, насколько хорошо кандидат подходит команде. \u0026ldquo;Закрытый\u0026rdquo; кандидат никакого представления о себе не дает, и сделать выводы об его уровне знаний становится сложно.\nВ заключение У интервьюера нет возможности заглянуть в голову кандидату. Интервьюер делает оценку опыта только полагаясь на услышанное и увиденное. Если собеседование проходит онлайн и без веб-камер, то только по рассказу можно судить об опыте кандидата. Если кандитат не делает предположений, не задает уточняющих вопросов и дает односложные ответы, то интервьюеру будет сложно составить хороший фидбек.\nБолее того, кандидат должен понимать это и стремиться раскрыть себя максимально глубоко, если заинтересован в собеседовании. Если же этого понимания нет, то собесы для такого кандидата вряд ли будут оканчиваться успехом.\n","permalink":"https://maximgorbatyuk.github.io/blog/employment/2021-11-02-tech-interview-essentials/","summary":"За время своей карьеры я провел много техничесикх собеседований. Почти в каждой компании я выступал в роли технического интервьюера. Довелось и быть тем, кто аппрувит кандидата на дальнейший этап найма. Мне нравится этот процесс, он позволяет держать теоретические знания в тонусе.\nКогда я сам выступаю в роли кандидата, я обращаю внимание на процесс интервью. В результате наблюдений я составил для себя несколько аспектов, которые позволяют сделать мне вывод о кандидате.","title":"На что стоит обратить внимание во время технических интервью"},{"content":"Как часто стоит менять проекты? Какой период времени смены работы можно считать некой нормой? На эти рассуждения меня натолкнуло обуждение в одном из чатов разработчиков в моей стране. Вопрос действительно интересный, его стоит обсудить.\nА зачем воообще менять проект? Казалось бы, зачем нужно что-то менять? Зачем менять работу, если все устраивает? Каждый выбирает сам, но для себя я решил: не только я отдаю что-то проекту, но и проект – мне. Когда я рассматриваю новые проекты, то я пытаюсь найти нечто, чему я могу научиться. Есть афоризм: нужно быть самым глупым в комнате. Такой же аналогией я руководствуюсь и при смене проекта. Нужно искать людей, у которых можно и нужно научиться чему-то новому для себя.\nСмена проекта имеет смысл для специалистов, которые только в начале своей карьеры. Для состоявшихся разработчиков для смены работы есть и другие причины: интересная предметная область, другой стек технологий, опыт работы в распределенной команде либо новая роль в команде. Задуматься о новом проекте стоит, когда ты чувствуешь, что делаешь изо дня в день рутину и ничто тебя не может удивить. Работа должна приносить удовольствие\nКак часто стоит менять работу? Время, за которое можно освоиться в новом окружении, зависит от человека. За свою карьеру я сменил 6 проектов, в последнее время веду два параллельно. Так получалось, что я менял работу раз в полтора-два года, и каждый раз я сам начинал искать что-то новое для себя. Думаю, что ориентироваться на такой период всегда не стоит, так как от позиции разработчика зависит и уровень его ответственности, и время, за которое он сможет реализовать себя. Для разных грейдов специалистов – разные сроки смены работы. Смена проекта – это полезный стресс погружения в новые для себя условия и команду, и это только положительно сказывается на карьере. В обратном случае, когда человек не меняет проекты годами, я могу предположить, что человек конформист и желает избегать подобного стресса.\nЧастая смена работы – это подозрительно, на мой взгляд. Если специалист меняет компании раз в полгода, то это может быть признаком того, что:\nчеловек не умеет выбирать компании/проекты и быстро уходит, так как ошибся с выбором человека \u0026ldquo;просят\u0026rdquo; уйти, так как он не сумел влиться в команду человек импульсивен и готов легко оставить начатое дело. Конечно, судить только лишь по этому факту о человеке не стоит, но важно понимать, что нет дыма без огня.\nЕсли же специалист подолгу сидит на одном проекте, то это тоже должно стать звоночком для тимлида при собеседовании. Если специалист сидит несколько лет, не меняя ни проекты, ни компанию, ни свой грейд, то он, скорее всего, не заинтересован в развитии своих навыков и карьеры. При этом он может вполне успешно выполнять свои обязанности. Люди бывают разные, как и потребности в команде, поэтому такой спецаилист вполне может вписаться в вашу команду. Я же при собеседованиях отдам предпочтение другим кандидатам, которые стремятся к углублению своих познаний в разработке.\nЕсли разработчик давно работает в компании, которая предоставляет аутсорс/аутстафф услуги заказчикам, то я смотрю на сроки смены проекта. Если же человек \u0026ldquo;сидит\u0026rdquo; в одной продуктовой компании долго, то это повод задуматься для меня. Наблюдал ситуации, когда люди в продуктовой компании для удержания своего места\nJunior – 1 год Джуном я бы назвал специалиста, у которого есть 1-2 года коммерческой разработки. Для них менять проект приемлемо раз в год. Если я вижу, что джун меняет компании чаще, то это повод задуматься. Найм спеца стоит времени и денег, и может быть стоит остановить свой выбор на другом кандидате. С другой стороны, молодой специалист не всегда сумеет сделать верный для себя выбор, и поэтому только спустя время он может понять, что ошибся с проектом и командой. Важно помнить об этом тоже.\nMiddle – 1.5-2 года Если миддл меняет проекты раз в полтора-два года, то я спокойно отнесусь к этому. За полтора года вполне можно и освоиться в команде, и получить достаточный опыт для своей карьеры. На этом уровне умение выбирать новые проекты для себя уже должно быть развито сильнее, чем у джуна, так что более частая смена работы подозрительна.\nSenior – 2-3 года Для сеньорских позиций нормой я бы рассматривал сроки от двух лет до трех даже. Уровень ответственности, возлагаемый на сеньора, предполагает не просто разработку и перемещение тикетов из статуса TODO в DONE, но и построение новых процессов, и влияение на качество разработки проекта. От сеньора я жду и ответственность за ведение какого-то модуля в системе, и менторинг коллег с меньшим опытом. Следовательно, результат работы сеньора будет наблюдаться только спустя время, а не через две недели спринта. Более того, я жду, что сам специалист понимает это и наблюдает за примененными изменениями. Если же разработчик считает, что \u0026ldquo;сейчас запилим по-быстрому, а там хоть трава не расти\u0026rdquo;, то это я характеризую как красный флаг к тому, чтобы его нанять.\nЕсли специалист сидит дольше трех лет без смены роли в команде, то стоит внимательно изучить список его достижений. Возможно, он занимался внедрением принципиально новых технологий иил процессов разработки в проект и поэтому ему важна была обратная связь.\nTeamlead – 2+ лет Пока что у меня мало опыта в собеседовании на позиции тимлидов, поэтому я руководствуюсь собственным опытом и опытом своих руководителей. Тимлид – это тот, кто умеет запускать проекты, настраивать процессы разработки и собирать команду из людей с теми компетенциями, которые требуются для решения поставленной задачи. Эффективность примененных решений тимлида также можно наблюдать только на длинной дистанции, поэтому смена проекта раньше двух лет и раньше окончания проекта может говорить о том, что тимлиду обратная связь не так важна.\nЗасидевшийся тимлид в одном проекте или продуктовой компании – повод посмотреть на его достижения и развитие проекта. Так же, как и сеньор, тимлид может активно заниматься трансформацией программы либо процессов разработки, значит и времени у него это могло занять больше. Отношение к эффективности работы проекта в продакшне – показатель профессионализма менеджера.\nProject Manager – 2+ лет Эффективность работы проектных менеджеров можно оценить только на длительных дистанциях, на мой взгляд. Эффективность освоения бюджета, фидбек и лояльность заказчиков, текучка специалистов в проекте – все это показатели работы менеджера. Частые смены работы – гораздо более яркий повод задуматься над тем, чтобы перейти к следующему кандидату. Как и в случае сеньоров и тимлидов, специалист может работать по принципу \u0026ldquo;запустим, а там хоть потоп\u0026rdquo;. Такой подход к работе точно приведет к уходу закзачиков из компании.\nНе только цифры Цифры – это интересно, но это лишь повод поговорить. Поговорите с человеком и обсудите его опыт и достижения. Если разработчику нечем похвастаться, кроме количеством лет на одном проекте, то стоит перейти к следующему кандидату. А если разработчик достигает многого в короткие сроки и это можно наблюдать извне, то нанимайте его как можно скорее. Только не забудьте обсудить, как вы можете помочь ему улучшить навыки и как он может помочь улучшить ваш проект.\n","permalink":"https://maximgorbatyuk.github.io/blog/employment/2021-09-05-how-much-time-to-spend-on-the-project/","summary":"Как часто стоит менять проекты? Какой период времени смены работы можно считать некой нормой? На эти рассуждения меня натолкнуло обуждение в одном из чатов разработчиков в моей стране. Вопрос действительно интересный, его стоит обсудить.\nА зачем воообще менять проект? Казалось бы, зачем нужно что-то менять? Зачем менять работу, если все устраивает? Каждый выбирает сам, но для себя я решил: не только я отдаю что-то проекту, но и проект – мне. Когда я рассматриваю новые проекты, то я пытаюсь найти нечто, чему я могу научиться.","title":"Какой период работы над одним проектом считать нормой?"},{"content":"Что значит быть тимлидом Таким вопросом задаются многие разработчики: и те, кто хочет стать тимлидом, и те, кто уже. После полутора лет работы в качестве тимлида у меня сформировалось некое понимание своей роли в проекте и компании.\nНа мой взгляд, главная и едва ли не единственная задача тимлида на проекте – сделать максимально возможное, чтобы поставить продукт вовремя. Звучит легко, однако за этой формулировкой стоит такой огромный спектр задач, что можно легко запутаться. Попробую раскрыть тему, что обычно я делаю для того, чтобы поставить продукт вовремя. Что можно включить в перечень задач, достигая которые выполняется главная?\nУстановить начальные процессы разработки Процесс разработки – это протокол взаимодействия между людьми в тех или иных ситуациях. Стратегия ведения веток в гите, статусы тикетов в джире и логика перехода из одного в другой, разграничение ответственностей каждого из участников проекта и группы разработки в целом и т.д. Сделать процессы понятными для всех важно, чтобы каждый понимал, что делать в той или иной ситуации. Я руководствуюсь собственным набором best practice:\nбрэнч-стратегия – Gitflow канбан либо scrum в качестве методики управления проектом прописанный свод правил \u0026ldquo;что делать, если\u0026hellip;\u0026rdquo;. В качестве примера можно взять этот документ созданный репозиторий в GitLab/Github/Azure/\u0026lt;your repo system\u0026gt; с \u0026ldquo;фундаментом\u0026rdquo; проекта настроенный Continious Integration, который проверяет сборку основных веток и мердж-реквесты настроенные проверки синтаксиса и статический анализатор кода Следить за установленными процессами разработки Недостаточно только установить процессы, необходимо также понимать, работают они или нет. Необходимо отслеживать прогресс работы и анализировать, как влияют принятые процессы и правила на него. Баги в проекте отражают реальную картину. Баг не может возникнуть из ничего, и его причина может сказать многое: недопонимание, непрозрачные требования, неописанные правила взаимодействия между участниками. Главное – никогда не упускать из виду процессы.\nАдаптировать и адаптироваться Best practice – это рекомендации, а не жесткие правила. Если что-то для вашей команды не работает, то нужно либо адаптировать процессы, либо адптироваться самому. Адаптировать процессы важно, потому что рекомендации описаны слишком универсально, чтобы могли быть применены без изменений к любой команде. Важно понять, как именно поменять процесс, а для этого необходимы анализ и ретроспективы.\nАдаптировать процессы может быть не так сложно, как адаптироваться самому. Универсальные практики были обкатаны многими командами, раз их рекомендуют применить в первую очередь. Если какая-то практика не работает для вас, то могут быть причиной устаревшие взгляды людей, кто принимает решение в команде. Для того, чтобы понять, что делать, нужно высокое умение рефлексировать.\nЕсли подытожить На мой взгляд, основная задача тимлида - это не тикеты в Jira двигать, а делать так, чтобы его команда комфортно могла делать это вместо него и ничто ей не мешало. Часто тимлид берет задачи в разработку, но нужно помнить, что такое стиот делать только в том случае, когда в тот момент времени команда перформит на достаточно высоком уровне.\n","permalink":"https://maximgorbatyuk.github.io/blog/management/2021-08-18-who-is-teamlead/","summary":"Что значит быть тимлидом Таким вопросом задаются многие разработчики: и те, кто хочет стать тимлидом, и те, кто уже. После полутора лет работы в качестве тимлида у меня сформировалось некое понимание своей роли в проекте и компании.\nНа мой взгляд, главная и едва ли не единственная задача тимлида на проекте – сделать максимально возможное, чтобы поставить продукт вовремя. Звучит легко, однако за этой формулировкой стоит такой огромный спектр задач, что можно легко запутаться.","title":"Главная задача тимлида на проекте"},{"content":"If you work with Azure infrastructure and have to integrate message queues. It sounds quite simple: just create Azure Resource, write some code and then be happy! But what would you say if the resources are limited? What will you do if there are several teammates in your team, and all of you have to debug queues at the same time?\nWell, I know a minor life hack for my teams. I create an InMemory Message queue engine for local development and use Azure Service Bus (or any other external MQ engine) only for remote environments. This solution allows me to not think about paid resources or concurrency access to the single development queue.\nDevelopers just create business logic and do not care about Azure Access or availability. I think the InMemory engine should not become an issue. Most of the business tasks do not depend on the technical implementation of the queue engine. My opinion that they should not do it at all. When you have to develop a technical algorithm that uses, for example, some Kafka or RabbitMQ features, you will debug it using external resources. But in my opinion, business logic should not depend on either RabbitMQ or Kafka, or Azure Service Bus. When you write unites, you do the same, aren’t you? Therefore the logic can use the InMemory solution during the local development.\nSo, let me show my solution. If you meet a similar task, the solution could be helpful for you. As an example, I will use an email distribution service (EDS) that accepts emails via Queues and then sends them. My apps publish email content, my EDS consumes it and sends using the SMTP server.\nTherefore, we need to develop the following items:\nSettings for our application Queue message publisher Queue consumer. Using InMemory Queues engine InMemory Setup I will use the MassTransit library to make the solution simpler. Here is a code that sets the MassTransit:\n// IServiceCollection services; services.AddMassTransit(x =\u0026gt; { x.AddConsumer\u0026lt;MassTransitEmailSendConsumer\u0026gt;(); x.UsingInMemory((context, cfg) =\u0026gt; { cfg.TransportConcurrencyLimit = 100; cfg.ConfigureEndpoints(context); cfg.ReceiveEndpoint(_configuration.EmailMessageTopic.ToString(), e =\u0026gt; { e.ConfigureConsumer\u0026lt;MassTransitEmailSendConsumer\u0026gt;(context); }); }); }); services.AddMassTransitHostedService(); services.AddScoped\u0026lt;IMessageBroker, InMemoryBrokerPublisher\u0026gt;(); Here I use some config values. The class represents MQ settings and is used by both queues: InMemory and Azure Service Bus.\nusing Microsoft.Extensions.Configuration; namespace YourNamespace { public class MessageBrokerSettings { public NonNullableString Connection { get; } public NonNullableString EmailMessageTopic { get; } public NonNullableString HealthCheckConnection { get; } public NonNullableString HealthCheckTopic { get; } public MessageBrokerSettings(IConfiguration configuration) { var section = configuration.GetSection(\u0026#34;Azure\u0026#34;).GetSection(\u0026#34;ServiceBus\u0026#34;); Connection = new NonNullableString(section[nameof(Connection)]); EmailMessageTopic = new NonNullableString(section[nameof(EmailMessageTopic)]); HealthCheckConnection = new NonNullableString(section[nameof(HealthCheckConnection)]); HealthCheckTopic = new NonNullableString(section[nameof(HealthCheckTopic)]); } } } NonNullableString is a special class that makes me sure that the value inside will never be null. Some kind of ValueObject from DDD, you know. When I invoke .ToString() method, the class returns me a value of the config. Otherwise, it will throw an exception. The code of the class you may see at my GitHub gist: NonNullableString.cs.\nInMemory Publisher Now we have created a publisher and consumer. The email publisher will use IPublishEnpoint that is given us by MassTransit library:\nusing System.Threading.Tasks; using MassTransit; using Microsoft.Extensions.Logging; namespace YourNamespace { public class InMemoryBrokerPublisher : BrokerPublisherBase { private readonly IPublishEndpoint _publish; public InMemoryBrokerPublisher(IPublishEndpoint publish, ILogger\u0026lt;InMemoryBrokerPublisher\u0026gt; logger) : base(logger) { _publish = publish; } protected override Task PublishInternalAsync\u0026lt;T\u0026gt;(string topicName, T message) { return _publish.Publish(message); } } } The BrokerPublisherBase is a base class and does not depend on queue implementation. The class is inherited by both queue-related publishers as well. It implements a simple IMessageBroker.\nusing System.Threading.Tasks; namespace YourNamespace { public interface IMessageBroker { Task PublishAsync\u0026lt;T\u0026gt;(string topicName, T message) where T : class; } } This interface gives the other business logic an endpoint to publish any message.\nInMemory Consumer We will use MassTransit’s ConsumerBase interface for InMemory consumers. Here is a content of the MassTransitEmailSendConsumer:\nusing System.Threading.Tasks; using MassTransit; using Microsoft.Extensions.Logging; namespace YourNamespace { public class MassTransitEmailSendConsumer : ConsumerBase\u0026lt;EmailMessage\u0026gt; { private readonly IEmail _email; protected override async Task ConsumeAsync(ConsumeContext\u0026lt;EmailMessage\u0026gt; context) { await _email.SendAsync(context.Message); Logger.LogDebug(“Email sent”); } public MassTransitEmailSendConsumer(ILogger\u0026lt;MassTransitEmailSendConsumer\u0026gt; logger, IEmail email) : base(logger) { _email = email; } } } IEmail is my business logic interface who is responsible for sending emails. The content of the class does not related to the article subject, and that’s why I don’t give a content of the class. The MassTransitEmailSendConsumer inherits from my own ConsumerBase.cs class implementing MassTransit’s IConsumer\u0026lt;T\u0026gt;.\nNow our ASP.NET core app could work with Message Queues using only memory. Let’s continue with Azure services.\nUsing Azure Service Bus queues I will not tell you about how to create an Azure Service Bus (ASB) using portal.azure.com. Here is a tutorial made by Microsoft. Let’s assume that we have already got a connection string of the Service Bus. How to get it, please read the tutorial from the MS above.\nI have created one queue for emailing and a special topic for azure health check. If you don’t need the health-check, you may create only needed queues.\nAzure SB Setup First, we should set up our application to work with the ASB.\n// IServiceCollection services; // MessageBrokerSettings configuration; services.AddHostedService\u0026lt;AzureBrokerEmailConsumerBackService\u0026gt;(); services.AddScoped\u0026lt;IMessageBroker, AzureServiceBusPublisher\u0026gt;(); services .AddHealthChecks() .AddAzureServiceBusTopic( connectionString: configuration.HealthCheckConnection.ToString(), topicName: configuration.HealthCheckTopic.ToString()); My app’s appsettings.json file contains the following values:\n“MessageBroker”: { “Connection”: “Endpoint=sb://yournamespace.windows.net/;SharedAccessKeyName=email;SharedAccessKey=awesomesecret”, “EmailMessageTopic”: “email-message-queue”, “HealthCheckConnection”: “Endpoint=sb://yournamespace.windows.net/;SharedAccessKeyName=healthcheck;SharedAccessKey=awesomesecret”, “HealthCheckTopic”: “azuretopic” }, “UseInMemoryMessageBroker”: true, MessageBroker section is being used by MessageBrokerSettings class. azuretopic value is a service name of the topic and is used by Health-check library.\nAzure SB Publisher The ASB accepts a string as the queue message, therefore we have to serialize a message. I use JSON format for the serialization. Here is a code of my publisher:\nusing System.Threading.Tasks; using Azure.Messaging.ServiceBus; using Microsoft.Extensions.Logging; using Newtonsoft.Json; using Services.Infrastructure.Azure; namespace YourNamespace { public class AzureServiceBusPublisher : BrokerPublisherBase { private readonly MessageBrokerSettings _config; public AzureServiceBusPublisher(MessageBrokerSettings configuration, ILogger\u0026lt;AzureServiceBusPublisher\u0026gt; logger) : base(logger) { _config = configuration; } protected override async Task PublishInternalAsync\u0026lt;T\u0026gt;(string topicName, T message) { // create a Service Bus client await using var client = new ServiceBusClient(_config.Connection.ToString()); ServiceBusSender sender = client.CreateSender(topicName); // create a message that we can send // send the message await sender.SendMessageAsync( new ServiceBusMessage(JsonConvert.SerializeObject(message))); } } } Please pay attention that the class above uses BrokerPublisherBase as parent. We create ServiceBusClient for each invocation of the class, and this way is recommended by Microsoft.\nAzure SB Consumer Consuming the SB queue message is not as simple as publishing. We should create a hosted service to consume messages within the background process of the ASP.NET Core app. We will use a BackgroundService provided by .net library. We will setup Callbacks for messages and possible errors, and then we will start an endless loop to make the background service working during the main app execution.\nusing System; using System.Threading.Tasks; using Azure.Messaging.ServiceBus; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Logging; namespace YourNamespace { public class AzureBrokerEmailConsumerBackService : AzureBusTopicConsumerBase { public AzureBrokerEmailConsumerBackService( ILogger\u0026lt;AzureBrokerEmailConsumerBackService\u0026gt; logger, IServiceScopeFactory scopeFactory, MessageBrokerSettings brokerSettings) : base( logger, scopeFactory, brokerSettings) { } // handle received messages protected override NonNullableString MessageTopic =\u0026gt; BrokerSettings.EmailMessageTopic; protected override Task MessageHandleInternalAsync(IServiceProvider provider, ServiceBusReceivedMessage message) { string body = message.Body.ToString(); var email = provider.GetRequiredService\u0026lt;IEmail\u0026gt;(); return email.SendAsync(body); } } } The consumer above inherits from our special class AzureBusTopicConsumerBase. This class hides most of the code that sets up the background service. Also, the class creates scope for each received message and then provides an instance of IServiceProvider provider. The provider is useful to get any business service to execute your task:\nusing var scope = ScopeFactory.CreateScope(); await MessageHandleInternalAsync(scope.ServiceProvider, args.Message); // complete the message. messages is deleted from the queue. await args.CompleteMessageAsync(args.Message); Conclusion All you need is a config class that will decide what MQ engine will be used for the running application: the InMemory MQ engine either Azure Service Bus. I have created a helper-class for this purpose, so you can use it as well. Now you have an application that uses Azure Service Bus for staging and production environments and InMemory engine for the local development.\nHope my article was useful for you. Thank you for the reading!\n","permalink":"https://maximgorbatyuk.github.io/blog/development/2021-03-07-asp-net-azure-sb-queues/","summary":"If you work with Azure infrastructure and have to integrate message queues. It sounds quite simple: just create Azure Resource, write some code and then be happy! But what would you say if the resources are limited? What will you do if there are several teammates in your team, and all of you have to debug queues at the same time?\nWell, I know a minor life hack for my teams.","title":"A little life hack when you work with Azure Service Bus and ASP.NET Core"},{"content":"The standard way to accept and return data in ASP.NET world is camel case. But at the current project, I was asked to change my ASP Web API application data processing format. I had to move all the JSON data format from camelCase to snake_case.\nThe reason for it was fact that we had to start developing React application as a SPA of our system. I thought that nothing will be a trouble, but I had met some issues. Now, I want to share with you my solution of how to make your ASP Web API and JSON in the Snake Case be the best friends.\nI have implemented in and published a simple template application. A link to the GitHub repository you can find at the end of the article. All the samples will be written for ASP.NET Core built with .net5.\nChanging request and response JSON formats All we need is to change the property naming policy. The standard one is the Camel Case. Changing it is not a difficult task. You should just create a couple of classes and add some settings to your Startup.cs class.\nFirst, you should create methods to convert property names to the Snake Case. We will use Newtonsoft.Json library feature for the task:\nusing Newtonsoft.Json; using Newtonsoft.Json.Serialization; using Utils.Helpers; namespace YourNamespace { public static class JsonSerializationExtensions { private static readonly SnakeCaseNamingStrategy _snakeCaseNamingStrategy = new SnakeCaseNamingStrategy(); private static readonly JsonSerializerSettings _snakeCaseSettings = new JsonSerializerSettings { ContractResolver = new DefaultContractResolver { NamingStrategy = _snakeCaseNamingStrategy } }; public static string ToSnakeCase\u0026lt;T\u0026gt;(this T instance) { if (instance == null) { throw new ArgumentNullException(paramName: nameof(instance)); } return JsonConvert.SerializeObject(instance, _snakeCaseSettings); } public static string ToSnakeCase(this string @string) { if (@string == null) { throw new ArgumentNullException(paramName: nameof(@string)); } return _snakeCaseNamingStrategy.GetPropertyName(@string, false); } } } Here we have a couple of useful overloaded methods: the first one accepts a model to serialize and the second one accepts a string value to convert. We use library class SnakeCaseNamingStrategy for naming policy settings.\nThen, we should create a class of NamingPolicy for our Web API application. Let\u0026rsquo;s create a class SnakeCaseNamingPolicy:\nusing System.Text.Json; using Utils.Serialization; namespace YourNamespace { public class SnakeCaseNamingPolicy : JsonNamingPolicy { public override string ConvertName(string name) =\u0026gt; name.ToSnakeCase(); } } Here we use the method ToSnakeCase() that we have created in the code above. We use the SnakeCaseNamingPolicy instance in the Startup.cs file in the ConfigureServices method:\npublic class Startup { public void ConfigureServices(IServiceCollection services) { // ... services .AddMvc() .AddJsonOptions(x =\u0026gt; { x.JsonSerializerOptions.PropertyNamingPolicy = new SnakeCaseNamingPolicy(); }); // ... } } Now our Web API works with the Snake Case: requests and responses are being transformed into JSON with the Snake Case format.\nBut now we have one minor issue…\nThe image above represents a validation error. The error’s output format is a mix of Camel Case for keys and the Pascal Case for property names. The behavior of output format was not changed even we have applied a custom name policy.\nSo, let’s fix the issue.\nChanging validation output JSON format To change the validation output, we should replace a standard state response factory with our custom one. First, we start from the error class that will form our response:\nusing System; using System.Collections.Generic; using System.Net; using Microsoft.AspNetCore.Mvc; namespace YourNamespace { public class ValidationProblemDetails : ProblemDetails { // 400 status ccode is usually used for input validation errors public const int ValidationStatusCode = (int)HttpStatusCode.BadRequest; public ValidationProblemDetails(ICollection\u0026lt;ValidationError\u0026gt; validationErrors) { ValidationErrors = validationErrors; Status = ValidationStatusCode; Title = \u0026#34;Request Validation Error\u0026#34;; } public ICollection\u0026lt;ValidationError\u0026gt; ValidationErrors { get; } public string RequestId =\u0026gt; Guid.NewGuid().ToString(); } } The class accepts a list of validation errors to show them in the response. The class inherits from standard ProblemDetails class from Microsoft.AspNetCore.Mvc package. The RequestId property makes it simpler to find the log record in the log view UI system.\nThen, you should replace a standard InvalidModelStateResponseFactory with our custom one. Here is a replacement class:\nusing System.Collections.Generic; using System.Linq; using System.Threading.Tasks; using Microsoft.AspNetCore.Mvc; using Utils.Serialization; namespace YourNamespace { public class ValidationProblemDetailsResult : IActionResult { public async Task ExecuteResultAsync(ActionContext context) { var modelStateEntries = context.ModelState .Where(e =\u0026gt; e.Value.Errors.Count \u0026gt; 0) .ToArray(); var errors = new List\u0026lt;ValidationError\u0026gt;(); if (modelStateEntries.Any()) { foreach (var (key, value) in modelStateEntries) { errors.AddRange(value.Errors .Select(modelStateError =\u0026gt; new ValidationError( name: key.ToSnakeCase(), description: modelStateError.ErrorMessage))); } } await new JsonErrorResponse\u0026lt;ValidationProblemDetails\u0026gt;( context: context.HttpContext, error: new ValidationProblemDetails(errors), statusCode: ValidationProblemDetails.ValidationStatusCode).WriteAsync(); } } } And some setting in Startup.cs should be placed:\npublic class Startup { // ... public void ConfigureServices(IServiceCollection services) { // ... services .Configure\u0026lt;ApiBehaviorOptions\u0026gt;(x =\u0026gt; { x.InvalidModelStateResponseFactory = ctx =\u0026gt; new ValidationProblemDetailsResult(); }); // ... } } Now your validation error output looks like this:\nNow, our ASP.NET Core application accepts and returns JSON with the Snake Case format, and validation error output was changed too. Here is a GitHub repository where you can find the implemented solution.\n","permalink":"https://maximgorbatyuk.github.io/blog/development/2021-02-20-snake-case-and-asp-net-core/","summary":"The standard way to accept and return data in ASP.NET world is camel case. But at the current project, I was asked to change my ASP Web API application data processing format. I had to move all the JSON data format from camelCase to snake_case.\nThe reason for it was fact that we had to start developing React application as a SPA of our system. I thought that nothing will be a trouble, but I had met some issues.","title":"How to accept and return snake case formatted JSON in ASP Web API"},{"content":"На днях посмотрел видео, где автор видео критикует книгу о \u0026ldquo;Мужском движении\u0026rdquo;. Книга, как и само мужское движение, так себе. Видео немного лучше, но тоже среднее, на мой взгляд. Но мой пост не об этом. Больше всего в видео меня зацепил этот момент, где автор берет факт из книги и разносит его в пух и прах, как он сам думает.\nФакт из книги: \u0026ldquo;\u0026hellip; в некоторых регионах России количество разводов достигает более ста процентов от количества заключенных браков\u0026rdquo;.\nАвтор видео: \u0026ldquo;Я - дипломированный специалист по финансовым и фондовым рынкам, который четыре года учил высшую математику, хочу сказать, что это предложение не имеет смысла \u0026hellip;.. как оно может превышать сто процентов? 100% - это единое число.\nЭто пафосно выглядит, когда кто-то приводит в качестве аргумента весомости своего мнения свое образование вместо простых и понятных объяснений своих мыслей. И очень даже потешно выглядит, когда автор по-детски ошибается в своем высказывании.\nРазберем же фразу из книги еще раз: \u0026ldquo;\u0026hellip; в некоторых регионах России количество разводов достигает более ста процентов от количества заключенных браков\u0026rdquo;. Как это может произойти и почему я не вижу ничего противозаконного в этом?\nДопустим, в 2018 и 2019 году брак заключили всего 200 пар, а в 2020, только 50. При этом в 2020 году созданные в за прошлые года семьи решили разойтись и подали 100 заявлений ра расторжение брака. В итоге имеем в 2020 году на 50 заключенных браков 100 разводов, что составляет 200% от кол-ва браков. Или другой пример. Молодые люди заключили брак в Москве, затем переехали в Питер и решили там разойтись. Если предположить, что петербуржцы дотошны до математики и в год на 100 браков всегда было 100 разводов, то в этом году москвичи обеспечили им 101 развод, что составило 101%.\nВполне житейские ситуации, которые никак не кажутся какой-то фантастикой, верно? Но вот автор видео почему-то решил, что подумать больше чем пару секунд - это роскошь для него, и в итоге записал на видео свой конфуз.\nКогда собеседник ставит факт наличия диплома о высшем образовании одним из аргументов, то я слышу, как будто он говорит так: \u0026ldquo;Я считаю себя очень умным в данном вопросе и даже в этом не сомневаюсь. И удосуживаться приводить иные факты, относящиеся к предмету спора, я не буду, как будто это ниже моего достоинства\u0026rdquo;. Мне кажется, что желание возвать к своему образованию возникает тогда, когда другие аргументы исчерпаны. И очень печально, если и не было других аргументов.\nЕсли ты компетентен в предмете спора, то ты найдешь простые объяснения своей точки зрения. Нет смысла взывать к своему образованию, если ты не умеешь его применять на практике. И ты опозоришься, если ошибешься после того, как похвастался своей компетентностью.\nВзывание к образованию очень похоже на требование \u0026ldquo;уважать старость\u0026rdquo;. Мол, \u0026ldquo;я тебя старше, уважай меня\u0026rdquo;. Нет, только лишь за то, что ты стар, я не буду тебя уважать больше, чем своего ровесника. Более того, если человеку к его 60/70/80 годам больше нечем хвастануть, кроме прожитых лет, то уважать такого человека не за что. Открыто проявлять неуважение я не призываю, но я буду игнорировать любые советы и слова от таких людей.\nВерить мнению только лишь из-за образования говорящего или уважать человека больше, чем он того заслуживает, только лишь из-за возраста - это все не про реальные уменя и поступки. Слова мало что значат, \u0026ldquo;человек делом красен\u0026rdquo;. Если в следующий раз ты услышишь от своего собеседника фразу наподобие \u0026ldquo;поверь мне, я - инженер\u0026rdquo;, то к его мнению нужно отнестись с большей долей критической оценки.\n","permalink":"https://maximgorbatyuk.github.io/blog/opinion/2020-09-15-knowledge-as-argue-arguement/","summary":"На днях посмотрел видео, где автор видео критикует книгу о \u0026ldquo;Мужском движении\u0026rdquo;. Книга, как и само мужское движение, так себе. Видео немного лучше, но тоже среднее, на мой взгляд. Но мой пост не об этом. Больше всего в видео меня зацепил этот момент, где автор берет факт из книги и разносит его в пух и прах, как он сам думает.\nФакт из книги: \u0026ldquo;\u0026hellip; в некоторых регионах России количество разводов достигает более ста процентов от количества заключенных браков\u0026rdquo;.","title":"Знания сами по себе как аргумент в споре"},{"content":"Недавно я послушал подкаст \u0026ldquo;Идеальный бизнес-аналитик глазами разработчика\u0026rdquo; своего очень хорошего друга. Не со всеми тезисами я был согласен, однако подкаст побудил меня начать обсуждение с участниками подкаста. А потом еще и сам побывал в этом подкасте в качестве гостя.\nЧтобы понять, кто такой \u0026ldquo;идеальный аналитик\u0026rdquo;, важно определиться с набором требований. Что я жду от аналитика как разработчик? А как тимлид? А как менеджер проекта? Сколько людей, столько и мнений, и я тоже хочу порассуждать о том, каков он - этот неуловимый идеальный аналитик.\nИдеальный аналитик\u0026hellip; \u0026hellip;глазами других участников проекта Аналитик глазами разработчика. Для разработчика важно, чтобы тикет был понятен, краток и емкий. Так разработчик реализует тикет без переделок, тестировщик понимает, как нужно тестировать максимально эффективно, а тимлид и менеджер проекта не страдают. Аналитик глазами тимлида и проектного менеджера. Для тимлида важно, чтобы тикет был реализован вовремя и в соответствии с планом. А это достигается, если тикет прописан максимально качественно. Проектному менеджеру это так же важно, как и тимлиду. В целом, аналитик идеален тогда, когда результат его работы - тикеты - идеален.\n\u0026hellip;пишет качественные тикеты Но что же за зверь такой, этот \u0026ldquo;качественный тикет\u0026rdquo;? Этот тикет отвечает на все вопросы разработчика, какие бы у него они не возникли. Тут важно соблюсти баланс: тикет можно перегрузить так, что у любого читающего будет возникать вопросов больше, чем их было до его прочтения. Любой тикет должен содержать критерии приемки, которые будут полезны и разработчику, и тестировщику, и тимлиду, и проектному менеджеру. Без них, на мой взгляд, сложно понять, что же хочет увидеть в конечном итоге заказчик функциональности. Если тикет привносит новую функциональность, то критериев приемки будет достаточно.\nЕсли тикет меняет предыдущую функциональность, то лучше всего написать требования в формате \u0026ldquo;было → стало\u0026rdquo;. Нужно не забыть и о ссылках на связанные ресурсы. Так читающий получит возможность прочесть больше контекста измененной бизнес-фичи.\n\u0026hellip;общается эффективно Коммуникация - это важно. Тикеты могут вызывать вопросы, в том числе и глобальные. Но коммуникация, связанная с тикетами должна быть письменной. Почему? Потому что она будет сохранена не только в двух головах, которые завтра могут уйти с проекта, но и в общекомандной тикет-системе. Принятые решения нужно фиксировать письменно, чтобы любой участник проекта мог ознакомиться с ними в любой момент времени. В противном случае мы получаем требования изменений, которые нигде не зафиксированы, никем не прочтены и никем не могут быть утверждены, пусть и задним числом.\nЧитатель может мне возразить, что можно обсудить задачу голосом, а зафиксировать решение письменно. Да, верно. Однако есть одно НО. Ты отвлекаешь аналитика и мешаешь ему продумывать новые фичи. Мало кому из разработчиков нравится, когда его отвлекают. Многие программисты могут рассказать целые тирады о том, как они строят в своих головах сложные абстракции и как легко они рушатся и приходится начинать думать сначала. Окей, это мнение имеет право на жизнь. Но почему же эти же самые разработчики считают, что отвлекать аналитика или тестировщика можно и даже как будто бы поощряется. На мой взгляд, это неверный подход. Аналитик - тоже человек думающий, который выстраивает абстракции в голове и выкладывает их в тикет-систему вместо кода.\nИдеальный аналитик это тоже понимает и в рамках разумного сопротивляется устойчивому желанию разработчиков отвлечь его. В первый раз предупреждение, а во второй - эскалация. Нужно сразу выстраивать грамотную систему коммуникации и пресекать ее нарушения. Иначе говоря, идеальный аналитик не боится идти на рабочий здоровый конфликт с разработчиками во имя блага проекта, а толковый проектный менеджер его поддержит в этом.\n\u0026hellip;отдает все свои усилия проекту Выше я затронул очень важный момент - отдача проекту. Каждый ее участник должен вкладываться в проект максимально. Цель участия в проекте каждого - улучшение этого проекта, и никаких других целей не должно быть.\nМотивация у каждого может быть своя - деньги, знания, расширение компетенций. Но все эти варианты мотивации абсолютно не противоречат цели самого проекта. Я не понимаю людей, которые говорят \u0026ldquo;я на проекте только из-за денег\u0026rdquo;. Мысленно я продолжаю их мысль так: \u0026ldquo;... поэтому вкладываться я не буду, даже и не ждите\u0026rdquo;. А зачем еще человеку говорить подобное? Если ты хочешь денег больше, новых знаний или прокачаться в программной архитектуре, то ты сможешь это реализовать, отдавая проекту все свои усилия. Как тимлида, меня приводит в уныние работа, сделанная вполсилы.\nАналитик тоже может прокачаться в новой для себя бизнес-сфере проекта. Но идеальный аналитик - как раз тот, кто отдается проекту на все 100%.\n\u0026hellip;с чувством юмора (опционально) Это качество желательно, но не обязательно. Как бы ни было странно, но все мы - люди, и мы хотим общаться с приятными нам людьми. На мой взгляд, если у человека есть чувство юмора, то он адекватен в общении. Не обязательно общаться с аналитиком вне рамок работы и рабочего проекта, но если есть возможность перекинуться парой слов с ним в курилке, то это - приятно и благоприятствует дружелюбной атмосфере в команде.\nНе обязательно, чтобы человек всем нравился. Главное - чтобы он выполнял свои задачи эффективно. Однако мы ведь говорим об идеальном аналитике, поэтому я отметил это качество. Если уж не повезло настолько, что аналитик оказался токсичным человеком, то только верно выстроенная система коммуникации убережет остальных членов команды от его токсичности. Если уж не повезло с чувством юмора, то, благодаря правильной письменной коммуникации, атмосфера в команде не пострадает.\nА тяжело ли найти идеального аналитика Да, тяжело. Как и идеального разработчика, тестировщика или проектного менеджера. Хорошо, что уже имеющийся аналитик на проекте может прокачаться до уровня, близкого к идеальному. Поэтому не все так страшно и депрессивно, как может показаться. На поиск или взращивание идеального тиммейта может уйти вся жизнь, но я думаю, что оно того стоит.\n","permalink":"https://maximgorbatyuk.github.io/blog/management/2020-09-07-ideal-ba/","summary":"Недавно я послушал подкаст \u0026ldquo;Идеальный бизнес-аналитик глазами разработчика\u0026rdquo; своего очень хорошего друга. Не со всеми тезисами я был согласен, однако подкаст побудил меня начать обсуждение с участниками подкаста. А потом еще и сам побывал в этом подкасте в качестве гостя.\nЧтобы понять, кто такой \u0026ldquo;идеальный аналитик\u0026rdquo;, важно определиться с набором требований. Что я жду от аналитика как разработчик? А как тимлид? А как менеджер проекта? Сколько людей, столько и мнений, и я тоже хочу порассуждать о том, каков он - этот неуловимый идеальный аналитик.","title":"Идеальный Бизнес-Аналитик глазами разработчика"},{"content":"Недавно пересмотрел мультфильм \u0026ldquo;Кунг-фу Панда\u0026rdquo;, а точнее два из трех. Последний раз смотрел почти десять лет назад, поэтому многое уже забылось. Сейчас, когда я вступил в осознанный возраст в 26 лет ¯\\_(ツ)_/¯, философия мультфильма видится совершенно другой. Мультфильм о том, как обрести себя, как отпустить прошлое и как начать жить сегодняшним днем.\nВ первом мультфильме По, главный персонаж, воспользовался случаем и изменил свою жизнь. Случай - его посчитали избранным Воином Дракона. По и до этого чувствовал, что не принадлежит тому месту, где он был и чем занимался. А занимался он семейным бизнесом и помогал отцу в лапшичной. А снились ему сны о битвах, где По - непосредственный участник и предводителей других воинов кунг-фу. Мечтатель, одним словом. И мечтателю мешал страх \u0026ldquo;предать\u0026rdquo; мечты отца, который видел По продолжателем семейного дела.\nВ течение мультфильма зритель увидит, что По на самом деле обладает недюжиной силой и наудивление проворен для панды, когда хочет покушать. Мастер Шифу лишь раскрыл потенциал По. Так что По - действительно избранный. Легенды гласили, что чтобы стать полноправным Воином Дракона, он должен прочесть свиток, когда будет готов. Под конец мультфильма По открывает список, но там пусто. Как окажется впоследствии, свиток был зеркален и показывал, что глядящий в него и есть избранный, а секрета нет. Главное - поверить, что ты избран.\nПараллельно нам показывают историю становления протагониста - Тай Лунга. Тай Лунг когда-то был учеником Шифу, а тот возлагал на него надежды как на будущего избранного. И когда Угвэй - старейшина дома кунг-фу - говорит, что Тай Лунг не является избранным, Шифу это принимает. Но Тай Лунг - нет. Тай Лунг, как он сам рассказал, делал все, чтобы Шифу гордился им, что он положил свою жизнь на подготовку к тому, чтобы быть достойным титула. А Шифу в момент кульминации отвернулся от Тай Лунга.\nПо понял, что он будет избранным, если сам поверит в это. Более того, мне показалось, что избранности-то и нет, как таковой. По понял это, осознал себя и перестал стремиться быть избранным. Хотя в мультфильме показали, что навыки кунг-фу у него уже были, я думаю, что это для того было сделано, чтобы объяснить, как он так быстро овладел боевыми искусствами. Тай Лунг же всю жизнь жил ради цели других. Он обвинил в этом Шифу и разрушил родную деревню. Заглушил выплеском агрессии боль от неоправданных ожиданий, хотя лишь он сам возложил эти ожидания. Он сам решил жить ради цели Шифу, а не ради себя. И винить в этом Тай Лунг не может никого, кроме себя.\nВторой мультфильм - о том, как обрести внутрений покой и гармонию. Сценарий мультфильма гораздо слабее, однако философская мысли глубже. Мне это понравилось больше. Еще в первом фильме затронули тему течности бытия: жить нужно сегодня, потому что прошлое не изменить, а будущее никто не знает. Именно поэтому значение имеет лишь сегодняшний день.\nПротагонист фильма Шен уничтожил весь род панд из-за того, что по предсказанию именно панда должна была остановить его на пути захвата всего Китая. Когда По увидел символику формы войнов Шена, он начинает ловить флэшбеки, которые его обескураживают. По пытается прояснить историю и выяснить у Шена, где же его родители. Когда По узнает про геноцид, он проигрывает сражение. Восстановиться ему помогает провидица и она же ему рассказывает, что не имеет значение прошлое, его уже не вернуть и не изменить. Нужно принять его, сделать выводы и строить свою судьбу без фрустрации. Тогда По понимает, что у него был любящий отец все это время - гусь Пинг. И флэшбеки больше не беспокоят По, он обретает внутреннюю гармонию. Какая разница, как начался его путь Воина Дракона? Значение имеет, что он делает сейчас и как будет строить свою судьбу дальше. Обретя гармонию, По побеждает Шена.\nТут я вспоминаю несколько цитат дяди Айро из мультсериала \u0026ldquo;Аватар. Легенда об Аанге\u0026rdquo;. Во втором сезоне в последней серии Аанг делится с ним переживаниями, что он выбрал спасти Катару вместо обучения и становлению как аватар. Айро поддержал его: \u0026ldquo;Роль превосходства силы преувеличивают. Ты поступил очень мудро, что выбрал счастье и любовь\u0026rdquo;. Каждый видит свое в этой фразе. Айро, по моему мнению, считает тоже, что жить нужно сегодня. Нельзя отказываться от счастья в настоящем ради абстрактного блага в будущем, которое еще и не предопределено, к тому же. Вторая цитата Айро сказана в самом начале: \u0026ldquo;Я открою тебе секрет, юный маг воздуха, как ты менял форму облаков, так же можно менять линию своей судьбы!\u0026rdquo;.\nМне понравилось, что мультфильм транслирует такую восточную мудрость детям. Жаль, что я лишь сейчас смог это понять и увидеть. Дети вряд ли смогут самостоятельно понять эту философию, поэтому важно, чтобы родители разъяснили ее им.\nМногие на нашем пути будут пытаться возлагать на нас надежды и свои ожидания, даже близкие нам люди. Но никогда нельзя забывать о том, чего хочешь в этой жизни ты. Нельзя жертвовать своим счастьем сегодня ради туманного будущего завтра. Тем более, если это будущее нам пытается внушить кто-то другой. Каждый ответственен за свою жизнь и за все, что в ней происходит. Жить нужно сегодня, перестав переживать из-за свершившегося \u0026ldquo;вчера\u0026rdquo; и неопределенного \u0026ldquo;завтра\u0026rdquo;.\n","permalink":"https://maximgorbatyuk.github.io/blog/opinion/2020-08-01-thoughts-about-kung-fu-panda-movie/","summary":"Недавно пересмотрел мультфильм \u0026ldquo;Кунг-фу Панда\u0026rdquo;, а точнее два из трех. Последний раз смотрел почти десять лет назад, поэтому многое уже забылось. Сейчас, когда я вступил в осознанный возраст в 26 лет ¯\\_(ツ)_/¯, философия мультфильма видится совершенно другой. Мультфильм о том, как обрести себя, как отпустить прошлое и как начать жить сегодняшним днем.\nВ первом мультфильме По, главный персонаж, воспользовался случаем и изменил свою жизнь. Случай - его посчитали избранным Воином Дракона.","title":"Мысли о мультфильме \"Кунг-фу Панда\" и о становлении себя"},{"content":"Написать эту статью меня натолкнул один случай. В моей команде двое junior-девелоперов: парень и девушка, и девушке я делал код-ревью. Задача была простая: ранее она написал экстеншн-метод (extension method из .NET) для валидации свойств объекта, и я предложил перенести этот экстеншн в сам класс объекта в качестве публичного метода. Девушка перенесла метод, и в качестве аргументов передавала те же свойства, которые нужно было провалидировать. Это было странное решение, ведь свойства объекта доступны в самом методе, нет нужды передавать их извне. Я написал ей в Slack, зачем она так написала. Разработчица мне ответила, что теперь поняла суть задачи и пообещала переделать в ближайшее время.\nСуть проблемы не в том, что был написан неоптимальный код. Девелопер признался, что реализовал задачу и отправил ее на код-ревью, хотя не уловил суть задачи. Именно \u0026ldquo;не уловить суть задачи\u0026rdquo; и есть, как мне кажется, гораздо более важная проблема.\nЯ встречал такое раньше. Я и сам в начале своей карьеры бросался имплементировать задачи, даже когда не понимал их и для чего они предназначены. Когда приходилось переделывать имплементацию, я задумывался, почему же так получалось. После раздумий я пришел к выводу, что причина - непонимание задачи и того, что хотят видеть в итоге, а главное - какую проблему решают.\nЭтот вывод может показаться очевидным для опытных разработчиков, однако для меня тогдашнего это было чем-то вроде откровения с небес. Мир как будто перестал быть прежним в тот момент. Я начал относиться к задачам более скептически и всегда стал задавать себе вопрос: а зачем хотят видеть эту бизнес-задачу выполненной? Какую проблему она решает? Естественно, мне ответить мог только заказчик (product owner), и так начались сессии общения с ним. Так я начал изучать не только программную архитектуру и computer science, но и менеджмент и маркетинг.\nК задачам и требованиям разработчик должен относиться скептически.\nТеперь я каждый раз, когда я беру задачу, я анализирую ее и с точки зрения бизнес-проблемы, которую задача закрывает. Это помогает мне лучше ее реализовать и понять, стоит ли прорабаывать легко расширяемую архитектуру или задача - лишь одноразовая затычка проблемы.\nВторая причина - это искажения призм восприятия и вещания у людей: разработчиков, тестировщиков, аналитиков, проджект-менеджеров (Project manager) и продакт-менеджеров (Product manager). Когда мы работаем, мы часто забываем, что требования нам отдают не машины, а люди. А люди имеют свойство уставать вследствие перегруза. Максим Дорофеев, автор шикарнейшей книги про прокрастинацию и тайм-менеджмент, писал об этом.\nПостановщик задач может испытывать проблему, которую Максим называет \u0026ldquo;синдромом дырявого стека\u0026rdquo;: задачи поступают аналитику настолько быстро, что он бросается выполнять их тут же и не успевает закончить с прежними. И так по кругу. В итоге, ни одна из задач не проработана достаточно прозрачно для всех остальных участников проекта. А разрабам их имплементить. И если разраб не отнесется скептически к поступившей задаче и приступит к ней, не понимая сути, то продукт не получится хорошего качества. Поэтому и важно не начинать разработку, пока суть и смысл задачи не ясен.\nОчень редко эта проблема встречается вследствие злого умысла. Всегда есть факторы, которые могут исказить смысл описания тикета. Например, в голове у автора задачи картинка мира идеально прорисована, а вот словарного запаса или моральных сил не хватило на то, чтобы описать тикет полноценно. И автор считает, что тикет написан достаточно доходчиво, но другим он непонятен вообще. И это - проблема не всех остальных, а отдельно взятого неверно оформленного тикета. Я не призываю обвинять конкретных людей в этом, я призываю просто признать и принять проблему и решать ее коллективно.\nХорошо описать тикет - задача не только аналитиков, но разработчиков и всех остальных участников проекта.\nК этому призывают и некоторые принципы Agile-манифеста: второй и четвертый в частности. На планировании продакт-оунер (Product owner) \u0026ldquo;продает\u0026rdquo; задачи разработчикам, а они, в свою очередь, задают уточняющие вопросы и прорабатывают его коллективно. И только когда тикет понятен всем участникам проекта, его берут на оценку и закладывают в будущий спринт.\nЕсть еще одна причина непроработанных тикетов, которую не все признают. Чаще всего она встречатеся в продуктовых компаниях, хотя и аутсорс не лишен этого порока. Иногда заказчик или проектный менеджер просто хотят выслужиться перед своим руководством, и тогда начинается имитация бурной деятельности - незначительные требования и украшательства либо недооформленные тикеты. Иными словами, все процессы заказчик строит так, чтобы быть занятым либо на митингах с разрабами, \u0026ldquo;которые ничего не понимают и им нужно разъяснять все по несколько раз\u0026rdquo;, либо наоборот овер-описанные тикеты, где можно утерять суть тикета за тонной текста. К счастью, мне не доводилось напрямую работать с такими заказчиками, однако по рассказам друзей и по их тикетам я видел это.\nОдна из основных задач разраба в разработке - подвергать описание тикетов критике. Заказчик рассказывает о задаче разработчикам на своем языке бизнеса, а разработчики стремятся перевести его слова в язык технический и понять, как тикет повлияет на разрабатываемую систему. Этот рабочий доброжелательный конфликт всегда должен присутствовать в продуктивной рабочей среде.\nЕсли рабочего конфликта между разработчиками и заказчиком не будет, то о непроработке задач будут сигнализировать уже непосредственные конечные пользователи системы.\nМой совет всем разработчикам: помогать бизнесу разрабатывать продукт, в том числе и прорабатывая тикеты совместно. Не беритесь за тикеты, пока их не понимаете, но не нужно наотрез отказываться от тикетов. Помогая аналитикам прорабаывать задачи и требования, разработчик прокачивает и свои аналитические навыки.\n","permalink":"https://maximgorbatyuk.github.io/blog/opinion/2020-04-24-do-not-develop-what-you-dont-understand/","summary":"Написать эту статью меня натолкнул один случай. В моей команде двое junior-девелоперов: парень и девушка, и девушке я делал код-ревью. Задача была простая: ранее она написал экстеншн-метод (extension method из .NET) для валидации свойств объекта, и я предложил перенести этот экстеншн в сам класс объекта в качестве публичного метода. Девушка перенесла метод, и в качестве аргументов передавала те же свойства, которые нужно было провалидировать. Это было странное решение, ведь свойства объекта доступны в самом методе, нет нужды передавать их извне.","title":"Не берись делать то, чего не понимаешь"},{"content":"Предыстория Идея этой статьи родилась, пока я писал статью на другую тему: \u0026ldquo;Product development vs outsourcing\u0026rdquo;. За мою небольшую карьеру я успел поработать сначала в двух продуктовых компаниях, а затем в двух аутсорсовых. Переход с продуктовой разработки в аутсорс случился два года назад (2018) и показался мне кардинальным. С тех пор я держал в голове мысль написать об этом статью.\nСперва мне показалось, что в продуктовой компании работать лучше. Продуктовой в данном случая я называю банк, который разрабатывал свой веб-сайт, систему мобильного онлайн-банкинг и мобильные приложения. Я тогда думал, что в продуктовой компании работают, по большей части, люди заинтересованные в развитии продукта, тогда как в аутсорсе большинство разработчиков работали по принципу \u0026ldquo;сегодня один проект, завтра другой, так зачем сильно напрягаться сегодня?\u0026rdquo;. Не скажу, что я видел какой-то огонь в глазах разработчиков в банке, однако я видел яркое отношение людей к проектам в аутсорсе. Люди в аутсорсовой компании, которые участвовали далеко не в первом проекте, были \u0026ldquo;расслабленными\u0026rdquo; и не заботились об архитектуре программного кода. Сейчас я думаю, что именно таким я и видел в целом \u0026ldquo;температуру по больнице\u0026rdquo;.\nСпустя пару лет и сменив один аутсорс другим гораздо меньших масштабов я понял, что я был не совсем прав: слышал звон, да не знал где он. Я думаю, что\u0026hellip;\nотношение разработчика к проекту, где он задействован, базируется на том, видит ли он возможности чему-то научиться или нет.\nВ банке я видел многих разработчиков, которые с энтузиазмом приходили на работу и искренне обсуждали проблемы продукта, над которым работали. Курилки, посиделки в кафетериях на этажах, мероприятия вне стен банка - везде слышались разговоры о сайте, о проектах и проблемах интеграции. В аутсорсе разговоры в курилках были менее активные, а если и были, то только между разработчиками одного проекта. Иначе говоря, как будто продуктовые разговоры, но в меньших масштабах.\nЯ думаю, что разговоры о проекте в контексте, где таких разговоров быть вроде как не должно, появляются в двух случаях:\nРазработчик хочет решить проблему и научиться чему-то новому. Разработчику хочется пожаловаться и выговориться. В обоих случаях нет разницы, продуктовая это разработка или аутсорс. Конечно, все мы люди и иногда хочется, чтобы нас выслушали в определенных ситуациях, где нам даже совет и не нужен, поэтому рассмотрим более близко первую причину.\nЧему можно научиться на проекте На любом проекте каждый может найти что-то, чего он до этого не делал, и это может быть:\nтехнологии; фреймворки; алгоритмы; инструменты; роли на проекте; менторство над менее скилловыми тиммейтами. Мне кажется, что попробовать себя в новой роли на проекте - не менее интересно, чем освоить новые технологии. Например, я перешел в другую компанию пару месяцев назад для того, чтобы примерить на себе роль тимлида на проекте, который почти ничем не отличался стеком технологий от предыдущего. Другой разработчик может найти что-то новое для себя в решении бизнес-задач, которые раньше он не решал никогда. Один мой хороший друг и сильный програмист по совместительству ушел в компанию, которая захотела запустить проект по прогнозированию нагрузки на общественный транспорт на основе количества транзакций оплаты проезда в единицу времени в разные периоды суток. В этом проекте его заинтересовала именно реализация алгоритма прогнозирования.\nРаботать же с людьми, которые не видят в проекте ничего нового для себя, на мой взгляд, немного демотивирует, если не осознавать причин. Сперва может показаться, что \u0026ldquo;зачем мне пахать на проекте, хотя рядом сидит в развалку товарищ и не парится\u0026rdquo;. Товарищ действительно имеет полное право сидеть вразвалку и не париться, однако ты должен понимать, что на это есть причины, как и у тебя есть причины пахать на этом проекте. Ленивый товарищ просто сидит, пока капает зарплата на оплату платежей по ипотеке, а тебе же необходимо как можно больше нахватать опыта и навыков, которые однозначно пригодятся тебе в будущем.\nСоветы Тимлидам и менеджерам можно дать совет такой: всегда нужно искать тех, кто хочет научиться у вас чему-то новому. Такие разработчики, как минимум, честны с собой и с вами, а значит вы будете уверены в их ожиданиях и мотивации. А если у вас на проекте нечему научиться сильному кандидату, то лучше так и сказать и предложить больше зарплату - авось кандидат и \u0026ldquo;купит\u0026rdquo; у вас позицию на этих условиях. Однако это опасно, потому что если привлечь спеца только деньгами, то делать это бесконечно не получится - деньги далеко не бесконечный ресурс. Поэтому необходимо будет после найма искать иные возможности заинтересовать его.\nРазработчикам, которые понимают, что у них огонь в глазах на текуем проекте не горит, могу посоветовать только банальные вещи:\nрасширить круг своей ответственности; менторство над джунами; внедрение совершенно новой технологии на проекте; роль тимлида нового стрима в рамках текущего проекта или переход на другой проект на роль тимлида; pet-проекты. Если же ты понимаешь, что ничего из вышеперечисленного ты не хочешь, то можно вполне заняться личными pet-проектами, и, возможно, заряда огня в глазах хватит и на рабочие задачи. Всегда есть что-то, чему можно и нужно научиться, главное - не переставать искать, а иначе программирование перестанет быть хобии и станет \u0026ldquo;нелюбимой\u0026rdquo; работой.\n","permalink":"https://maximgorbatyuk.github.io/blog/opinion/2020-03-07-seeking-new-to-learn-is-important/","summary":"Предыстория Идея этой статьи родилась, пока я писал статью на другую тему: \u0026ldquo;Product development vs outsourcing\u0026rdquo;. За мою небольшую карьеру я успел поработать сначала в двух продуктовых компаниях, а затем в двух аутсорсовых. Переход с продуктовой разработки в аутсорс случился два года назад (2018) и показался мне кардинальным. С тех пор я держал в голове мысль написать об этом статью.\nСперва мне показалось, что в продуктовой компании работать лучше. Продуктовой в данном случая я называю банк, который разрабатывал свой веб-сайт, систему мобильного онлайн-банкинг и мобильные приложения.","title":"Желание научиться новому видно по горящим глазам разработчика"},{"content":"Написать эту статью меня побудил случай в Германии. Я решил провести пару недель в Европе, и чтобы комфортно пользоваться интернетом, решил купить симкарту и пакет в размером в 3гб. Казалось бы, одна из самых простых операций в СНГ, которая не заняла бы много времени. Но мы ведь в Германии, стране, где капитализм и социализм переплелись в крайне занятный тандем.\nЧто нужно туристу, чтобы начать пользоваться интернетом в другой стране?\nКупить симкарту. Купить интернет-пакет. Пользоваться в свое удовольствие. Однако я, будучи туристом в Германии, столкнулся с рядом проблем и совершением ненужных, с моей точки зрения, действий.\nИстория покупки симкарты У выбранного мной оператора были одни из самых выгодных условий по предложению интернет-пакетов и стоимости: 3гб интернета, безлимит по звонкам и стоимость в 15 евро, что относительно недорого. Если бы не эти факты, то я бы не стал проделывать весь этот квест, о котором ниже.\nСначала я очень удивился, когда я пришел в отделение и узнал, что у них нет самих симкарт. Довльно странная работа со складом, на мой взгляд. Тут вопрос не только удобства клиентам и особенно туристам. Из-за того, что в отделении не было запаса карт, клиенты уходят к их конкурентам. Так сделал бы и я, но условия пакетов привлекали. Мне посоветовали пойти в местный филиал \u0026ldquo;Техносулпака\u0026rdquo; и купить симкарту там, а приобрести пакет - у них. Покупка симкарты заняла минут 30 из-за того, что продавец долго заполнял данные паспорта. Возможно, продажа иностранцам чего-либо в Германии требует заполнения этой электронной макулатуры, но мне как клиенту это стоило времени.\nЧто ж, \u0026ldquo;симка\u0026rdquo; куплена, остался интернет-пакет. Возвращаюсь в отделение оператора, и там мне вместо пакета \u0026ldquo;продают\u0026rdquo; два листа формата А4: на одном из них был код, введя который я бы получил 15 евро на свой счет, на втором - номер телефона, по которому я должен был позвонить для активации интернет-пакета. Тут у меня возник резонный вопрос: а зачем тогда нужен был этот поход в отделение? Я помню времена, когда в магазинах продавали карточки на пополнение баланса телефона: вводишь комбинацию из цифр и звездочек и получаешь деньги на счету.\nВторой вопрос, который бепокоил меня еще больше - это необходимость звонить по какому-то номеру для активации пакета. Зачем? Почему? На каком языке мне там нужно будет общаться? Здесь мне уже помогли мои родственники, у которых я и остановился. Как мне сказали, на телефоне был робот, который просил нажимать нужные цифры для подтверждения покупки пакета. Таким образом, спустя два часа и кучи потраченных нервов из-за непонимания необходимости тех или иных действий.\nЗачем нужно столько людей? В Казахстане, где я живу, подобная задача требует лишь одного похода в отделение и буквально 15 минут времени. Не знаю, как проходит регистрация симкарт для неграждан РК, но почему-то кажется, что никаких дополнительных сложностей со стороны клиента, кроме ожидания, это не требует. Процесс автоматизирован лучше, чем в Германии. Я сначала искренне не понимал, почему здесь с такой простой задачей возникли такие проблемы, а потом пришла одна идея. Мне кажется, что Германия таким образом обеспечивает рабочие места людям. Об этом еще писал Юваль Ной Харари в книге \u0026ldquo;21 урок для XXI века\u0026rdquo;. Новаль пишет, что государство, вполне вероятно, сдерживает прогресс для того, чтобы низкоквалифицированное население успело адаптироваться к новым реалиям автоматизации и переучиться на другие профессии.\nМне кажется, что Германия, как страна со смешанной экономикой с большим уклоном в социалистический строй, и обеспечивает рабочие места иммигрантам за счет сдерживания автоматизации и прогресса. В рассказанной мной истории участвуют двое людей: продавец симкарты и консультант в отделении, хотя всю услугу мог предоставить только один человек вместо двух. Сохранение рабочими местами людей - это обеспечение стабильности в обществе. Думаю, что это требуется еще больше в том государстве, которое вынуждено содержать иммигрантов и сохранять \u0026ldquo;спокойствие\u0026rdquo; своим гражданам в этих условиях.\nСтабильность vs прогресс С одной стороны, полдня ожидания симкарты вместо двадцати минут - небольшая плата за относительную стабильность в обществе, где каждый ее работающий гражданин обязан отдавать почти половину заработной платы в пользу государства. С другой стороны, такой подход к экономике - отход от капитализма. Можно долго ругать капитализм как строй, однако человечество ничего лучшего пока не придумало, на мой взгляд. Как бы ни было жестоко, но я считаю, что люди должны учиться быть конкурентно способными уже сейчас, и если твою профессию сокращают в связи с оптимизацией и автоматизацией. Не стоит оттягивать этот момент как можно дольше, потому что прогресс не просто \u0026ldquo;наступает\u0026rdquo;, а уже наступил.\n","permalink":"https://maximgorbatyuk.github.io/blog/opinion/2020-02-27-social-employment-about/","summary":"Написать эту статью меня побудил случай в Германии. Я решил провести пару недель в Европе, и чтобы комфортно пользоваться интернетом, решил купить симкарту и пакет в размером в 3гб. Казалось бы, одна из самых простых операций в СНГ, которая не заняла бы много времени. Но мы ведь в Германии, стране, где капитализм и социализм переплелись в крайне занятный тандем.\nЧто нужно туристу, чтобы начать пользоваться интернетом в другой стране?\nКупить симкарту.","title":"О социальном трудоустройстве"},{"content":"Эту же статью я опубликовал на habr.com.\nЗачем это необходимо Когда в твоей команде работают больше одного человека, так или иначе все сталкиваются с проблемой разных стилей кодирования каждого члена команды. Кто-то пишет скобки для блоков if...else, кто-то нет. Когда проект становится больше, то такой код труднее читать и еще сложнее проводить код-ревью.\nЧтобы код-ревью и прочие командные митинги не превратились в обсуждение tab vs spaces на повышенных тонах, лучше настроить репозиторий таким образом, чтобы сам проект не допускал написание невалидного и нестандартного для команды кода.\nС одной стороны, использование разных стилей кодирования может показаться вкусовщиной, недостойной внимания. Ну не оборачивает джун единственную строку кода после условия if, а кто-то пишет, что с того? Если оставить код из под пера джуна \u0026ldquo;как есть\u0026rdquo;, то это может стать \u0026ldquo;бомбой замедленного действия\u0026rdquo;: ту строку кода после if могут удалить, и тогда под условие попадет следующая строка. Конечно, эта ситуация обычно отлавливается на код-ревью, однако бывает так, что этот потенциальный баг проходит проверку, и вот две основных причины:\nМы все люди, а люди ошибаются. Люди социальны, а значит вступать \u0026ldquo;в очередной раз\u0026rdquo; в конфликт, связанный со стилями, не захочется. И тут возможны два варианта: \u0026ldquo;Лучше поправлю сам\u0026rdquo;, думает проверяющий, и правит код. Проверяющий срывается на джуна и высказывает свои сомнения в его адекватности и необходимости существования. Как можно добиться того, чтобы каждый писал в соответствии с командным стилем? Бить по рукам на код-ревью каждый раз демотивирует и автора кода, и самого проверяющего. К счастью, эта проблема будоражит умы не одного программиста не первый год, и в нашем распоряжении сейчас есть множество инструментов.\nЦель этой статьи - рассказать другим и себе будущему, как я настраиваю репозиторий проекта таким образом, чтобы он сам обезопасил себя от невалидного кода с точки зрения стандартов команды.\nЧто мы имеем В качестве примера возьмем демонстрационный проект, код которого будет выложен на GitHub. Так как я занимаюсь разработкой на .NET Core, то и проект будет написан на нем. Что я буду использовать:\n.NET Core 3.1 Angular 8+ Github аккаунт Travis CI Я уже создал демонстрационный репозиторий проекта и настроил в нем Travis-CI. Далее в статье разберем, что необходимо было сделать для этого и почему.\nПайплайн репозитория Пайплайн репозитория - механизм, предотвращающий попадаение невалидного кода с второстепенных веток в основную master branch. \u0026ldquo;Из коробки\u0026rdquo; пайплайны доступны в Gitlab и Azure DevOps, а в Github - через Travis CI.\nНастраиваем репозиторий Мне нравится подход к разработке софта Егора Бугаенко. Я законспектировал несколько его докладов на этом блоге. Если кратко, то вот основные принципы, которым я буду следовать при настройке репозитория:\nОграничение прав на пуш. Я ограничиваю права на пуш в develop и master всем, кроме мейнтейнеров (maintainer). Пайплайн сборки. Я прописываю пайплайн для сборки проекта в CICD и прогона юниттестов как для бэкенда, так и фронта. Repository is a king. В репозитории я прописываю правила работы с кодом и gitflow, а также другие связанные с подходами в разработке документы. Fail fast. Если код написан невалидно с точки зрения стандартного стиля, то разработчик получит ошибку компиляции. Git pre-commits hoocks. Чтобы не занимать агенты CI гитлаба лишком часто, я добавляю прогон тестов и иные полезные операции на пре-коммит хуки гита. Что мы получаем в итоге? Во-первых, в master и develop смогут залить код только мейнтейнеры проекта. В идеале, конечно, и им нужно ограничить доступ, чтобы только \u0026ldquo;автомат\u0026rdquo; мог сливать ветки. Я оставил реализацию этого принципа \u0026ldquo;на потом\u0026rdquo;. Ограничение прав настраивается через интерфейс гитлаба, поэтому я не буду описывать этот этап здесь.\nВалидация бэкенда Я настраиваю solution-файл (*.sln) проекта так, чтобы он выдавал несоответствия написанного кода стандартам стайл-гайда .NET как ошибки компиляции. Чтобы сделать это, мне понадобится файл с перечислением кодов ошибок, пара nuget-пакетов и немного терпения.\nЯ использую stylecop в проектах для .NET Core. Чтобы его верно настроить, прежде всего мы создаем несколько файлов в корне проекта рядом с solution-файлом (ссылки ведут на gist.github.com):\nDirectory.build.props - ссылка на файл. standard.ruleset - ссылка на файл. stylecop.json - ссылка на файл. После этих действий наш проект не будет собираться, пока в нем будут ошибки стиля кодирования.\nВалидация фронтенда Фронтенд-приложение тоже необходимо валидировать. Здесь настройки пайплайна менее критичны к нарушениям стиля кода: если мы пропустим где-то точку с запятой, то проект все равно будет работать. На страже репозитория здесь будет стоять агент пайплайна. Я автоматизирую следующие команды:\n# Проверка линта ng lint # Сборка в режиме продакшна, чтобы провалидировать и html-файлы ng build --prod # Прогон тестов ng test Есть небольшой нюанс работы агентов репозитория с тестами. Дело в том, что для прогона тестов необходим движок Хрома (Chrome / Chromium), а он чаще всего отсутствует в контейнерах CI-систем. Чтобы агент мог запускать тесты фронта, я добавляю npm-пакет puppeteer в проект, который подтянет с собой и хромиум.\nТаким образом, чтобы и корректность фронтенда валидировалась пайплайном, нам необходимо проделать следующие шаги:\nДобавить новую команду \u0026quot;test-headless-ci-only\u0026quot;: \u0026quot;ng test --browsers ChromiumNoSandbox\u0026quot; в блок scripts файла packages.json: \u0026#34;scripts\u0026#34;: { \u0026#34;ng\u0026#34;: \u0026#34;ng\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;ng serve -o\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;ng build\u0026#34;, \u0026#34;build-stage\u0026#34;: \u0026#34;ng build --configuration=staging\u0026#34;, \u0026#34;build-prod\u0026#34;: \u0026#34;ng build --prod\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;ng test\u0026#34;, \u0026#34;test-headless-ci-only\u0026#34;: \u0026#34;ng test --browsers ChromiumNoSandbox\u0026#34;, \u0026#34;lint\u0026#34;: \u0026#34;ng lint\u0026#34;, \u0026#34;e2e\u0026#34;: \u0026#34;ng e2e\u0026#34; }, Установить пакет npm install puppeteer и прописать его в файле karma.conf.js в самое начало файла: const process = require(\u0026#34;process\u0026#34;); process.env.CHROME_BIN = require(\u0026#34;puppeteer\u0026#34;).executablePath(); module.exports = function(config) { ... }; Добавить кастомный лаунчер тестов в файле karma.conf.js в секцию customLaunchers: config.set({ ...., customLaunchers: { ChromiumNoSandbox: { base: \u0026#34;ChromeHeadless\u0026#34;, flags: [ \u0026#34;--no-sandbox\u0026#34;, \u0026#34;--headless\u0026#34;, \u0026#34;--disable-gpu\u0026#34;, \u0026#34;--disable-translate\u0026#34;, \u0026#34;--disable-extensions\u0026#34; ] } }, singleRun: true }); Теперь в скриптах пайплайна можно запускать тесты командой npm run est-headless-ci-only.\nСтандартизируем код фронтенда Чтобы код-ревью тикетов для фронтенда не превратились в обсуждение предпочтений форматирования, лучше всего стандартизировать его. Я пользуюсь инструментом prettierrc, потому что репозиторий проекта имеет много звезд и документация написана подробно. Эта библиотека помогает подкорректировать форматирование автоматически. Чтобы добавить prettierrc в проект, необходимо:\nУстановить пакеты prettier и pretty-quick глобально: npm install -g prettier npm install -g pretty-quick Добавить файл конфигурации с именем .prettierrc в корень фронтенд-приложения: { \u0026#34;useTabs\u0026#34;: false, \u0026#34;printWidth\u0026#34;: 120, \u0026#34;tabWidth\u0026#34;: 2, \u0026#34;singleQuote\u0026#34;: true, \u0026#34;trailingComma\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;semi\u0026#34;: true } Добавить список файлов для игнорирования prettier-ом в файл с именем .prettierignore в корень фронтенд-приложения: package.json package-lock.json tslint.json tsconfig.json browserslist .gitkeep favicon.ico tsconfig.lib.json tsconfig.app.json tsconfig.spec.json karma.conf.js protractor.conf.js ng-package.json *.html Теперь можно \u0026ldquo;привести в порядок\u0026rdquo; код фронтенда командой pretty-quick --staged.\nИспользование прекоммит-хуков Запуск агента пайплайна в CI/CD системах - это потребление ресурсов, и зачастую небесплатных. Можно и нужно запускать валидацию проекта локально, но делать это на каждый коммит надоедает. В итоге люди перестают запускать скрипты так часто. Чтобы автоматизировать этот процесс, я пользуюсь прекоммит-хуками, которые позволяют запускать полезные скрипты при коммитах и пушах.\nДля фронтенда лучше всего подойдет библиотека husky. Чтобы настроить хук, необходимо:\nУстановить библиотеку husky npm install -g husky Добавить хук husk в файл package.json в конец: \u0026#34;devDependencies\u0026#34;: { ... }, \u0026#34;husky\u0026#34;: { \u0026#34;hooks\u0026#34;: { \u0026#34;pre-commit\u0026#34;: \u0026#34;pretty-quick --staged\u0026#34;, \u0026#34;pre-push\u0026#34;: \u0026#34;ng lint \u0026amp;\u0026amp; ng test --browsers ChromiumNoSandbox\u0026#34; } } Здесь я разделил команды: нет необходимости проверять тесты фронтенда на каждый коммит, но мы не дадим залить изменения в удаленный репозиторий, пока тесты не будут \u0026ldquo;зелеными\u0026rdquo;.\nИтог После того, как сделаны описанные в статье шаги, я получаю проект, который \u0026ldquo;защищает сам себя\u0026rdquo; от невалидного кода. Понятное дело, что одной проверкой синтаксиса и стайл-гайда не уберечь продукт от багов, однако даже эти незначительные вещи помогают в достижении большего качества кода и позволяют обсуждать архитектурные решения на код-ревью, а не вопросы форматирования.\n","permalink":"https://maximgorbatyuk.github.io/blog/development/2020-02-16-how-to-reject-invalid-code/","summary":"Эту же статью я опубликовал на habr.com.\nЗачем это необходимо Когда в твоей команде работают больше одного человека, так или иначе все сталкиваются с проблемой разных стилей кодирования каждого члена команды. Кто-то пишет скобки для блоков if...else, кто-то нет. Когда проект становится больше, то такой код труднее читать и еще сложнее проводить код-ревью.\nЧтобы код-ревью и прочие командные митинги не превратились в обсуждение tab vs spaces на повышенных тонах, лучше настроить репозиторий таким образом, чтобы сам проект не допускал написание невалидного и нестандартного для команды кода.","title":"Как не пропустить невалидный код в репозиторий"},{"content":" Я ходил на фильм \u0026ldquo;Паразиты\u0026rdquo; летом прошлого года, когда он только вышел в прокат в Казахстане. Помню, что он показался мне немного запутанным, но сюжет, игра актеров и повествование завораживалb. Мне хотелось смотреть его еще и еще и, наконец, узнать, чем же он закончится. Я - небольшой критик кино, я не могу сходу назвать и увидеть сценарные и операторские приемы, которые делают хорошие фильмы хорошими, а их отсутствие - плохие фильмы плохими. После выхода из зала я могу лишь сказать, понравился мне фильм или нет. К моменту написания этой статьи стало известно, что фильм получил два оскара в номинациях \u0026ldquo;за лучший фильм\u0026rdquo; и \u0026ldquo;за лучший иностранный фильм\u0026rdquo;. Хорошее достижение, говорят, что это - впервые за 92 года истории премии Оскар.\nКогда я вышел из кинозала после просмотра \u0026ldquo;Паразитов\u0026rdquo;, я был немного шокирован концовкой. Пока не произошло убийство главы богатого семейства Пак, мне фильм определенно нравился, он действительно завораживал. Подобное я чувствую при просмотре фильмов Тарантино, которые мне очень нравятся. Однако концовка \u0026ldquo;Паразитов\u0026rdquo; шокировала меня, и мне фильм даже разонравился в тот момент.\nМне просто ужасно не понравилась кульминация сюжета действиями и поведением отца семейства бедняков Ким. Да, отец семьи Пак высказывался презрительно про запах от водителя - главы семьи Ким, и это его определенно не красило. С другой стороны, это его мнение, которое он как раз-таки и не высказывал на публике, он обсуждал его только со своей женой. На публике в присутствии семьи Ким он не позволял себе подобных презрительных высказываний. Мы не знаем, считает ли чета Пак водителя - отца семьи Ким - за человека второго сорта, потому что кроме претензий к запаху они никоим образом не показали, что считают свою прислугу за людей \u0026ldquo;хуже себя\u0026rdquo;. Более того, претензия была только к одному из четы Ким, и даже к нему они проявляли должное уважение.\nСтало ли это отношение богатого к бедному причиной для убийства? Сомневаюсь. Думаю, что причина убийства главы семьи Пак была в другом.\nГлава бедной семьи Ким начал слышать комментарии в адрес запаха. Что мог сделать отец Ким в этом случае? Я вижу два варианта:\nПризнать, что семья Ким живет в неблагополучных условиях и как минимум исправить одно из проявлений этого - помыться и постирать свою одежду. Продолжать терпеть комментарии и затаить обиду на семью Пак. Очевидно, что второй вариант не требует особых усилий и слома мировоззрения, и поэтому глава Ким выбирает именно его. Даже если он не хочет поработать над собой, он мог бы просто уйти с этой работы, дав возможность заработать остальным членам его семьи. Более того, отец Ким - здоровый мужчина вполне работоспособного возраста. Интересно, почему он безработный? Скорее всего, у него в крови лениться и паразитировать на результатах труда других вместо того, чтобы работать и зарабатывать честно самому. Впрочем, вся семья пытается так или иначе прожить за счет других: даже показанная в начале фильма история про ловлю соседского WiFi в начале фильма подтверждает это.\nОтец Ким видит, что к нему презрительное отношение у богачей, и он продолжает присасываться к ним как паразит. По мне так это - отсутствие гордости и самоуважения. При этом это его решение гложет, и в итоге он просто не выдерживает накала внутри себя и убивает отца Пак. Этим он перечеркнул судьбы обеих семей: дети Пак остались без отца и счастливого детства (хотя в этом они уж точно не виноваты), а его родная семья - с грузом ответственности и проблемами с законом. А мог просто уйти и перестать паразитировать на богатстве других. Довольно эгоистичный поступок, как по мне.\nМне кажется, что фильм как раз показывает одну из главных причин классового неравенства - отсутствие у некоторых бедных желания работать и зарабатывать честно. Мы не знаем, каким образом семья Пак стала богатой, потому что фильм как раз и не об этом. Эти бедняки в фильме паразитируют на труде и успехе других, чем точно не вызывают симпатии. Семья Ким не хочет и не умеет работать честно, они воруют персики с прилавка, подделывают документы и подставляют других.\nФильм, по моему мнению, показывает, как не нужно себя вести, если ты беден. Сейчас, спустя полгода после просмотра и обдумывания этой статьи, я пришел к выводу, что все же фильм заслуженно получает награды, он хорошо снят, сюжет интересный. Судя по разбору операторской работы от Кинопоиска, в фильме были применены необычные приемы в работе с камерой.\nСейчас я понимаю, что он мне нравится именно потому, что обличает причины бедности некоторых и показывает, к чему может привести желание паразиторовать на труде и успехе других.\n","permalink":"https://maximgorbatyuk.github.io/blog/opinion/2020-02-13-about-gisaengchung-movie/","summary":"Я ходил на фильм \u0026ldquo;Паразиты\u0026rdquo; летом прошлого года, когда он только вышел в прокат в Казахстане. Помню, что он показался мне немного запутанным, но сюжет, игра актеров и повествование завораживалb. Мне хотелось смотреть его еще и еще и, наконец, узнать, чем же он закончится. Я - небольшой критик кино, я не могу сходу назвать и увидеть сценарные и операторские приемы, которые делают хорошие фильмы хорошими, а их отсутствие - плохие фильмы плохими.","title":"Мое мнение о фильме \"Паразиты\""},{"content":"Каждый раз, когда говорят, что \u0026ldquo;в советском союзе было самое лучшее образование в мире\u0026rdquo;, я в это несильно верю.\nРазница подходов образования Я не могу судить о западном школьном образовании, потому что я сам не учился в американской школе, однако могу сделать некоторые предположения на основе общеизвестной \u0026ldquo;болонской\u0026rdquo; системе образования в университетах и образовательных документальных видео американского производства.\nЗападное образование строится на желании самого обучающегося. Американскому школьнику не дают знания в том объеме, в котором их дают советсткому. Неужели американские учителя глупее советских? А если так, то почему США в 2019ом году еще существует, а СССР распался еще в начале девяностых?\nМне кажется, что американская система образования побуждает школьников самостоятельно постигать интересующие их области знаний и, соответственно, не грузит неинтересующими их. При этом американская система не только \u0026ldquo;зачитывает\u0026rdquo; о законах физики, химии и исторических фактах, но и рассказывает их предысторию. Рассказ о том, каким образом ученый в прошлом сделал свое открытие, не менее интересен, чем само открытие. Приведу в пример открытие инфракрасного излучения Уильямом Гершелем в 1800 году. Он хотел понять, какой спектр света из расщепленного пучка излучает больше энергии. В темной комнате он расположил 7 термометров так, что каждый из них лежал под своим цветом расщепленной радуги. Также он положил восьмой термометр в темную часть комнаты рядом, чтобы получить контрольный показатель. Спустя время он вернулся в комнату и обнаружил, что термометр в темной части комнаты, лежащий рядом с красной частью пучка света, показал наибольшую температуру.\nТакие рассказы об открытиях показывают школьникам, что возможности \u0026ldquo;подстерегают\u0026rdquo; на каждом шагу. Главное - найти их и воспользоваться. Так складывается предпринимательский ум, я полагаю. При этом американское образование дает больше свободного времени школьникам как раз на самостоятельное обучение. Конечно, это свободное время школьник может потратить и на хулиганство, но тогда он вряд ли достигнет высот в карьере.\nВ советском союзе же детям преподавали факты из науки в отрыве от истории их открытия. Видимо, утверждающие школьную программу считали, что людям не нужно знать это, ведь после школы подросток пойдет в университет или ПТУ, а дальше станет \u0026ldquo;винтиком\u0026rdquo; на заводе. А на заводах и в колхозах, к слову, тоже уже поставлен такой план, что выполнять \u0026ldquo;пятилетки в три года\u0026rdquo; можно хоть каждый раз и получать за это бонусы от партии. Иначе говоря, за школьника уже всё решили, и заботиться ему почти не о чем.\nРебенок, получивший настолько большой объем информации в течение дня в школе уже не хочет изучать что-то еще дома. То есть знания-то получены в большом объеме, но как их применить в жизни школьник не знает и что самое плохое - знать не стремится в силу информационного перегруза. Тут мне вспоминается картинка из интернета, где два бомжа обсуждают и расписывают мелом какую-то теорему из математики, а третий удивленно на них смотрит.\nОтсутствие релевантных исследований Как можно вообще провести исследование, чтобы выяснить \u0026ldquo;лучшую\u0026rdquo; систему образования в мире? Чтобы подтвердить некую теорию, исследователи проводят опыт на двух репрезентативных выборках, одна из которых - контрольная, к которой никакие эксперименты не применяются. Так исследователи могут понять, а есть ли влияние исследуемого предмета на выборку.\nДопустим, мы хотим сравнить образование в СССР с какой-нибудь системой из западного мира. Для примера возьмем США. В случае изучения образований нам бы понадобилось 4 группы репрезентативных людей: две группы обучались бы сначала в рамках одной системы, затем они же должны быть \u0026ldquo;подвержены\u0026rdquo; другой системе образования. Другие две группы являются контрольными и лишь обучаются по одной системе.\nЯ вижу здесь несколько проблем, которые и делают это исследование почти невыполнимым.\nПроблема #1. Как подвергнуть людей повторному образованию \u0026quot; с чистого листа\u0026quot;? Невозможно обучить группу людей сначала по одной системе, а затем по другой, ведь они будут уже обучены некоторым знаниям, и контрольные тесты гипотетически будут лучше, чем в первый раз при другой системе. Значит мы должны каким-то образом стереть память, чтобы они \u0026ldquo;вошли\u0026rdquo; в новую системы с чистым умом. Пока что нет стабильного способа стереть память человеку, и вряд ли он появится в обозримом будущем.\nПроблема #2. Как учесть влияние возрастных изменений подростков? Для чистоты эксперимента мы должны будем откатить возраст участников на начало школьной жизни, чтобы учесть и гормональные эффекты взросления на качество получения знаний. Средство омоложения - мечта человечества, но пока что успехов в этой области немного, поэтому мы вынуждены ждать его выпуска для проведения нашего эксперимента.\nПроблема #3. Семья и генетика Чтобы определить именно влияние образование на результирующий интеллект человека, мы должны исключить влияние семьи на испытуемого. Мало кто из людей в здравом уме согласится отдать свое чадо в изолированное сообщество ради эксперимента, актуальность которого невелика, по-моему.\nГенетика и заложенные природой интеллектуальные способности тоже необходимо учитывать, однако этот момент мы уже решили самим фактом репрезентативной выборки - мы отобрали людей из разных слоев населения. Тем не менее, мы должны взять для эксперимента людей с очень близкими показателями исходного эксперимента, чтобы выяснить именно качество образования разных стран, а не способность это образование получать.\nПроблема #4. Бытие определяет сознание Школьник живет в социуме, и из этого следует, что он получает знания не только в школе, но и из телевизора и книг, к которым имеет беспрепятственный доступ. Интернет мы не рассматриваем, потому что во время существования советсткого союза интернет в понимании 2019 года не существовал. Получается, что чтобы исключить это влияние, мы должны ограничить испытуемых от него.\nС другой стороны, влияющее общество на испытуемого так же было подвержено образованию, которое мы исследуем. Получается, что оно так же является одним из исследуемых факторов образования. Однако перед исследователями стоит задача отфильтровать те нешкольные ресурсы, которые были сами произведены без влияния других школ.\nА зачем нужен сейчас такой эксперимент? С одной стороны, результаты нашего эксперимента нужны для окончательного решения диллемы, которая волнует умы людей не одно поколение. Однако учитывая сложности проведения этого эксперимента, успокоение споров отдельно взятых слоев населения, на мой взгляд, не стоит того. Невозможно организовать сейчас из-за отсутствия технологий омоложения и стирания памяти, слишком дорого и неэтично по отношению к испытуемым.\nВ заключение Мне кажется, что довод \u0026ldquo;зато образование в СССР было лучшим\u0026rdquo; звучит тогда, когда и так небольшой список преимуществ коммунистического строя и СССР относительно капитализма и капиталистических стран подходит к концу. Это своего рода попытка хоть что-то найти хорошее. На деле же аргумент об образовании не подкреплен почти ничем.\nБолее того, не стоит забывать, что банки перед телевизором, чтобы их зарядил Кашпировский, ставили именно те люди, которые получали \u0026ldquo;лучшее в мире\u0026rdquo; советское образование.\nСсылки по теме: Причина развала СССР. Мнение инженера Remarks of senator John F. Kennedy About Soviet Union education system on Quora Here’s why education in the USSR was among the best in the world ","permalink":"https://maximgorbatyuk.github.io/blog/different/2019-09-29-was-ussr-education-really-good/","summary":"Каждый раз, когда говорят, что \u0026ldquo;в советском союзе было самое лучшее образование в мире\u0026rdquo;, я в это несильно верю.\nРазница подходов образования Я не могу судить о западном школьном образовании, потому что я сам не учился в американской школе, однако могу сделать некоторые предположения на основе общеизвестной \u0026ldquo;болонской\u0026rdquo; системе образования в университетах и образовательных документальных видео американского производства.\nЗападное образование строится на желании самого обучающегося. Американскому школьнику не дают знания в том объеме, в котором их дают советсткому.","title":"Действительно ли образование в СССР было \"лучшим в мире\"?"},{"content":"В комментариях к одному видео некто задал интересный вопрос:\nА должны ли программисты изучать бизнес-сферу проекта, где работают?\nАвтор видео не успел ответить, а я же посчитал, что меня забыли спросить и что я должен ответить на этот вопрос.\nПочему не сотоит слепо доверять прописанным требованиям Некоторые разработчики могут подумать, что они приходят в компанию писать код и разрабатывать архитектуру, а не вдаваться в подробности бизнеса компании. Что, мол, бизнес-аналитики должны прорабатывать все нюансы проекта и сценарии взаимодействия (Use Case - UML). И это значит, по мнению этих разработчиков, что можно не о чем не волноваться, читать требования и воплощать их в жизнь так, как прописаны аналитиком. С одной стороны, такое мнение имеет право на жизнь, однако есть пара проблем:\nбизнес-аналитик может быть недостаточно квалифицированным; бизнес-аналитик может быть уставшим; бизнес-аналитик может не знать технических нюансов и возможностей; у бизнес-аналитика может быть \u0026ldquo;замыт глаз\u0026rdquo; подставь свой вариант, который опишет еще одну вероятность ошибиться на этапе проработки требований. Как это может повлиять на программиста? А вроде бы и никак, ведь его задача была реализовать функционал по требованиям, и если требования ошибочны, то и вина лежит на бизнес-аналитике, а не на разработчике. Мне кажется, что такое мышление деструктивно и не приводит к успеху. И вот почему.\nЭффективная работа с требованиями задачи На то, чтобы разработчик вникал в бизнес-сферу, есть две причины.\nВо-первых, разработчик должен вникать в бизнес-требования не только потому, что ему претворять их в жизнь, но и для того, чтобы оценить их критическим взглядом \u0026ldquo;со стороны\u0026rdquo;. Если разработчик задаст вопросы \u0026ldquo;а почему так, а не иначе\u0026rdquo;, то бизнес-аналитик расскажет больше контекста и, возможно, поделится будущими плананми на запрашиваемый сейчас функционал. Так разработчик, во-первых, будет в курсе развития проекта, а во-вторых, сможет учесть эти планы в проработке архитектуры сейчас. Как бонус, бизнес-аналитик может иначе взглянуть на запрашиваемый функционал и, вероятно, упомянуть важные аспекты, которые он забыл внести в основную задачу.\nВо-вторых, чем лучше разработчик погружен в бизнес-контекст, тем больше улучшений он может предложить заказчику и аналитикам и тем менее он будет зависим от решения вопросов, которые совсем незначительны и не влияют на изначальные требования. Например, во время реализации задачи разработчик наталкивается на дилемму, описания которой нет в задаче. И тут у него есть три сценария:\nЗадать вопрос аналитику и/или продакту (Product Owner) и ждать четких инструкций. Продумать и предложить на выбор несколько сценариев решения дилеммы, которые по мнению разработчика будут наиболее эффективны, и ждать решения. Сделать то же самое, что и в пункте 2, а затем начать реализовывать тот вариант, который, по мнению разработчика, лучше всего подойдет продукту и ляжет красиво на текущую программную архитектуру. В первом случае разработчик ведет себя лишь как исполнитель четкой инструкции. И тут нет ничего плохого, однако большую ценность и незаменимость в таком разработчике заказчик врядли увидит. Такому разработчику легко найти замену, и даже вероятно, что замена будет стоить дешевле. А когда разработчик захочет повышения, то вероятность, что заказчик пойдет навстречу ему, крайне мала.\nВо втором случае ценность разработчика немного выше. Заказчик уже не должен вникать в контекст, а может отталкиваться от предложенных вариантов и описания их последствий. Таким образом, решение дилеммы будет придумано быстрее с большой долей вероятности. Чем чаще такие случаи будут происходить, тем легче будет разработчику учесть опыт прошлых предожений и делать предложения ценнее для бизнеса и точнее. В свою очередь разработчик делает себя более ценным для заказчика, и на удержание его на проекте пойдут охотнее. Иначе говоря, просить повышения будет легче.\nТретий случай немного отличается от второго тем, что разработчик идет на риск, что подход, который он сам выбрал для реализации, не будет выбран заказчиком. Однако я не вижу в этом большой проблемы, ведь, во-первых, полученный опыт можно учесть в реализации утвержденного сценария, а во вторых, вопрос врядли был глобальным, что разные варианты его решения приводили к кардинально разным архитектурным решениям.\nЧитатель может подумать, разработчик потратил некоторое оплаченное заказчиком время впустую, однако это не так, и вот почему:\nразработчик не виноват, что после этапа аналитики остались вопросы, требующие согласования владельцем продукта; разработчик погрузился больше в проблему бизнеса, чтобы предожить варианты решения, и это точно не может характеризоваться как трата времени разработчик вырос как самостоятельный и инициативный специалист в глазах заказчика. В результате этой ситуации разработчик заработал себе очки в карму, и когда он захочет повышения на текущем проекте, бизнес вряд ли откажется от дальнейшего сотрудничества с таким специалистом и примет участия в переговорах о новой зарплате.\nЕще одна причина, почему разработчику нужно интересоваться бизнесом Если бы от разработчиков и не ждали погружения в контекст, а только лишь исполнение четких инструкций от бизнес-аналитиков, то такого разработчика почти ничто не отличает от обычного компьютера. Иначе говоря, разработчик становится механическим переводчиком бизнес-требований, написанных на английском человеческом языке, на язык программный. Правда, еще этот разработчик стоит гораздо дороже компьютера, иногда жалуется на \u0026ldquo;плохие\u0026rdquo; условия и периодически требует повышения. А еще может проявлять свой непростой характер. И зачем такой разработчик нужен бизнесу, если можно разработать и использовать специальный инструмент, который бы делал то же самое?\nК слову, попыток сделать инструмент, который позволил бы непрограммистам программировать продукт, было много, однако Microsoft, Uber, Google, Yandex и прочие IT-компании продолжают упорно хантить самых лучших разработчиков со всего мира. Не думаю, что они там у себя плачут, колятся, но продолжают есть кактус.\nЕсли разработчику не интересна бизнес-сфера проекта Такое тоже может быть, и тут могу сказать следующее. Если разработчик не готов проявлять заинтересованность и инииативу, то пусть будет готов, что однажды с ним расстанутся, так как нашли более дешевую замену. Иначе говоря, ваша осведомленность в бизнес-сфере - это ваше конкурентное преимущество.\nТак что же теперь делать? Навыки, полученные во время обсуждений требований, будут полезны разработчику в любом случае. Умение продавать технические улучшения никогда не были лишними, да и от дополнительные знаний бизнеса еще не один разработчик сильно не пострадал. И даже если не интересен текущий проект, то стоит прокачивать вышеописанные навыки для будущего проекта и/или работодателя.\n","permalink":"https://maximgorbatyuk.github.io/blog/management/2019-09-25-do-programmers-should-know-business-sphere/","summary":"В комментариях к одному видео некто задал интересный вопрос:\nА должны ли программисты изучать бизнес-сферу проекта, где работают?\nАвтор видео не успел ответить, а я же посчитал, что меня забыли спросить и что я должен ответить на этот вопрос.\nПочему не сотоит слепо доверять прописанным требованиям Некоторые разработчики могут подумать, что они приходят в компанию писать код и разрабатывать архитектуру, а не вдаваться в подробности бизнеса компании. Что, мол, бизнес-аналитики должны прорабатывать все нюансы проекта и сценарии взаимодействия (Use Case - UML).","title":"Должны ли программисты изучать бизнес-сферу проекта"},{"content":"Disclamer Источник: https://www.joelonsoftware.com. Эта статья - вольный перевод без претензии на достоверность.\nВ переводе не стремился сохранить формулировки автора, а использовал перефразирования, которые использую в своей речи сам.\nТест содержит 12 быстрых вопросов, и каждый ответ \u0026ldquo;Да\u0026rdquo; дает один балл. Градация результата такова: 12 баллов - идеально, 11 - это приемлемо, 10 и меньше - у команды есть проблемы. Ну а если команда набрала только лишь 2-3, то у нее действительно серьезные проблемы.\nДаже если эта команда разрабатывает самый классый продукт, она не должна забывать о качестве и процессах. Если команда стремится к тому, чтобы набирать 12 баллов в тесте Джоела, то она сможет доставлять фичи на прод и онбордить новичков гораздо быстрее, влияние человеческого фактора и шанс появления серьезных багов будет меньше.\nТест Джоела 1. Используете ли систему контроля версий? Даже можно не обсуждать этот вопрос. Если не используют, то можно поинтересоваться, какой постфикс в имени zip-архива с исходным кодом на данный момент.\nСтоит спросить про GitFlow, который команда применяет. Если она не применяет установленный какой-то, то стоит расспросить подробно, ведь команда может и не знать, что пользуется одним из них.\n2. Можете ли вы сделать билд (в прод) в один шаг? Если не могут, то во сколько шагов? Что мешает автоматизировать процесс до нажатия одной кнопки / запуска одного скрипта.\n3. Делаете ли ежедневные билды? Иными словами, используют ли CI-инструменты. Если нет, то почему нет.\n4. Ведете ли систему баг-трекинга? Софт пишут люди, и люди ошибаются. Это значит, что в софте были, есть и будут \u0026ldquo;таиться\u0026rdquo; баги, какие бы классные спецы его ни писали.\nхорошая система баг-трекинга хранит следующее:\nШаги для воспроизведения Ожидаемое поведение Наблюдаемое поведение (которое отличается от ожидаемого) На кого назначен баг (кто над ним работает) Будет ли баг пофикшен или нет 5. Фиксите ли вы баги перед тем, как начать писать новый код? В идеальном мире разработчики фиксят баги до того, как эти баги попадают в продакшн. Однако мир не идеален, и разработчики чинят не всё и не всегда. Спроси, кто в команде решает, какие баги нужно фиксить и какие остаются техническим долгом.\nЕсли команда не заморачивается над багами, то что можно сказать о такой команде?\n6. Есть ли у вас план работ? Разработчики должны знать, куда движется проект. Ведь только так они смогут проработать такую архитектуру сейчас, чтобы в нее \u0026ldquo;безболезненно\u0026rdquo; вписались любые будущие изменения. При этом важно находить баланс и не программировать будущую функциональность.\nТакже стоит заметить, что этот вопрос не только о планах развития продукта, но и о сроках выполнения. Поставленные сроки дисциплинируют разработчиков, если, конечно же, они запланировали эти сроки.\n7. Есть ли документация? Странная вещь - эта документация: все согласны, что она нужна и полезна, но никто ее не пишет.\nРазработчики предпочитают писать такой код, чтобы он сам \u0026ldquo;говорил за себя ясно и понятно\u0026rdquo;. При это степень \u0026ldquo;ясности и понятности\u0026rdquo; может быть такой, что только одному автору и понятен код, и то здесь и сейчас. Ведь через полгода вполне вероятно, что автор сам забудет написанную им логику.\nЧеловеко-понятные комментарии к коду нужны, и главное - отразить в них скорее не поведение кода, а объяснение причин такого поведения. Ссылки на тикет тоже будут полезны.\nВедение документации в Вики/Конфлюенсе также полезно, особенно когда разработчики внедряют что-то совершенно новое: новую архитектуру, сторонний модуль или интеграцию с внутренними или внешними сервисами. Любая мысль, написанная \u0026ldquo;на бумаге\u0026rdquo;, лучше, чем ничего.\n8. Работают ли разработчики в тишине? Вхождение в поток - очень важно. Не одна статья об этом написана. Состояние потока тяжело поймать и легко потерять, когда вокруг шумно. Поэтому стоит поинтересоваться у будущей команды, в каких условиях они работают.\nПрерывания потока обходятся \u0026ldquo;дорого\u0026rdquo;, поэтому небольшие комнаты на ограниченное количество человек предпочтительнее, по-моему, чем опэнспейс на 100 человек.\n9. Используете ли вы наилучшие из имеющихся инструментов? Если сборка проекта \u0026ldquo;тормозится\u0026rdquo; мощностями компьютера, то лучше стоит апгрейднуть этот компьютер. Разработка GUI с двумя мониторами гораздо эффективней, чем с одним и постоянными сменами активного окна.\nТот же самый принцип актуален и для софта. Если есть решение, где нужный функционал предоставлен \u0026ldquo;из коробки\u0026rdquo;, но он стоит N денег, то лучше выбрать его, чем брать не совсем подходящий, требующий доработки напильником, но бесплатный. Ведь в любом случае вы заплатите за использование этого бесплатного инструмента временем настройки разработчиком.\n\u0026ldquo;Top notch development teams don’t torture their programmers (Лучшие команды разработчиков не мучают своих програмистов) (с) Joel Spolsky\u0026rdquo;\n10. У вас есть тестировщики? В целом стоит узнать, как команда подходит к тестированию своего продукта. Есть ли юниттесты, интеграционные, ручные и/или автотесты?\n11. Пишут ли код кандидаты на позицию во время интервью? Ты и так узнаешь ответ на этот вопрос, ведь обычно сессия вопросов кандидата команде идет как раз в конце собеседования. Если кодинга не было, то стоит задать вопрос \u0026ldquo;почему\u0026rdquo;.\nТы врядли наймешь кондитера для выпечки торта для своей свадьбы без пробы, так и нанимать программиста без проверки его навыков кодирования не стоит.\n12. Используете ли вы \u0026ldquo;коридорное (hallway)\u0026rdquo; тестирование? Коридорное тестирование - это когда ты берешь случайного пользователя (как будто в коридоре) и просишь его протестировать новую фичу. Так ты увидишь в реальной жизни, как незнающий продукт человек взаимодействует с ним.\n","permalink":"https://maximgorbatyuk.github.io/blog/employment/2019-09-22-what-should-i-ask-from-future-team/","summary":"Disclamer Источник: https://www.joelonsoftware.com. Эта статья - вольный перевод без претензии на достоверность.\nВ переводе не стремился сохранить формулировки автора, а использовал перефразирования, которые использую в своей речи сам.\nТест содержит 12 быстрых вопросов, и каждый ответ \u0026ldquo;Да\u0026rdquo; дает один балл. Градация результата такова: 12 баллов - идеально, 11 - это приемлемо, 10 и меньше - у команды есть проблемы. Ну а если команда набрала только лишь 2-3, то у нее действительно серьезные проблемы.","title":"Что я должен спросить у своей будущей команды. The Joel test."},{"content":"Disclaimer: Данная статья — только мнение отдельно взятого разработчика о бизнес-процессах в отдельно взятой компании. Никаких неопровержимых доказательств здесь не приводят.\nЯ работаю в команде разработки раздела сайта в банке. Сайт внешний, содержит FAQ о продуктах банка. Посещаемость клиентами в стране около 587к в месяц. Хотя относительно остальных разделов сайта это небольшая цифра. Например, в разделе “Мой банк” — мобильное интернет-отделение — посещаемость гораздо выше, но точных цифр мне никто не дал. Да я и не просил. Веб-приложение работает с кучей внутренних сервисов, дизайн раздела должен строго соответствовать установленному на всем сайте. В общем, наша команда не автономна, всегда есть зависимости от других подразделений.\nРаботаем по скраму, по крайней мере пытаемся. Что-то не получается, довольно часто факапим спринты. На очередном дэйли у кого-то из команды возникла:\nА почему бы нам не переехать на канбан? Там нет спринтов, каждый берет задачи по мере освобождения, делает их так быстро, как может он. Не нужно планировать спринты, каждый подтягивает задачи себе и делает потихоньку. Крупные юзер-стори анализирует, делит на небольшие задачи, остальные могут подхватить их. После анализа озвучивает сроки продакту. Одни плюсы!\nС одной стороны, да, одни плюсы. Но что-то мне подсказывает, что мышление “мы факапим спринты — давайте откажемся от спринтов” не очень верное. Обсуждали мы этот переход в течение недели при любом удобном случае, но так и не пришли к единому мнению. В этой статье я хочу поразмышлять о том, подходит ли канбан нашей команде, есть ли у него минусы по сравнению со скрамом.\nКакова ситуация в банке Чтобы понять, почему участники команды начали высказывать мысли о переездах на новые методологии, нужно описать контекст. В течение последних пары месяцев наш отдел работал по текущим задачам без особой группировки по целям или направлениям. На нашем разделе сайта есть формы обращения клиентов, которые станут, по мнению нашего PO, заменой письменным обращениям клиентов в отделениях банка. Замысел неплохой — цифровизация-информатизация, digital и все такое.\nСразу скажу, что далее по тексту для обозначения бизнес-заказчика я буду использовать разные варианты: PO, Product Owner, продакт оунер, продакт, заказчик. Под этими названиями я имею в виду только одну определенную роль — product owner в Agile.\nОднако процесс этот нелегок. Нашему PO нужно принудить другие отделы, которые рассматривают эти обращения, изменить свои бизнес-процессы. А такова природа человека, что если боли особой нет, то и менять нечего. Например, один отдел вел свою базу данных в простом EXCEL-файле, который шарил на сетевом диске. “Доступ к базе одновременно? Зачем, мы ж можем попросить других не трогать файл, пока работаю я”. Предложили внедрить свое подобие CRM-системы — нехотя согласились, а спустя полгода разработки уже требуют новые фичи, чтобы были написаны еще вчера. В общем, процесс ввода форм на сайте затянулся. Продакт в течение спринта накидывал новые требования по блокам, полям ввода и прочим штукам, на которые юристы компании указывали.\nФактически, все разработчики работали над задачами, условия которых менялись по несколько раз в спринт. Получается, что и спринт как таковой потерял важность и стал лишь формальным триггером к тому, чтобы проводить периодические встречи скрама. Планирование мы проводили тоже формально, потому что не было смысла задавать какие-то вопросы заказчику — все равно они могут измениться в течение спринта. Скрам-покер тоже перестали проводить — зачем нам оценивать задачу сейчас, если все равно придут правки. А не брать задачу в спринт нельзя, потому что на это есть два фактора: • Заказчик хочет наконец-то внедрить эти формы в обращение, ему психологически легче, если он видит, что задача формально “в работе”;• Часть задачи все же понятна — можем потихоньку клепать верстку фронта и делать другие низкоуровневые вещи интеграции с другими внутренними сервисами.\nКак мы должны были поступить по скраму. В идеальном мире по скраму разработчики не должны брать в спринт юзер-стори, пока сам продакт оунер не знает, что нужно делать по ней. Уже не вспомнить, из какой книги или статьи я сделал такой вывод, но мне кажется, что\nесли нашему Product owner’у нужно согласование от третьего лица, значит это третье лицо и есть истинный Product owner.\nЧитатель может мой вывод перевернуть с ног на голову и сказать, что все несут ответственность перед СЕО компании и никакие стратегические вопросы не должны принимать без его ведома и/или согласия. Значит СЕО — продакт для всех команд. Это отчасти верно, но у СЕО может пупок развязаться от такой нагрузки. Для того СЕО и назначает ответственных за продукты и направления, делегируя им право принятия решений, если они не противоречат общей философии компании.\nНа планирование заказчик приходит с уже определенным и согласованным бизнес-видением юзер-стори (User story). Разработчики должны задавать спонтанно возникающие вопросы на планировании, а продакт — на них отвечать. Разработчики наполняют каждую юзер-стори минимальным набором требований, с которыми можно начинать работу по ним. Иначе в планировании пропадает смысл.\nПроблемы нашего скрама. Мне кажется, что все проблемы нашего скрама исходят из неверного начала спринта — планирования. Само мероприятие превращается в назначение задач людям, которые должны будут отслеживать телодвижения по задачам, если появится какая-то зависимость от третих лиц. Задачи часто переводятся автоматом в колонку “Ожидание”, а исполнитель ждет некоего триггера, чтобы начать хоть что-то делать. Параллельно, чтоб не пить кофе все 8 часов рабочего времени, в спринт берутся операционные задачи или задачи из техдолга.\nЧерез две недели видим одну из двух ситуаций:• В спринт накиданы еще задачи с бэклога, потому что разработчик закончил свою текучку до окончания спринта, а триггер по бизнесовым задачам так и не появился.• В спринте осталась куча текущих задач в колонке “Сделать”, потому что триггер по бизнесовым наступил рано. Еще хуже, если некоторые задачи остались в колонке “в ожидании”. Разработчик большую часть спринта занимался бизнесовой задачей, не начиная текучку или бросив на полпути. Ведь бизнес-задача более приоритетна, не так ли?\nСкрам не просто так призывает не назначать продакт-оунером прямого руководителя программистов. Продакт на планировании презентует юзер-стори, пытается вдохновить разработчиков, заинтересовать. Разработчики в свою очередь стремятся выяснить больше о задаче сразу на планировании, чтобы на начало спринта они понимали, с чего начать. Если бы продакт был в иерархии властвования над отделом разработки, то о какой презентации задач может идти речь? Продакт может просто сказать “надо взять, там выясните требования”, а программисты не могут не подчиниться. Идеальный “водопад”.\nНемного о канбане и его сути Канбан — это еще один фреймворк аджайла. Изначально его сформировали в производстве на заводе Toyota. Но смекалистые программисты увидели, что этот принцип можно применять и в разработке ПО. Суть канбана в том, что управляющие проектом акцентируют свое внимание на скорости завершения отдельно взятой задачи. Иначе говоря, на скорость потока задач и проходимость потока. В скраме же основное внимание обращают на производительность команды — количество реализованных задач в единицу итерации.\nКанбан — это об ограничениях. Канбан позволяет определить бутылочные горлышки процесса разработки, так как вводит ограничения на количество задач в той или иной колонке: • В “работе” не должно быть больше задач, чем количество разработчиков в отделе. • В “ожидании/код-ревью/тестировании” не должно быть больше, чем N задач, где N — утвержденное число всеми участниками процесса.\nЕсли мы видим, что на тестировании скапливается много задач, то это — повод пересмотреть правила и процессы тестирования. А разработчик не может перевести свою задачу на тестирование, пока там не появится место для нее. Что делать в данном случае? Я считаю, что пока не нанят еще один тестировщик, то сам разработчик берет другие задачи на тестирование, чтобы освободить место для своей.\nРуководители могут сказать, что это слишком дорого: час разработчика стоит дороже, чем час тестировщика, который тестирует вручную. Все верно — время разработчика стоит дорого. Но нужно платить, пока проблема медленного тестирования не решена. Получается, что необходимо либо расширять штат тестировщиков, либо внедрять системы автотестирования интерфейса. Можно придумать и другие варианты решения проблемы. Ну а канбан выполнил свою роль — он выявил проблему в цепочке поставки продукта.\nАналогично будет и с задачами в ожидании: разработчик не может перевести задачу “в ожидание”, если там нет места. А если место занято на 100%, то это повод разобраться с факторами, мешающим работе над этими задачами.\nДругой отдел не может согласовать свои требования в нашей совместной интеграции? Предлагаем свои варианты и/или пишем урезанные “туповатые” возможности этой самой интеграции, создавая задачу типа “доделать урезанную функциональность фичи А”. Ждем дизайна от ответственного подразделения? Предлагаем нашему продакту написать интерфейс, не противоречащий общему гайдлайну, пока дизайн не утвердили. Продакт не соглашается? Значит зря взяли вообще в работу, если знаем, что дизайн в этой задаче очень важен и отдход от него может стоит репутации компании. Ну а конкретный разработчик работает над внутренними делами отдела: техдолг, рефакторинг, внедрение typescript в проект. А то уже стыдно в 2к18 году только лишь jquery на фронте пользоваться. Что, что? Продакт против работы над typescript? Ну а что вы хотели, не нужно давать в работу задачи, где есть зависимость от третьих подразделений и она еще не решена.\nПочему канбан не решит наши проблемы Каждый заказчик желает знать, когда его фича будет в продакшене. И очень желает, чтобы программисты выдерживали сроки, которые называют. Короткие итерации в скраме были придуманы для того, чтобы подстегнуть разработчиков делить задачи. Небольшие задачи легче прогнозировать. И очень желательно, если прямо на планировании относительно крупная юзер-стори и будет поделена.\nКанбан не отменяет планирование, заказчик все также должен презентовать юзер-стори и их значимость для проекта, а разработчики — задавать спонтанно возникающие вопросы. Все также разработчики должны давать оценки небольшим задачам в 2–5 дней, а большие задачи — брать на анализ, чтобы понять возможность поделить на небольшие. По моему мнению, задачу не должны брать в спринт, пока ее реализация занимает больше чем 10 рабочих дней одного программиста. Если продакту она нужна “вчера”, то разработчики должны делить ее. А вдруг не все требования юзер-стори нужны сейчас, некоторые могут и потерпеть до следующего спринта? А вдруг есть возможность параллельно делать задачу? А вдруг можно наговнокодить с обязательным выпилом говнокода в следующем спринте? Есть много вариантов.\nУтверждать, что нельзя поделить задачи на небольшие, в 99% случаев неправильные — любую задачу в вебе можно поделить пополам: два человека могут работать параллельно над красотой на фронте и подкапотной логикой в бэкенде. Если разработчики не умеют делить задачи пополам, то должны учиться. Некоторые могут возразить, что деление задачи для ее параллельного выполнения накладывает дополнительные расходы: время, чтобы определить границы деления, время на мердж в мастер и все такое. Я считаю, что это небольшая плата за следующее:• Что разработчики в команде лучше будут понимать проект;• Научатся делить задачи на небольшие кусочки и сдавать их в срок;• Чаще будут общаться в отделе, что еще больше сплотит группу людей в команду.\nПланировать и выдерживать периоды планирования нужно, потому что продакт хочет понимать, когда он получит ту или иную фичу в продакшене. Можно сообщить ему, что фича А будет готова через 20 дней, фича Б — 14 дней, а фичи В-К — мелкие, что можно раскидать их за две недели.Тогда продакт оунер должен держать в голове пачку юзер-стори и примерную дату их выполнения в голове и/или в блокноте. А может прямо на доске скрама — вот же и есть тот самый список задач, которые будут накачены на бой спустя две недели.\nПроблемы сроков При скраме, если кто-то не успевает свои задачи закончить, остальные должны стремиться ему помочь. Иначе зачем на каждом дэйли нам задают вопрос “есть ли что-то такое, что мешает закончить спринт вовремя?” В канбане перестроиться на выполнение тяжелее, ведь у каждого есть своя задача в работе, которую человек обязался сдать к определенному сроку. Я думаю, что ответ очевиден, что выберет человек: помочь другому закрыть его задачу или закрыть свою в срок.\nВ скраме все понятно: команда не сделала задачи за спринт — виновата команда. Нужно теперь понять на ретроспективе, почему зафакапили спринт, сделать выводы и работать над ними. В канбане за срыв сроков отдельно взятой задачи несет ответственность её исполнитель. И если он помогал другим с их задачами, то он зафакапил свою задачу по объективной причине. Но объяснить это заказчику становится тяжелее, значит каждому придется вести себе специальный дневник и записывать туда записи типа “потратил полтора часа, чтобы помочь человеку M. закончить его задачу” и “делал ревью человеку П. в течение двух часов”. Потом же нужно будет подсчитывать все эти записи, чтобы понять, равно ли общее время штрафному, на сколько зафакапил задачу. И да поможет тебе бог, если не будет тождества между ними.\nРазработчики должны думать прежде всего о задаче, над которой они работают. Точной статистики нет, но я считаю, что программист думает 60–70% над задачей и только остальное время пишет код. Если он будет думать еще и над тем, не забыл ли он внести запись для оправданий в будущем, то о какой эффективности идет речь?\nЧто же теперь делать? Уж точно не затевать переезды на канбан, если не сумели работать по скраму. Канбан, как и скрам, не отменяет ограничения сверху, и нельзя потихоньку работать над задачей, пока заваривается чаёк. Заказчик будет давить на разработчиков, чтобы быстрее делали задачи. В скраме вся команда ответственная за набор задач, и продакту нужно давить на пятерых людей.\nФича А из примера выше занимает 20 дней? Давайте делить! Нельзя делить на планировании потому что можем не успеть поделить в течение двух часов? Пусть один из разработчиков возьмет ее на анализ на пару дней, определит способы разделения. Можем с заказчиком договориться, что поделенные задачи возьмем тут же в спринте, если вся юзер-стори срочная, а можем отложить на следующий спринт. Можем делать урезанные фичи в спринте, чтоб потом доделать в последующих.\nЯ считаю, что можно и нужно играть именно содержанием задачи, чтобы она умещалась в спринт. Увеличение сроков спринта или отказ от них вообще уж точно не решит проблему факапов спринта. Ну а если сейчас лето и период отпусков у всех, в том числе и заказчиков и людей во всех связанных интеграциями подразделениях, то давайте признаем это и просто не будем планировать большие юзер-стори на летний период, а займемся своими внутренними задачами или фиксом давно известных багов, до которых так и не доходят руки.\nP.S. Если читателю показалось, что он видит совпадения с реальными людьми и компаниями, то это — только совпадения и они случайны.\n","permalink":"https://maximgorbatyuk.github.io/blog/opinion/2019-09-19-kanban-for-development-in-bank/","summary":"Disclaimer: Данная статья — только мнение отдельно взятого разработчика о бизнес-процессах в отдельно взятой компании. Никаких неопровержимых доказательств здесь не приводят.\nЯ работаю в команде разработки раздела сайта в банке. Сайт внешний, содержит FAQ о продуктах банка. Посещаемость клиентами в стране около 587к в месяц. Хотя относительно остальных разделов сайта это небольшая цифра. Например, в разделе “Мой банк” — мобильное интернет-отделение — посещаемость гораздо выше, но точных цифр мне никто не дал.","title":"Scrum vs Kanban для разработки в банке"},{"content":"Часто во время интервью спрашивают нас о чем-то, но это ведь собеседование, значит и кандидат на позицию тоже выбирает из компаний. Необходимо задавать вопросы на собеседованиях, и чем они провокационней, тем лучше.\nВопросы Как часто проводятся груминги, дэйли и другие митинги Agile? Необходимо понаблюдать за реакцией собеседника: устало он отвечает или бодро. Вряд ли отсутствие энтузиазма в голосе будет при отличных и продуктивных митингах.\nКак часто происходят пожары? Пожар - это когда какой-то сотрудник остается в офисе допоздна и тушит его. Если пожары постоянны, то на тебя будут смотреть как на дезертира, когда ты встанешь в условные 5 часов вечера и пойдешь домой.\nКак обстоят дела с конференциями? Если ты выступаешь, то странно, когда компания заставляет тебя отрабатывать это на выходных. Ведь ты своим выступлением приносишь пользу пиаром компании. Даже если ты не будешь выступать, то все равно ответ покажет многое о компании.\nНасколько строгие дэдлайны? Нужно узнать, как часто тебя будут просить сделать задачу N за Y дней. Именно такие команды верят в миф, что тесты замедляют разработку, а вон тот \u0026ldquo;грязный\u0026rdquo; класс исправят на следующей неделе. Профессионал не нарушает принципы качественного кода, ведь его для этого и наняли - делать качественный продукт.\nКакие плюсы и минусы у вашей компании? Вопрос стоит задавать в конце собеседования. Он покажет суть компании. При вопросе о плюсах если собеседник говорит о технике и виде из окна, то это важный звонок, ведь он не вспомнил о тех самых крутых технологиях и сотне микросервисов.\nА если человек не вспоминает о минусах, то он или лжет, или ему все равно. А такое происходит тогда, когда минусы становятся чем-то обыденным. Это ведет к перегоранию.\nСтоит уточнить о переработках. Не стоит продавать свою мотивацию за коэффициент к зарплате и работе в выходные и поздние часы.\nА можете сделать код-ревью моего кода? Необходимо принести небольшую заготовку и попросить оценить. Это реальный рабочий момент, с которым ты будешь иметь дело каждый день.\nКакая будет моя первая задача? Какая она, моя первая таска? Пусть расскажут в деталях, что тебе предстоит делать в первые дни в компании. Ответ на вопрос покажет, какой есть бэклог в команде и как коллеги умеют объяснять.\nПроводите ли ретроспективу? Если говорят, что да, то попросите назвать две основные проблемы, которые поднимались прошлый раз. И какие же они действия собираются предпринять? Так ты узнаешь, какие проблемы есть в команде и что они делают с ними. Если говорят, что проблем нет, то это точно говорит об обратном.\nЗачем это мне вообще нужно? Интервьюеры обычно не ожидают вопросы подобного характера. Нужно рассказать, что ты ответственно подходишь к выбору рабочего места, что тебе важна команда, где ты будешь работать, что ты нацелен на долгосрочное сотрудничество. Ведь именно это и в интересах компании.\nЕще важно попросить показать рабочее место. Оцени мебель и технику.\nСписок более точечных вопросов. Чем я буду заниматься? Только узкими обязанностями или еще и смежными? Какой стек на моём проекте? Есть ли легаси? Что с тестированием? Есть ли CI/CD и девопс инженер? Будет ли единый ПМ и четко заданный жизненный цикл таски? Есть ли Бизнес Аналитика? Системы мониторинга, сборщик логов? Переработки бывают? Оплата? Системы трекинга времени и руткиты на рабочем компе? Отпуска: дробление отпуска, включены или нет выходные, за сколько нужно предупреждать, отказы? За что и как часто получаются премии? Кто определяет их размер? Есть ли СБ? Какие требования у СБ? Почему открыта вакансия? Если не новая, то куда ушел предыдущий разработчик? Аналогично про гибкий график, карьерный рост. Что это значит и в чем выражается. Ретроспектива. Код ревью в компании: кто, как долго, что если пожар. Источники Вопросы будущему работодателю - habr.com Собеседуем работодателя, или как не уволиться в первый месяц - habr.com ","permalink":"https://maximgorbatyuk.github.io/blog/employment/2019-09-19-questions-for-future-employer/","summary":"Часто во время интервью спрашивают нас о чем-то, но это ведь собеседование, значит и кандидат на позицию тоже выбирает из компаний. Необходимо задавать вопросы на собеседованиях, и чем они провокационней, тем лучше.\nВопросы Как часто проводятся груминги, дэйли и другие митинги Agile? Необходимо понаблюдать за реакцией собеседника: устало он отвечает или бодро. Вряд ли отсутствие энтузиазма в голосе будет при отличных и продуктивных митингах.\nКак часто происходят пожары? Пожар - это когда какой-то сотрудник остается в офисе допоздна и тушит его.","title":"Вопросы будущему работодателю"},{"content":"Источник: habr.com, но ссылку утерял, а поиск по гуглу ничего не дал\nРабота и дружба Что способствует дружеским отношениям внутри вашей команды? Большинство людей не признают, что члены их команды не близки друг другу или им не хватает командной работы. Спрашивая о том, чем связана команда, вы получите четкое представление о том, насколько все дружелюбны и сплочены. Члены одной команды посещают конференции вместе, а члены другой были друзьями еще до того, как присоединиться к компании. Возможно, вы узнаете о совместных социальных активностях и переработках.\nВо время обеда обсуждаются рабочие темы или более личные? Если ваш интервьюер не знает, как ответить на этот вопрос, спросите его/ее, предпочитают ли люди обедать за своими столами или ходят в кафе. Не стесняйтесь задавать разным людям один и тот же вопрос, чтобы вы могли нарисовать полную картину. Вопрос о разговорах во время обеда дают представление об отношениях внутри команды. В некоторых компаниях проводится четкая граница между профессиональным и личным, в то время как других этой границы нет.\nКарьерный рост По какой причине инженеры чаще всего увольняются из компании? Четкие ответы на этот вопрос дают четкую картину. «У нас нет текучки за последние 18 месяцев» или «Последние 5 человек, которые ушли, начали создавать свои собственные компании». Но чаще звучат менее четкие ответы, поскольку интервьюеры редко говорят прямо, что люди уходят из-за нездоровой рабочей атмосферы или постоянных переработок. Поэтому вам нужно будет определить, как ваш интервьюер отвечает на эти вопросы в дополнение к тому, что он на самом деле говорит. Да. Вы проводите собеседование с вашим интервьюером.\nПочему на эту должность вы ищете внешних кандидатов? (Для менеджеров или ведущих ролей) Вы должны выяснить, они не могут закрыть вакансию кем-то из членов команды. Вы можете узнать, что повышения редко практикуются в этой компании или что существует серьезный пробел в знаниях или опыте, за восстановление которого вы будете ответственны.\nНачинал ли кто-нибудь из старших инженеров работать в этой компании с позиции младшего инженера? Это особенно полезно для джуниоров. Если вы первый джуниор разработчик, то спросите, какие ожидания у команды от этой позиции и с к кому вы можете обращаться за помощью. Вы также узнаете, есть ли карьерный рост в компании. Здорово узнать, что другие младшие разработчики смогли вырасти в компании. Спросите, можете ли вы встретиться и поговорить с таким человеком, даже если это не тот человек, с которым вы будете работать напрямую.\nКаков процесс, например, перехода в другой проект или в другую команду? Хороший ответ будет включать примеры множества людей, которые сделали именно это. «Джесс просто перешла из команды разработчиков к команду инфраструктуры. Стивен начал работать инженером и теперь является менеджером проектов». Просто потому, что у компании есть установленная политика в отношении внутренней мобильности, это не означает, что она осуществляется. Узнайте, как легко попробовать разные вещи, и как устроен переход между проектами / командами на основе интереса и соответствия. Сможете ли вы сами быть инициатором для таких переходов? Как много времени это займет? Поддерживает ли компания эти изменения?\nПсихологическая обстановка Можете ли вы привести мне пример ошибки, которую вы допустили. Как она была обработана? В идеале ваш интервьюер будет честно отвечать. Если людям комфортно обсуждать большие неудачи, то это хороший знак. Это говорит о том, что компания создала безопасную среду для людей, чтобы пережить неудачу, и что эта среда открыта к рискам и экспериментам. Если люди закрыты в обсуждении неудач, это может указывать на культуру вины в компании.\nНасколько быстро реагируют люди на электронные письма / сообщения в Slack в выходные и после 6 вечера? Так вы сможете получить представление о реальных рабочих часах и о том, как члены команды общаются друг с другом. Не стоит задавать прямой вопрос о балансе работы / жизни в компании. Мало того, что некоторые интервьюеры могут интерпретировать это как нежелание работать, но так еще и наверняка дадут вам шаблонный ответ.\nБыли ли реорганизации команды и как они проходили? Затем спросите: «Что побудило реогранизацию и каковы были изменения?» Рассказы о реорганизациях позволяют узнать, как работает общий бизнес и куда он идет. Компании решаются на реструктуризацию по нескольким причинам: сбои в работе, смена клиентской базы, рост или сокращение численности персонала, контроль над менеджером или просто попытка исправить то, что не работает.\nВы полезно узнать, какие проблемы существуют, как они измеряются и насколько хорошо они рассматривают вовлеченных лиц при внесении этих изменений.\nРазработка Можете ли вы описать процесс разработки от постановки задачи до выпуска в продакшн? Здесь нет правильного или неправильного ответа. Вам нужно выяснить, разделяют ли в компании ваше видение развития. Если вы предпочитаете работать быстро и цените самостоятельность, вам вряд ли будет комфортно в команде, где 5 раз ревьюят код и перед его выпуском в продакшн ждут одобрения бизнес-команды.\nКакие инструменты вы используете для контроля версий? Хорошие команды используют хорошие инструменты. Если вы не хотите попасть в команду, которая пользуется устаревшие инструменты, то разумно спросить, какую систему контроля версий они используют.\nКак ваша команда перешла к использованию нынешнего фрейворка? Если вы просто спросите: «Почему вы решили использовать X?», то инженеры могут включить защитную реакцию. Вопросы с «почему» могут быть восприняты как атака. Поскольку вы хуже знакомы с их технологическим стеком и бизнесом, чем они, то лучше спросить, как они пришли к решению использовать те или иные технологии, рассматривали ли они другие варианты, как они оценивали компромиссы между ними? Вы узнаете, кто имеет право принимать решения, когда речь заходит о технологиях, и где компания находятся с позиции технологий.\nКомандные ценности Кто в компании для вас самый мотивирующий пример и почему? Так вы узнаете больше о том, кто здесь работает и какие качества уважают в компании. Кроме того, попросите своего/ю интервьюера пригласить члена команды, которым он гордится/вдохновляется. Если ему/ей сложно выбрать только одного человека, это хороший знак. Если вам назовут людей со всей компании, то это тоже хороший знак.\nНа каком проекте я буду работать и какие показатели будут определять успех? Каждый должен спросить о том, над чем он будет работать, как только он присоединится. Конечно, это должно быть чем-то интересным и сложным для вас, но вы также должны выяснить, есть ли четкие показатели для оценки вашей производительности. Если ваш интервьюер избегает второй половины вопроса, вы можете спросить конкретно, будете ли вы отвечать за улучшение скорости и доступности сервисов, монетизации или удержания пользователей. Вы не только получите представление о том, что вы будете делать, но также как компания управляет данными.\nКак происходит управление продуктом? Важно понять, какую роль играют инженеры в компании и будете ли вы принимать участие в разработке идей и концепций или будете делегировать такую работу, кто имеет полномочия принимать решения.\nУточняющими вопросами могут быть: Как вы распределяете обязанности сотрудников? Насколько много говорят инженеры о том, что построено и как оно построено?\n","permalink":"https://maximgorbatyuk.github.io/blog/employment/2019-09-19-questions-for-company/","summary":"Источник: habr.com, но ссылку утерял, а поиск по гуглу ничего не дал\nРабота и дружба Что способствует дружеским отношениям внутри вашей команды? Большинство людей не признают, что члены их команды не близки друг другу или им не хватает командной работы. Спрашивая о том, чем связана команда, вы получите четкое представление о том, насколько все дружелюбны и сплочены. Члены одной команды посещают конференции вместе, а члены другой были друзьями еще до того, как присоединиться к компании.","title":"Вопросы компании при собеседованиях"},{"content":"Источник: записи из моего блокнота. Возможно, на лекциях MBA рассказывали, а может и записал откуда-то.\nРуководитель - человек, распоряжающийся людскими ресурсами. Менеджер - работний, от принимаемых решений которого зависит в той или иной степени прибыль компании.\nПринципы восточного менеджмента 1. Все законы войны распространияются и на искусство ведения бизнеса Успех может ослепить менеджера, а поражение - заставить его думать, что виновы все и вся, но только не он.\n2. Если ты силен, то покажи слабость; если ты слаб - покажи силу. Если ты близко, то покажи, что ты далеко; если ты далеко - покажи, что близко. Действия и обстоятельства внутри фирмы должны быть скрыты от конкурентов, но при этом они должны думать, что все про нас знают.\n3. Приоритет самоанализу. Объективная оценка себя и конкурентов. Есои не уверены в качестве работы сотрудников, то нужно с этим что-то делать.\n4. Любой бизнес должен постоянно развиваться. Если недостаточно ресурсов, то можно перейти к обороне, но ненадолго.\n5. Не следует жестко противостоять трудностям. Можно временно \u0026ldquo;прогнуться\u0026rdquo;, чтобы набрать силы и скинуть груз. Не страшно отступить, страшно не продолжать борьбу.\n6. Не стоит бросаться на проблему в лоб. Нужно исследовать вопрос на наличие слабых мест. Не трать все силы на атаку в лоб.\n7. Ученость и умствование есть причина смуты в государстве. Мудрый правитель держит желудки рабочих сытыми, а головы - пустыми.\n8. В любой фирме должны быть передовики. На передовиках строится костяк фирмы. Факт принадлежности к такой группе дает работнику мотивации продолжать в том же темпе.\n","permalink":"https://maximgorbatyuk.github.io/blog/management/2019-09-08-eastern-management/","summary":"Источник: записи из моего блокнота. Возможно, на лекциях MBA рассказывали, а может и записал откуда-то.\nРуководитель - человек, распоряжающийся людскими ресурсами. Менеджер - работний, от принимаемых решений которого зависит в той или иной степени прибыль компании.\nПринципы восточного менеджмента 1. Все законы войны распространияются и на искусство ведения бизнеса Успех может ослепить менеджера, а поражение - заставить его думать, что виновы все и вся, но только не он.\n2. Если ты силен, то покажи слабость; если ты слаб - покажи силу.","title":"Восточный менеджмент"},{"content":"Situation Попроси рассказать кандидата о ситуации. Контекст, предпосылки и т.д.\nTask / Trouble Какую проблему увидел кандидат в ситуации, почему охарактеризовал ее проблемой.\nActions Какие действия он предпринял для решения проблемы. Почему именно такие. Нужно задавать больше вопросов с How, Why, Who, которые побуждают к рассказу.\nResults / Roadblocks Каких результатов кандидат достиг своими действиями.\nSelf-apprisal Как оцениает кандидат свои действия и результаты.Какие выводы он делает из сложившегося кейса. Что бы кандидат сделал сегодня иначе, если бы сделал.\nПримечания нельзя задавать закрытые вопросы, на которые можно ответить только Да/Нет Избегай вопросов типа \u0026ldquo;Повел бы себя в той ситуации \u0026lt;описание поведения\u0026gt;\u0026hellip;?\u0026rdquo; или \u0026ldquo;У тебя хороший тайм-менеджмент?\u0026rdquo; Не спрашивай терминологию - в ответ получишь выжимки из википедии Задавай открытые вопросы и приводи примеры Попроси рассказать о reverse-enginering навыках ","permalink":"https://maximgorbatyuk.github.io/blog/management/2019-09-08-starts-schema-interview/","summary":"Situation Попроси рассказать кандидата о ситуации. Контекст, предпосылки и т.д.\nTask / Trouble Какую проблему увидел кандидат в ситуации, почему охарактеризовал ее проблемой.\nActions Какие действия он предпринял для решения проблемы. Почему именно такие. Нужно задавать больше вопросов с How, Why, Who, которые побуждают к рассказу.\nResults / Roadblocks Каких результатов кандидат достиг своими действиями.\nSelf-apprisal Как оцениает кандидат свои действия и результаты.Какие выводы он делает из сложившегося кейса. Что бы кандидат сделал сегодня иначе, если бы сделал.","title":"Модель S.T.A.R.S. для оценки Soft-Skills"},{"content":"Из википелии:\nТест Тьюринга — эмпирический тест, идея которого была предложена Аланом Тьюрингом в статье «Вычислительные машины и разум» (англ. Computing Machinery and Intelligence), опубликованной в 1950 году в философском журнале «Mind». Тьюринг задался целью определить, может ли машина мыслить.Стандартное звучание закона: «Если компьютер может работать так, что человек не в состоянии определить, с кем он общается — с другим человеком или с машиной, — считается, что он прошел тест Тьюринга»\nЦель теста Тьюринга - определить, может ли машина имитировать поведение человека настолько, что сам человек не поймет, машина перед ним или живой человек.\nЕсть прецедент, когда чат-бот смог пройти этот тест: в 2014 году разработали чат-бот, который \u0026ldquo;научился\u0026rdquo; диалогу на основе твиттер-сообщений. Испытуемые люди в большинстве своем поверили, что перед ними 13-летний подросток, а не машина.\nЗабавно, что тест Тьюринга, фактически, определяет, может ли машина выглядеть как человек, имитировать его поведение через разговор/диалог.\nПри этом Тьюринг был геем, и в 1953 году был осужден за мужеложество. В те времена в Британии гомосексуализм был законодательно запрещен. Тьюринг попал в неприятную ситуацию с юношей-вором, и в итоге вынужден был сознаться в полиции в своей ориентации. Вместо тюрьмы он выбрал химическую кастрацию, и год спустя его тело было найдено с отравлением цианидом. Был ли это суицид - достоверно неизвестно, ибо не нашли посмертной записки или чего-то подобного.\nЭто значит, что Тьюринг был вынужден скрывать свою гомосексуальность и вести себя на публике так, чтобы его приняли за гетеросексуального мужчину. А компьютер, по его тесту, должен был вести себя так, чтобы его приняли за человека. Довольно интересное совпадение.\n","permalink":"https://maximgorbatyuk.github.io/blog/opinion/2019-09-08-thoughts-about-test-of-turing/","summary":"Из википелии:\nТест Тьюринга — эмпирический тест, идея которого была предложена Аланом Тьюрингом в статье «Вычислительные машины и разум» (англ. Computing Machinery and Intelligence), опубликованной в 1950 году в философском журнале «Mind». Тьюринг задался целью определить, может ли машина мыслить.Стандартное звучание закона: «Если компьютер может работать так, что человек не в состоянии определить, с кем он общается — с другим человеком или с машиной, — считается, что он прошел тест Тьюринга»","title":"Суть теста Тьюринга"},{"content":"Ссылка на видеозапись выступления про обратную связь в компании\nПрезентация\n","permalink":"https://maximgorbatyuk.github.io/blog/videos/2019-09-08-video-conference-feedback-about/","summary":"Ссылка на видеозапись выступления про обратную связь в компании\nПрезентация","title":"Этапы эволюции обратной связи в команде разработки"},{"content":"I am a software .net developer. Mostly doing web development.\nI try to understand the business domain and purposes of a project where I work. It helps me to understand better the essence of the product and continuously improve it.\nI pay much attention to the quality. I build reliable software solutions. Also, I like to share my knowledge and enjoy playing a mentor role.\nI can help you with \u0026hellip; .NET ASP.NET Angular 2+ Clean code Elasticsearch SQL GitFlow Docker Setting up CI/CD Where you can find me LinkedIn Telegram channel Getmentor.dev profile Solveri.io profile Medium.com GitHub GitLab My CV Here you will find my CV, if you need it\nView CV\n","permalink":"https://maximgorbatyuk.github.io/about/","summary":"about","title":"About me"}]