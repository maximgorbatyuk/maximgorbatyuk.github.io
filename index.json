[{"content":"Мне нравится проводить и проходить собеседования. Это прекрасная возможность познакомиться не только с новыми людьми, но и с другими подходами к работе. Какие-то подслушанные практики я применял у себя в проектах, каким-то находил очередное подтверждение, почему они не работают.\nКак интервьюер, я стараюсь сделать собеседование максимально полезным для кандидата. Во-первых, у него не останется чувство, что он отдал энергию впустую. Во вторых, даже если сейчас мы не договоримся, то впечатление о компании и людях у кандидата останется положительным. Такому подходу я следую всю свою карьеру, и я четко помню, почему я стал делать именно так.\nВ моем опыте было два собеседования, которые стали примером для меня:\n Что должно быть в интервью, И чего точно в интервью быть не должно.  Начну с хорошего. Будучи джуном, я старался проходить технические собеседования раз в два-три месяца и иногда даже не только в казахстанские компании. Договорился о собесе с в российскую продуктовую компанию, которая занимается развитием e-commerce портала. Собеседование шло плохо: мне задавали вопросы о том, как работает .net и CLR под капотом. На тот момент я не знал этого, так как фокусировался не на технике, а на бизнес-составляющей проектов: не “как правильно написать”, а “зачем именно это пишем, а не другое”. После собеседования я спросил интервьюера, как он оценивает мои знания. В ответ он разнес меня в пу и прах, сказав, что я - слабый специалист. Я попросил о рекомендациях и спросил, какую литературу мне нужно читать, чтобы стать профессионалом. И в ответ получил список книг и лекций. Из этого интервью я вынес для себя три вывода:\n Кандидату нужно давать рекомендации для того, чтобы он улучшил свои знания. Говорить напрямую кандидату любого уровня, что он слабый специалист, нельзя. Даже если в моменте разговор будет конструктивным, осадок все равно останется, причем по отношению к компании, а не к лично мне. Пренебрегать книгами по программированию нелья. Несмотря на то, что версии языков идут вперед, в книгах закладываются базовые систематизированные знания, игнорировать которые никак нельзя.  Второе интервью проходило в местной продуктовой компании. В это время я был все тем же джуном, но уже начавшим читать “CLR via C#” - этакую библию дотнетчика. Встал на путь исправления, иначе говоря.\nКомпания занималась продажами автозапчастей. Офис на краю города, но недалеко от моего дома. Решил откликнуться сам, и меня пригласили на собеседование. Офис мне понравился, он был оформлен в стиле лофт. В центре здания была зона с деревьями, огороженная стеклом и со стеклянной крышей. Мини-оранжерея с зелеными растениями в центре хайтек-лофта. Выглядело круто.\nСобеседование началось с разговора с рекрутером обо мне и моем опыте. Потом присоединился начальник отдела программистов и начал задавать вопросы. Он начал с алгоритмов и структур данных, а я поплыл. Буквально после четвертого или пятого вопроса он встал и вышел из кабинета, не попрощавшись. Было крайне неприятно. Рекрутер попыталась сохранить лицо и продолжила задавать свои вопросы, однако продлилось это недолго.\nВыйдя из офиса, я понял, что я на месте этого начальника отдела никогда бы так не поступил. Необходимо проявлять уважение всегда, какого бы уровня кандидат не был. Он тоже, как и вы, потратил свое время, чтобы приехать на встречу, и вы оба - равноправные участники кадрового рынка. Сегодня он интерн, а завтра - лид, который собеседует тебя на проект. Если я понимаю с самого начала, что кандидат не подходит на позицию, то я мягко завершаю интервью и все равно даю возможность ему задать свои вопросы. Мне важно, чтобы впечатление осталось положительное.\nС тех пор прошло несколько лет и несколько десятков интервью, где уже я оценивал уровень кандидата. Думаю, что именно эти два собеседования сформировали то, как я сам провожу их. С тех пор я стараюсь сделать собеседования максимально комфортными и полезными для обоих участников переговоров.\n","permalink":"https://maximgorbatyuk.github.io/blog/employment/2022-01-29-my-worts-interviews/","summary":"Мне нравится проводить и проходить собеседования. Это прекрасная возможность познакомиться не только с новыми людьми, но и с другими подходами к работе. Какие-то подслушанные практики я применял у себя в проектах, каким-то находил очередное подтверждение, почему они не работают.\nКак интервьюер, я стараюсь сделать собеседование максимально полезным для кандидата. Во-первых, у него не останется чувство, что он отдал энергию впустую. Во вторых, даже если сейчас мы не договоримся, то впечатление о компании и людях у кандидата останется положительным.","title":"Худшие собеседования в моем опыте"},{"content":"Хороший баг-репорт – понятный, прозрачный, содержит в себе все, что потребуется для решения проблемы в проекте. Написать такой нетрудно. При составлении важно выложить всю необходимую информацию из своей головы в тикет в Jira, и тогда вопросы разработчики не будут спрашивать “очевидные вещи”.\nБаг-репорты составлять — тоже навык, который нужно развивать. Уметь донести свою мысль до другого человека - полезный навык не только для тестировщиков, но и разработчиков тоже. Проектные менеджеры — разработчикам, фронтендеры — бэкендерам, тестировщики — всем. Если junior-разработчик хочет перейти на следующую ступень карьеры, то он ему пригодится этот навык. Для сеньоров он must-have.\nЗа время работы на проектах разной степени сложности я понял, что хороший баг-репорт несложно оформить, в нем достаточно двух вещей: шаги для воспроизведения и Expected/Actual результаты. Остальная информация опциональна.\nЧтобы создать баг-репорт, который быстро пофиксят, нужно:\n Описать шаги воспроизведения. Начиная от начала авторизации в тестируемом портале и до получения ошибки. Данные для авторизации, Переход по ссылкам, клик по кнопке, ввод таких-то данных, вот это вот все должно быть упомянуто. Написать “Ожидаемый результат / Expected”. Написать “Текущий результат / Actual” Убедиться, что ни один шаг не был пропущен и не нужно будет никому пояснять что-либо. Очевидные вещи надо проговаривать/прописывать. Что очевидно для одного, не очевидно для другого. И наоборот. Если кажется, что “ну вот это они точно и так знают как делать”, то перечитай пункты 4 и 5  В итоге, если баг-репорт был оформлен верно, то:\n Сокращается время на фикс. Твои коллеги не тратят свое время и мыслетопливо на прояснение деталей. Автору баг-репорта не задают уточняющие вопросы в личку. Особенно неприятно получать вопросы поле окончания рабочего дня, не так ли? Автор не становится блокером для коллег. Автору не приходится объяснять что-либо второй раз.  А если уточняющие вопросы все же появились, то необходимо записать эту информацию в баг-репорт. Тогда обсуждение не потеряется из виду и будет сохранено в общей проектной документации.\nТаким образом, хороший баг-репорт будет выглядеть примерно так:\nTitle: There is no password security requirement error on the register page Steps to reproduce: 1. Go to https://example.com/regitster 2. Type login: \u0026#39;Vasya\u0026#39;, password: \u0026#39;qwerty\u0026#39; 3. Click on the Submit button Expected: Backend validation error, 400 http status response. Message is \u0026#34;Your password must contain at least 1 capital char and 1 digit\u0026#34; Actual: The user account is being created. No backend errors appear Таким образом, любой разработчик команды может взять задачу в разработку, даже если не он писал формы авторизации. Понятен ожидаемый результат и нет необходимости обращаться за разъяснением к оригинальной задаче разработки формы регистрации, автору или бизнес-аналитику. Может показаться, что я хочу переложить работу по прояснению деталей с плечей разработчиков на тестировщиков, ведь ожидаемый результат разработчик сам может посмотреть в требованиях. Однако автор баг-репорта уже знает, как нужно, и может сразу написать об этом, а потом на ретроспективе уже команда обсудит, как не допускать повторений таких случаев.\n","permalink":"https://maximgorbatyuk.github.io/blog/development/2021-12-28-how-to-create-effective-bug-reports/","summary":"Хороший баг-репорт – понятный, прозрачный, содержит в себе все, что потребуется для решения проблемы в проекте. Написать такой нетрудно. При составлении важно выложить всю необходимую информацию из своей головы в тикет в Jira, и тогда вопросы разработчики не будут спрашивать “очевидные вещи”.\nБаг-репорты составлять — тоже навык, который нужно развивать. Уметь донести свою мысль до другого человека - полезный навык не только для тестировщиков, но и разработчиков тоже. Проектные менеджеры — разработчикам, фронтендеры — бэкендерам, тестировщики — всем.","title":"Как создавать эффективные баг-репорты"},{"content":"Let’s imagine you have a web application built as a monolith and you want to introduce microservices. Or you may have several clients connected to your backend solution: mobile app, SPA, devices, etc. One of the first tasks that you have to solve is integrating authentication and authorization. In my opinion, one of the simplest ways is integrating SSO (Single-Sign-On system) into your application.\nThere is an open-source ready-to-use product IdentityServer4 which implements OpenID Connect and OAuth2.0 frameworks. The solution is built using .NET core 3.1 and is easy to modify according to your business rules. Also, it is an out-of-box solution ready to deploy. Therefore, you don’t have to develop and set up a custom authentication system.\nVersions of IdentityServer There are two versions of the IS application: free-to-use open-source IS4 and commercial IdentityServer5. According to documentation, IS5 is free for development and testing, but you should pay for using it on production. IS4 is declared as a legacy system, but it is free to use on production.\nEven though all new features are developing in the commercial IS5, you may start to go live with free IS4. The IS4 system contains all staff required by Open Id connect and OAuth2.0 frameworks.\nHow to integrate the IS4 Downloading the IS4 solution from the GitHub To integrate the IS4 into your system, you just need to download it from samples. I’d suggest you choose my extended solution but you still may choose one of the original ones.\nMy version contains the following:\n The IS4 solution without any storage. You are free to integrate your favorite one. Several samples of clients including OAuth 2.0 debugger Custom profile service where you can write your code related to issuing claims  Feel free to consider my repository as an instruction to integrate the IS4 from the original repository.\nSetup your IS4  Add your own Scope to restrict access to different APIs (like here). If your application has now domain segregation with different scopes, you may not use the custom scope or just use a single one. Here I use “core.api” as a key of the scope, but you may choose any other name. Add clients of the IS4 (like here). To proof the concept, I am adding a web-browser-debug client like this. The client allows me to see claims which are being encrypted in the JWT token. Also, don’t forget to mention your own scope in the clients’ allowed scopes property (like here). Optional Add external login providers like Google authentication if necessary. Here I have a sample code that integrates the Google. Also, the Facebook, GitHub, ActiveDirectory, etc, providers are available to be used. Optional In this Custom profile service you may change claims which will be used to prepare a JWT token for clients.  Setup your Web API application Here I will give you an example using ASP.NET core Web API. I believe it is easy to find tutorials of integrating OAuth2.0 authentication services for other web frameworks for other programming languages.\n Add Bearer authentication with the IS4 URL address (like this). Optional Add scope authorization to restrict accesses (like this).  If you do step 2, and your Client without the scope does a web request, it will get a 403 error.\nSetup debug client like OAuth 2.0 debugger  Add the client like this. Go to URL below:  https://localhost:6001/connect/authorize?response_type=id_token\u0026amp;client_id=client\u0026amp;client_secret=secret\u0026amp;redirect_uri=https%3A%2F%2Foauthdebugger.com%2Fdebug\u0026amp;scope=openid%20email%20profile\u0026amp;nonce=wnpup8t4v2b ","permalink":"https://maximgorbatyuk.github.io/blog/development/2021-12-26-how-to-integrate-identity-server/","summary":"Let’s imagine you have a web application built as a monolith and you want to introduce microservices. Or you may have several clients connected to your backend solution: mobile app, SPA, devices, etc. One of the first tasks that you have to solve is integrating authentication and authorization. In my opinion, one of the simplest ways is integrating SSO (Single-Sign-On system) into your application.\nThere is an open-source ready-to-use product IdentityServer4 which implements OpenID Connect and OAuth2.","title":"How to integrate Identity Server into your web application"},{"content":"There is a recommendation: to write a postfix \u0026ldquo;\u0026hellip;Async\u0026rdquo; at the end of async methods in .NET. I always follow this rule, and also I recommend everyone to do this as well as I do. In this article, I want to share my thoughts on why this is an important rule when you deal with asynchronous programming.\nYou can call the async method without await and it will not throw any error In my opinion, it is a problem that .NET allows us to call an asynchronous method without the await keyword and without awaiting a result as well. and no compile error will be thrown. Also, a runtime error will not be thrown as well. Therefore, you should mark async methods with \u0026ldquo;\u0026hellip;Async\u0026rdquo; postfix to help yourself and your teammates not miss possible errors in the production.\nYou read the code not only with IDE That\u0026rsquo;s maybe a surprise for junior developers, but members of their team read the code not only with IDE. Github, git merge tool, etc are used to do it as well. There is no IntelliSense or warning from your programming language. Then, if you left the async method without Async postfix and passed it to code review, your colleague might be tired and miss the method to the production. Of course, it would be his mistake, but I hope you work for the project\u0026rsquo;s success, not only for moving Jira tickets from the \u0026ldquo;Development\u0026rdquo; column to \u0026ldquo;Code review\u0026rdquo; and that\u0026rsquo;s all you do on the project. Just help your senior - do not do code reviews harder than they should be.\nIt explicitly says that the method is asynchronous It might sound like obvious advice, but it is important to write explicit code which is not ambiguous. The code is the thing that you should not guess about. The code is something that is supposed to be explicit and to show its intention. In my opinion, the async approach is one of the intentions.\nConclusion If you don\u0026rsquo;t mind about leaving \u0026ldquo;..Async\u0026rdquo; postfix at the end of the async methods you write, please, change your mind. That makes code review sessions easier, and your code more transparent and clean.\n","permalink":"https://maximgorbatyuk.github.io/blog/development/2021-12-12-do-not-forget-about-async/","summary":"There is a recommendation: to write a postfix \u0026ldquo;\u0026hellip;Async\u0026rdquo; at the end of async methods in .NET. I always follow this rule, and also I recommend everyone to do this as well as I do. In this article, I want to share my thoughts on why this is an important rule when you deal with asynchronous programming.\nYou can call the async method without await and it will not throw any error In my opinion, it is a problem that .","title":"Do not forget about Async postfix"},{"content":"За время своей карьеры я провел много техничесикх собеседований. Почти в каждой компании я выступал в роли технического интервьюера. Довелось и быть тем, кто аппрувит кандидата на дальнейший этап найма. Мне нравится этот процесс, он позволяет держать теоретические знания в тонусе.\nКогда я сам выступаю в роли кандидата, я обращаю внимание на процесс интервью. В результате наблюдений я составил для себя несколько аспектов, которые позволяют сделать мне вывод о кандидате.\nКак для интервьюера, для меня важно\u0026hellip; \u0026hellip;умение говорить Теоретическая подготовка специалиста – это необходимая база, однако мне грустно, когда человек не умеет доходчиво и кратко рассказать об опыте. Во время митингов при планировании и ретро этот же спец будет так же неумело высказывать точку зрения, и в итоге качество встреч снизится.\nУмение говорить – это лаконичность, емкость содержания, отсутствие слов-паразитов. Все эти качества речи будут полезны не только при митингах, но и во время менторства и на встречах уже с заказчиками и pre-sales встречах. Более того, без умения говорить вряд ли получится пойти в тимлиды и/или проектные менеджеры, если у специалиста есть такое желание.\n\u0026hellip;встречные вопросы во время собеседования Когда кандидат не знает ответ на заданный вопрос, то мне интересно услышать, что скажет кандидат. Задаст ли он вопрос \u0026ldquo;а как тогда\u0026rdquo;, попытается ли рассуждать на эту тему? Если собеседник интересуется правильным ответом, то это хороший знак \u0026ndash; специалист старается покрыть отсутствие знаний. Он, скорее всего, открыт к новому, готов обсуждать спорные вопросы.\n\u0026hellip; вопросы после сессии проверки знаний Принято, что если кандидат пришел на собеседование, то он заинтересован в позиции. Даже если для кандидата это спортивное прохождение собеседований, то все равно он заинтересован в интервью. В конце интервью кандидат задает вопросы техническому спецу, который уже работает в компании. Если кандидат не спрашивает ничего или спрашивает нерелевантные вопросы, то это – желтая карточка. В моем опыте был такого рода вопрос: \u0026ldquo;А почему вы не уезжаете зарубеж работать?\u0026rdquo;. Ответ на вопрос точно не о проекте и зависит от множества личных факторов. Что ответ на этот вопрос может быть кандидату – не понятно.\nТакже странно задавать вопрос \u0026ldquo;прошел я или не прошел\u0026rdquo;. Смысла спрашивать это нет – интервьюер не ответит честно. Во-первых, его задача – определить уровень знаний, а решение о том, подходят ли знания под проект или нет, принимают другие люди. Во вторых, для составления фидбека интервьюеру необходимо время. Я обычно беру небольшой перерыв после собеседования, а потом уже пишу отзыв о кандидате. Это позволяет мне расслабиться и прокрутить некоторые моменты в памяти за чашкой чая или кофе.\n\u0026hellip;рассуждения вслух Цель любого собеседования – познакомиться друг с другом и рассказать о себе. За час-полтора общего времени интервью сложно составить объективную оценку друг о друге. На мой взгляд, рассуждения вслух позволяют дать о себе более глубокое представление.\nРассуждая вслух, кандидат показывает умение думать и делать выводы. Умение размышлять может быть подходящим под проект или команду или не подходящим, главное – чтобы его показали. Интервьюер уже определит, насколько хорошо кандидат подходит команде. \u0026ldquo;Закрытый\u0026rdquo; кандидат никакого представления о себе не дает, и сделать выводы об его уровне знаний становится сложно.\nВ заключение У интервьюера нет возможности заглянуть в голову кандидату. Интервьюер делает оценку опыта только полагаясь на услышанное и увиденное. Если собеседование проходит онлайн и без веб-камер, то только по рассказу можно судить об опыте кандидата. Если кандитат не делает предположений, не задает уточняющих вопросов и дает односложные ответы, то интервьюеру будет сложно составить хороший фидбек.\nБолее того, кандидат должен понимать это и стремиться раскрыть себя максимально глубоко, если заинтересован в собеседовании. Если же этого понимания нет, то собесы для такого кандидата вряд ли будут оканчиваться успехом.\n","permalink":"https://maximgorbatyuk.github.io/blog/employment/2021-11-02-tech-interview-essentials/","summary":"За время своей карьеры я провел много техничесикх собеседований. Почти в каждой компании я выступал в роли технического интервьюера. Довелось и быть тем, кто аппрувит кандидата на дальнейший этап найма. Мне нравится этот процесс, он позволяет держать теоретические знания в тонусе.\nКогда я сам выступаю в роли кандидата, я обращаю внимание на процесс интервью. В результате наблюдений я составил для себя несколько аспектов, которые позволяют сделать мне вывод о кандидате.","title":"На что стоит обратить внимание во время технических интервью"},{"content":"Как часто стоит менять проекты? Какой период времени смены работы можно считать некой нормой? На эти рассуждения меня натолкнуло обуждение в одном из чатов разработчиков в моей стране. Вопрос действительно интересный, его стоит обсудить.\nА зачем воообще менять проект? Казалось бы, зачем нужно что-то менять? Зачем менять работу, если все устраивает? Каждый выбирает сам, но для себя я решил: не только я отдаю что-то проекту, но и проект – мне. Когда я рассматриваю новые проекты, то я пытаюсь найти нечто, чему я могу научиться. Есть афоризм: нужно быть самым глупым в комнате. Такой же аналогией я руководствуюсь и при смене проекта. Нужно искать людей, у которых можно и нужно научиться чему-то новому для себя.\nСмена проекта имеет смысл для специалистов, которые только в начале своей карьеры. Для состоявшихся разработчиков для смены работы есть и другие причины: интересная предметная область, другой стек технологий, опыт работы в распределенной команде либо новая роль в команде. Задуматься о новом проекте стоит, когда ты чувствуешь, что делаешь изо дня в день рутину и ничто тебя не может удивить. Работа должна приносить удовольствие\nКак часто стоит менять работу? Время, за которое можно освоиться в новом окружении, зависит от человека. За свою карьеру я сменил 6 проектов, в последнее время веду два параллельно. Так получалось, что я менял работу раз в полтора-два года, и каждый раз я сам начинал искать что-то новое для себя. Думаю, что ориентироваться на такой период всегда не стоит, так как от позиции разработчика зависит и уровень его ответственности, и время, за которое он сможет реализовать себя. Для разных грейдов специалистов – разные сроки смены работы. Смена проекта – это полезный стресс погружения в новые для себя условия и команду, и это только положительно сказывается на карьере. В обратном случае, когда человек не меняет проекты годами, я могу предположить, что человек конформист и желает избегать подобного стресса.\nЧастая смена работы – это подозрительно, на мой взгляд. Если специалист меняет компании раз в полгода, то это может быть признаком того, что:\n человек не умеет выбирать компании/проекты и быстро уходит, так как ошибся с выбором человека \u0026ldquo;просят\u0026rdquo; уйти, так как он не сумел влиться в команду человек импульсивен и готов легко оставить начатое дело.  Конечно, судить только лишь по этому факту о человеке не стоит, но важно понимать, что нет дыма без огня.\nЕсли же специалист подолгу сидит на одном проекте, то это тоже должно стать звоночком для тимлида при собеседовании. Если специалист сидит несколько лет, не меняя ни проекты, ни компанию, ни свой грейд, то он, скорее всего, не заинтересован в развитии своих навыков и карьеры. При этом он может вполне успешно выполнять свои обязанности. Люди бывают разные, как и потребности в команде, поэтому такой спецаилист вполне может вписаться в вашу команду. Я же при собеседованиях отдам предпочтение другим кандидатам, которые стремятся к углублению своих познаний в разработке.\nЕсли разработчик давно работает в компании, которая предоставляет аутсорс/аутстафф услуги заказчикам, то я смотрю на сроки смены проекта. Если же человек \u0026ldquo;сидит\u0026rdquo; в одной продуктовой компании долго, то это повод задуматься для меня. Наблюдал ситуации, когда люди в продуктовой компании для удержания своего места\nJunior – 1 год Джуном я бы назвал специалиста, у которого есть 1-2 года коммерческой разработки. Для них менять проект приемлемо раз в год. Если я вижу, что джун меняет компании чаще, то это повод задуматься. Найм спеца стоит времени и денег, и может быть стоит остановить свой выбор на другом кандидате. С другой стороны, молодой специалист не всегда сумеет сделать верный для себя выбор, и поэтому только спустя время он может понять, что ошибся с проектом и командой. Важно помнить об этом тоже.\nMiddle – 1.5-2 года Если миддл меняет проекты раз в полтора-два года, то я спокойно отнесусь к этому. За полтора года вполне можно и освоиться в команде, и получить достаточный опыт для своей карьеры. На этом уровне умение выбирать новые проекты для себя уже должно быть развито сильнее, чем у джуна, так что более частая смена работы подозрительна.\nSenior – 2-3 года Для сеньорских позиций нормой я бы рассматривал сроки от двух лет до трех даже. Уровень ответственности, возлагаемый на сеньора, предполагает не просто разработку и перемещение тикетов из статуса TODO в DONE, но и построение новых процессов, и влияение на качество разработки проекта. От сеньора я жду и ответственность за ведение какого-то модуля в системе, и менторинг коллег с меньшим опытом. Следовательно, результат работы сеньора будет наблюдаться только спустя время, а не через две недели спринта. Более того, я жду, что сам специалист понимает это и наблюдает за примененными изменениями. Если же разработчик считает, что \u0026ldquo;сейчас запилим по-быстрому, а там хоть трава не расти\u0026rdquo;, то это я характеризую как красный флаг к тому, чтобы его нанять.\nЕсли специалист сидит дольше трех лет без смены роли в команде, то стоит внимательно изучить список его достижений. Возможно, он занимался внедрением принципиально новых технологий иил процессов разработки в проект и поэтому ему важна была обратная связь.\nTeamlead – 2+ лет Пока что у меня мало опыта в собеседовании на позиции тимлидов, поэтому я руководствуюсь собственным опытом и опытом своих руководителей. Тимлид – это тот, кто умеет запускать проекты, настраивать процессы разработки и собирать команду из людей с теми компетенциями, которые требуются для решения поставленной задачи. Эффективность примененных решений тимлида также можно наблюдать только на длинной дистанции, поэтому смена проекта раньше двух лет и раньше окончания проекта может говорить о том, что тимлиду обратная связь не так важна.\nЗасидевшийся тимлид в одном проекте или продуктовой компании – повод посмотреть на его достижения и развитие проекта. Так же, как и сеньор, тимлид может активно заниматься трансформацией программы либо процессов разработки, значит и времени у него это могло занять больше. Отношение к эффективности работы проекта в продакшне – показатель профессионализма менеджера.\nProject Manager – 2+ лет Эффективность работы проектных менеджеров можно оценить только на длительных дистанциях, на мой взгляд. Эффективность освоения бюджета, фидбек и лояльность заказчиков, текучка специалистов в проекте – все это показатели работы менеджера. Частые смены работы – гораздо более яркий повод задуматься над тем, чтобы перейти к следующему кандидату. Как и в случае сеньоров и тимлидов, специалист может работать по принципу \u0026ldquo;запустим, а там хоть потоп\u0026rdquo;. Такой подход к работе точно приведет к уходу закзачиков из компании.\nНе только цифры Цифры – это интересно, но это лишь повод поговорить. Поговорите с человеком и обсудите его опыт и достижения. Если разработчику нечем похвастаться, кроме количеством лет на одном проекте, то стоит перейти к следующему кандидату. А если разработчик достигает многого в короткие сроки и это можно наблюдать извне, то нанимайте его как можно скорее. Только не забудьте обсудить, как вы можете помочь ему улучшить навыки и как он может помочь улучшить ваш проект.\n","permalink":"https://maximgorbatyuk.github.io/blog/employment/2021-09-05-how-much-time-to-spend-on-the-project/","summary":"Как часто стоит менять проекты? Какой период времени смены работы можно считать некой нормой? На эти рассуждения меня натолкнуло обуждение в одном из чатов разработчиков в моей стране. Вопрос действительно интересный, его стоит обсудить.\nА зачем воообще менять проект? Казалось бы, зачем нужно что-то менять? Зачем менять работу, если все устраивает? Каждый выбирает сам, но для себя я решил: не только я отдаю что-то проекту, но и проект – мне. Когда я рассматриваю новые проекты, то я пытаюсь найти нечто, чему я могу научиться.","title":"Какой период работы над одним проектом считать нормой?"},{"content":"Что значит быть тимлидом Таким вопросом задаются многие разработчики: и те, кто хочет стать тимлидом, и те, кто уже. После полутора лет работы в качестве тимлида у меня сформировалось некое понимание своей роли в проекте и компании.\nНа мой взгляд, главная и едва ли не единственная задача тимлида на проекте – сделать максимально возможное, чтобы поставить продукт вовремя. Звучит легко, однако за этой формулировкой стоит такой огромный спектр задач, что можно легко запутаться. Попробую раскрыть тему, что обычно я делаю для того, чтобы поставить продукт вовремя. Что можно включить в перечень задач, достигая которые выполняется главная?\nУстановить начальные процессы разработки Процесс разработки – это протокол взаимодействия между людьми в тех или иных ситуациях. Стратегия ведения веток в гите, статусы тикетов в джире и логика перехода из одного в другой, разграничение ответственностей каждого из участников проекта и группы разработки в целом и т.д. Сделать процессы понятными для всех важно, чтобы каждый понимал, что делать в той или иной ситуации. Я руководствуюсь собственным набором best practice:\n брэнч-стратегия – Gitflow канбан либо scrum в качестве методики управления проектом прописанный свод правил \u0026ldquo;что делать, если\u0026hellip;\u0026rdquo;. В качестве примера можно взять этот документ созданный репозиторий в GitLab/Github/Azure/\u0026lt;your repo system\u0026gt; с \u0026ldquo;фундаментом\u0026rdquo; проекта настроенный Continious Integration, который проверяет сборку основных веток и мердж-реквесты настроенные проверки синтаксиса и статический анализатор кода  Следить за установленными процессами разработки Недостаточно только установить процессы, необходимо также понимать, работают они или нет. Необходимо отслеживать прогресс работы и анализировать, как влияют принятые процессы и правила на него. Баги в проекте отражают реальную картину. Баг не может возникнуть из ничего, и его причина может сказать многое: недопонимание, непрозрачные требования, неописанные правила взаимодействия между участниками. Главное – никогда не упускать из виду процессы.\nАдаптировать и адаптироваться Best practice – это рекомендации, а не жесткие правила. Если что-то для вашей команды не работает, то нужно либо адаптировать процессы, либо адптироваться самому. Адаптировать процессы важно, потому что рекомендации описаны слишком универсально, чтобы могли быть применены без изменений к любой команде. Важно понять, как именно поменять процесс, а для этого необходимы анализ и ретроспективы.\nАдаптировать процессы может быть не так сложно, как адаптироваться самому. Универсальные практики были обкатаны многими командами, раз их рекомендуют применить в первую очередь. Если какая-то практика не работает для вас, то могут быть причиной устаревшие взгляды людей, кто принимает решение в команде. Для того, чтобы понять, что делать, нужно высокое умение рефлексировать.\nЕсли подытожить На мой взгляд, основная задача тимлида - это не тикеты в Jira двигать, а делать так, чтобы его команда комфортно могла делать это вместо него и ничто ей не мешало. Часто тимлид берет задачи в разработку, но нужно помнить, что такое стиот делать только в том случае, когда в тот момент времени команда перформит на достаточно высоком уровне.\n","permalink":"https://maximgorbatyuk.github.io/blog/management/2021-08-18-who-is-teamlead/","summary":"Что значит быть тимлидом Таким вопросом задаются многие разработчики: и те, кто хочет стать тимлидом, и те, кто уже. После полутора лет работы в качестве тимлида у меня сформировалось некое понимание своей роли в проекте и компании.\nНа мой взгляд, главная и едва ли не единственная задача тимлида на проекте – сделать максимально возможное, чтобы поставить продукт вовремя. Звучит легко, однако за этой формулировкой стоит такой огромный спектр задач, что можно легко запутаться.","title":"Главная задача тимлида на проекте"},{"content":"If you work with Azure infrastructure and have to integrate message queues. It sounds quite simple: just create Azure Resource, write some code and then be happy! But what would you say if the resources are limited? What will you do if there are several teammates in your team, and all of you have to debug queues at the same time?\nWell, I know a minor life hack for my teams. I create an InMemory Message queue engine for local development and use Azure Service Bus (or any other external MQ engine) only for remote environments. This solution allows me to not think about paid resources or concurrency access to the single development queue.\nDevelopers just create business logic and do not care about Azure Access or availability. I think the InMemory engine should not become an issue. Most of the business tasks do not depend on the technical implementation of the queue engine. My opinion that they should not do it at all. When you have to develop a technical algorithm that uses, for example, some Kafka or RabbitMQ features, you will debug it using external resources. But in my opinion, business logic should not depend on either RabbitMQ or Kafka, or Azure Service Bus. When you write unites, you do the same, aren’t you? Therefore the logic can use the InMemory solution during the local development.\nSo, let me show my solution. If you meet a similar task, the solution could be helpful for you. As an example, I will use an email distribution service (EDS) that accepts emails via Queues and then sends them. My apps publish email content, my EDS consumes it and sends using the SMTP server.\nTherefore, we need to develop the following items:\n Settings for our application Queue message publisher Queue consumer.  Using InMemory Queues engine InMemory Setup I will use the MassTransit library to make the solution simpler. Here is a code that sets the MassTransit:\n// IServiceCollection services;  services.AddMassTransit(x =\u0026gt; { x.AddConsumer\u0026lt;MassTransitEmailSendConsumer\u0026gt;(); x.UsingInMemory((context, cfg) =\u0026gt; { cfg.TransportConcurrencyLimit = 100; cfg.ConfigureEndpoints(context); cfg.ReceiveEndpoint(_configuration.EmailMessageTopic.ToString(), e =\u0026gt; { e.ConfigureConsumer\u0026lt;MassTransitEmailSendConsumer\u0026gt;(context); }); }); }); services.AddMassTransitHostedService(); services.AddScoped\u0026lt;IMessageBroker, InMemoryBrokerPublisher\u0026gt;(); Here I use some config values. The class represents MQ settings and is used by both queues: InMemory and Azure Service Bus.\nusing Microsoft.Extensions.Configuration; namespace YourNamespace { public class MessageBrokerSettings { public NonNullableString Connection { get; } public NonNullableString EmailMessageTopic { get; } public NonNullableString HealthCheckConnection { get; } public NonNullableString HealthCheckTopic { get; } public MessageBrokerSettings(IConfiguration configuration) { var section = configuration.GetSection(\u0026#34;Azure\u0026#34;).GetSection(\u0026#34;ServiceBus\u0026#34;); Connection = new NonNullableString(section[nameof(Connection)]); EmailMessageTopic = new NonNullableString(section[nameof(EmailMessageTopic)]); HealthCheckConnection = new NonNullableString(section[nameof(HealthCheckConnection)]); HealthCheckTopic = new NonNullableString(section[nameof(HealthCheckTopic)]); } } } NonNullableString is a special class that makes me sure that the value inside will never be null. Some kind of ValueObject from DDD, you know. When I invoke .ToString() method, the class returns me a value of the config. Otherwise, it will throw an exception. The code of the class you may see at my GitHub gist: NonNullableString.cs.\nInMemory Publisher Now we have created a publisher and consumer. The email publisher will use IPublishEnpoint that is given us by MassTransit library:\nusing System.Threading.Tasks; using MassTransit; using Microsoft.Extensions.Logging; namespace YourNamespace { public class InMemoryBrokerPublisher : BrokerPublisherBase { private readonly IPublishEndpoint _publish; public InMemoryBrokerPublisher(IPublishEndpoint publish, ILogger\u0026lt;InMemoryBrokerPublisher\u0026gt; logger) : base(logger) { _publish = publish; } protected override Task PublishInternalAsync\u0026lt;T\u0026gt;(string topicName, T message) { return _publish.Publish(message); } } } The BrokerPublisherBase is a base class and does not depend on queue implementation. The class is inherited by both queue-related publishers as well. It implements a simple IMessageBroker.\nusing System.Threading.Tasks; namespace YourNamespace { public interface IMessageBroker { Task PublishAsync\u0026lt;T\u0026gt;(string topicName, T message) where T : class; } } This interface gives the other business logic an endpoint to publish any message.\nInMemory Consumer We will use MassTransit’s ConsumerBase interface for InMemory consumers. Here is a content of the MassTransitEmailSendConsumer:\nusing System.Threading.Tasks; using MassTransit; using Microsoft.Extensions.Logging; namespace YourNamespace { public class MassTransitEmailSendConsumer : ConsumerBase\u0026lt;EmailMessage\u0026gt; { private readonly IEmail _email; protected override async Task ConsumeAsync(ConsumeContext\u0026lt;EmailMessage\u0026gt; context) { await _email.SendAsync(context.Message); Logger.LogDebug(“Email sent”); } public MassTransitEmailSendConsumer(ILogger\u0026lt;MassTransitEmailSendConsumer\u0026gt; logger, IEmail email) : base(logger) { _email = email; } } } IEmail is my business logic interface who is responsible for sending emails. The content of the class does not related to the article subject, and that’s why I don’t give a content of the class. The MassTransitEmailSendConsumer inherits from my own ConsumerBase.cs class implementing MassTransit’s IConsumer\u0026lt;T\u0026gt;.\nNow our ASP.NET core app could work with Message Queues using only memory. Let’s continue with Azure services.\nUsing Azure Service Bus queues I will not tell you about how to create an Azure Service Bus (ASB) using portal.azure.com. Here is a tutorial made by Microsoft. Let’s assume that we have already got a connection string of the Service Bus. How to get it, please read the tutorial from the MS above.\nI have created one queue for emailing and a special topic for azure health check. If you don’t need the health-check, you may create only needed queues.\nAzure SB Setup First, we should set up our application to work with the ASB.\n// IServiceCollection services; // MessageBrokerSettings configuration;  services.AddHostedService\u0026lt;AzureBrokerEmailConsumerBackService\u0026gt;(); services.AddScoped\u0026lt;IMessageBroker, AzureServiceBusPublisher\u0026gt;(); services .AddHealthChecks() .AddAzureServiceBusTopic( connectionString: configuration.HealthCheckConnection.ToString(), topicName: configuration.HealthCheckTopic.ToString()); My app’s appsettings.json file contains the following values:\n“MessageBroker”: { “Connection”: “Endpoint=sb://yournamespace.windows.net/;SharedAccessKeyName=email;SharedAccessKey=awesomesecret”, “EmailMessageTopic”: “email-message-queue”, “HealthCheckConnection”: “Endpoint=sb://yournamespace.windows.net/;SharedAccessKeyName=healthcheck;SharedAccessKey=awesomesecret”, “HealthCheckTopic”: “azuretopic” }, “UseInMemoryMessageBroker”: true, MessageBroker section is being used by MessageBrokerSettings class. azuretopic value is a service name of the topic and is used by Health-check library.\nAzure SB Publisher The ASB accepts a string as the queue message, therefore we have to serialize a message. I use JSON format for the serialization. Here is a code of my publisher:\nusing System.Threading.Tasks; using Azure.Messaging.ServiceBus; using Microsoft.Extensions.Logging; using Newtonsoft.Json; using Services.Infrastructure.Azure; namespace YourNamespace { public class AzureServiceBusPublisher : BrokerPublisherBase { private readonly MessageBrokerSettings _config; public AzureServiceBusPublisher(MessageBrokerSettings configuration, ILogger\u0026lt;AzureServiceBusPublisher\u0026gt; logger) : base(logger) { _config = configuration; } protected override async Task PublishInternalAsync\u0026lt;T\u0026gt;(string topicName, T message) { // create a Service Bus client  await using var client = new ServiceBusClient(_config.Connection.ToString()); ServiceBusSender sender = client.CreateSender(topicName); // create a message that we can send  // send the message  await sender.SendMessageAsync( new ServiceBusMessage(JsonConvert.SerializeObject(message))); } } } Please pay attention that the class above uses BrokerPublisherBase as parent. We create ServiceBusClient for each invocation of the class, and this way is recommended by Microsoft.\nAzure SB Consumer Consuming the SB queue message is not as simple as publishing. We should create a hosted service to consume messages within the background process of the ASP.NET Core app. We will use a BackgroundService provided by .net library. We will setup Callbacks for messages and possible errors, and then we will start an endless loop to make the background service working during the main app execution.\nusing System; using System.Threading.Tasks; using Azure.Messaging.ServiceBus; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Logging; namespace YourNamespace { public class AzureBrokerEmailConsumerBackService : AzureBusTopicConsumerBase { public AzureBrokerEmailConsumerBackService( ILogger\u0026lt;AzureBrokerEmailConsumerBackService\u0026gt; logger, IServiceScopeFactory scopeFactory, MessageBrokerSettings brokerSettings) : base( logger, scopeFactory, brokerSettings) { } // handle received messages  protected override NonNullableString MessageTopic =\u0026gt; BrokerSettings.EmailMessageTopic; protected override Task MessageHandleInternalAsync(IServiceProvider provider, ServiceBusReceivedMessage message) { string body = message.Body.ToString(); var email = provider.GetRequiredService\u0026lt;IEmail\u0026gt;(); return email.SendAsync(body); } } } The consumer above inherits from our special class AzureBusTopicConsumerBase. This class hides most of the code that sets up the background service. Also, the class creates scope for each received message and then provides an instance of IServiceProvider provider. The provider is useful to get any business service to execute your task:\nusing var scope = ScopeFactory.CreateScope(); await MessageHandleInternalAsync(scope.ServiceProvider, args.Message); // complete the message. messages is deleted from the queue. await args.CompleteMessageAsync(args.Message); Conclusion All you need is a config class that will decide what MQ engine will be used for the running application: the InMemory MQ engine either Azure Service Bus. I have created a helper-class for this purpose, so you can use it as well. Now you have an application that uses Azure Service Bus for staging and production environments and InMemory engine for the local development.\nHope my article was useful for you. Thank you for the reading!\n","permalink":"https://maximgorbatyuk.github.io/blog/development/2021-03-07-asp-net-azure-sb-queues/","summary":"If you work with Azure infrastructure and have to integrate message queues. It sounds quite simple: just create Azure Resource, write some code and then be happy! But what would you say if the resources are limited? What will you do if there are several teammates in your team, and all of you have to debug queues at the same time?\nWell, I know a minor life hack for my teams.","title":"A little life hack when you work with Azure Service Bus and ASP.NET Core"},{"content":"The standard way to accept and return data in ASP.NET world is camel case. But at the current project, I was asked to change my ASP Web API application data processing format. I had to move all the JSON data format from camelCase to snake_case.\nThe reason for it was fact that we had to start developing React application as a SPA of our system. I thought that nothing will be a trouble, but I had met some issues. Now, I want to share with you my solution of how to make your ASP Web API and JSON in the Snake Case be the best friends.\nI have implemented in and published a simple template application. A link to the GitHub repository you can find at the end of the article. All the samples will be written for ASP.NET Core built with .net5.\nChanging request and response JSON formats All we need is to change the property naming policy. The standard one is the Camel Case. Changing it is not a difficult task. You should just create a couple of classes and add some settings to your Startup.cs class.\nFirst, you should create methods to convert property names to the Snake Case. We will use Newtonsoft.Json library feature for the task:\nusing Newtonsoft.Json; using Newtonsoft.Json.Serialization; using Utils.Helpers; namespace YourNamespace { public static class JsonSerializationExtensions { private static readonly SnakeCaseNamingStrategy _snakeCaseNamingStrategy = new SnakeCaseNamingStrategy(); private static readonly JsonSerializerSettings _snakeCaseSettings = new JsonSerializerSettings { ContractResolver = new DefaultContractResolver { NamingStrategy = _snakeCaseNamingStrategy } }; public static string ToSnakeCase\u0026lt;T\u0026gt;(this T instance) { if (instance == null) { throw new ArgumentNullException(paramName: nameof(instance)); } return JsonConvert.SerializeObject(instance, _snakeCaseSettings); } public static string ToSnakeCase(this string @string) { if (@string == null) { throw new ArgumentNullException(paramName: nameof(@string)); } return _snakeCaseNamingStrategy.GetPropertyName(@string, false); } } } Here we have a couple of useful overloaded methods: the first one accepts a model to serialize and the second one accepts a string value to convert. We use library class SnakeCaseNamingStrategy for naming policy settings.\nThen, we should create a class of NamingPolicy for our Web API application. Let\u0026rsquo;s create a class SnakeCaseNamingPolicy:\nusing System.Text.Json; using Utils.Serialization; namespace YourNamespace { public class SnakeCaseNamingPolicy : JsonNamingPolicy { public override string ConvertName(string name) =\u0026gt; name.ToSnakeCase(); } } Here we use the method ToSnakeCase() that we have created in the code above. We use the SnakeCaseNamingPolicy instance in the Startup.cs file in the ConfigureServices method:\npublic class Startup { public void ConfigureServices(IServiceCollection services) { // ...  services .AddMvc() .AddJsonOptions(x =\u0026gt; { x.JsonSerializerOptions.PropertyNamingPolicy = new SnakeCaseNamingPolicy(); }); // ...  } } Now our Web API works with the Snake Case: requests and responses are being transformed into JSON with the Snake Case format.\nBut now we have one minor issue…\nThe image above represents a validation error. The error’s output format is a mix of Camel Case for keys and the Pascal Case for property names. The behavior of output format was not changed even we have applied a custom name policy.\nSo, let’s fix the issue.\nChanging validation output JSON format To change the validation output, we should replace a standard state response factory with our custom one. First, we start from the error class that will form our response:\nusing System; using System.Collections.Generic; using System.Net; using Microsoft.AspNetCore.Mvc; namespace YourNamespace { public class ValidationProblemDetails : ProblemDetails { // 400 status ccode is usually used for input validation errors  public const int ValidationStatusCode = (int)HttpStatusCode.BadRequest; public ValidationProblemDetails(ICollection\u0026lt;ValidationError\u0026gt; validationErrors) { ValidationErrors = validationErrors; Status = ValidationStatusCode; Title = \u0026#34;Request Validation Error\u0026#34;; } public ICollection\u0026lt;ValidationError\u0026gt; ValidationErrors { get; } public string RequestId =\u0026gt; Guid.NewGuid().ToString(); } } The class accepts a list of validation errors to show them in the response. The class inherits from standard ProblemDetails class from Microsoft.AspNetCore.Mvc package. The RequestId property makes it simpler to find the log record in the log view UI system.\nThen, you should replace a standard InvalidModelStateResponseFactory with our custom one. Here is a replacement class:\nusing System.Collections.Generic; using System.Linq; using System.Threading.Tasks; using Microsoft.AspNetCore.Mvc; using Utils.Serialization; namespace YourNamespace { public class ValidationProblemDetailsResult : IActionResult { public async Task ExecuteResultAsync(ActionContext context) { var modelStateEntries = context.ModelState .Where(e =\u0026gt; e.Value.Errors.Count \u0026gt; 0) .ToArray(); var errors = new List\u0026lt;ValidationError\u0026gt;(); if (modelStateEntries.Any()) { foreach (var (key, value) in modelStateEntries) { errors.AddRange(value.Errors .Select(modelStateError =\u0026gt; new ValidationError( name: key.ToSnakeCase(), description: modelStateError.ErrorMessage))); } } await new JsonErrorResponse\u0026lt;ValidationProblemDetails\u0026gt;( context: context.HttpContext, error: new ValidationProblemDetails(errors), statusCode: ValidationProblemDetails.ValidationStatusCode).WriteAsync(); } } } And some setting in Startup.cs should be placed:\npublic class Startup { // ...  public void ConfigureServices(IServiceCollection services) { // ...  services .Configure\u0026lt;ApiBehaviorOptions\u0026gt;(x =\u0026gt; { x.InvalidModelStateResponseFactory = ctx =\u0026gt; new ValidationProblemDetailsResult(); }); // ...  } } Now your validation error output looks like this:\nNow, our ASP.NET Core application accepts and returns JSON with the Snake Case format, and validation error output was changed too. Here is a GitHub repository where you can find the implemented solution.\n","permalink":"https://maximgorbatyuk.github.io/blog/development/2021-02-20-snake-case-and-asp-net-core/","summary":"The standard way to accept and return data in ASP.NET world is camel case. But at the current project, I was asked to change my ASP Web API application data processing format. I had to move all the JSON data format from camelCase to snake_case.\nThe reason for it was fact that we had to start developing React application as a SPA of our system. I thought that nothing will be a trouble, but I had met some issues.","title":"How to accept and return snake case formatted JSON in ASP Web API"},{"content":"На днях посмотрел видео, где автор видео критикует книгу о \u0026ldquo;Мужском движении\u0026rdquo;. Книга, как и само мужское движение, так себе. Видео немного лучше, но тоже среднее, на мой взгляд. Но мой пост не об этом. Больше всего в видео меня зацепил этот момент, где автор берет факт из книги и разносит его в пух и прах, как он сам думает.\n Факт из книги: \u0026ldquo;\u0026hellip; в некоторых регионах России количество разводов достигает более ста процентов от количества заключенных браков\u0026rdquo;.\n  Автор видео: \u0026ldquo;Я - дипломированный специалист по финансовым и фондовым рынкам, который четыре года учил высшую математику, хочу сказать, что это предложение не имеет смысла \u0026hellip;.. как оно может превышать сто процентов? 100% - это единое число.\n Это пафосно выглядит, когда кто-то приводит в качестве аргумента весомости своего мнения свое образование вместо простых и понятных объяснений своих мыслей. И очень даже потешно выглядит, когда автор по-детски ошибается в своем высказывании.\nРазберем же фразу из книги еще раз: \u0026ldquo;\u0026hellip; в некоторых регионах России количество разводов достигает более ста процентов от количества заключенных браков\u0026rdquo;. Как это может произойти и почему я не вижу ничего противозаконного в этом?\nДопустим, в 2018 и 2019 году брак заключили всего 200 пар, а в 2020, только 50. При этом в 2020 году созданные в за прошлые года семьи решили разойтись и подали 100 заявлений ра расторжение брака. В итоге имеем в 2020 году на 50 заключенных браков 100 разводов, что составляет 200% от кол-ва браков. Или другой пример. Молодые люди заключили брак в Москве, затем переехали в Питер и решили там разойтись. Если предположить, что петербуржцы дотошны до математики и в год на 100 браков всегда было 100 разводов, то в этом году москвичи обеспечили им 101 развод, что составило 101%.\nВполне житейские ситуации, которые никак не кажутся какой-то фантастикой, верно? Но вот автор видео почему-то решил, что подумать больше чем пару секунд - это роскошь для него, и в итоге записал на видео свой конфуз.\nКогда собеседник ставит факт наличия диплома о высшем образовании одним из аргументов, то я слышу, как будто он говорит так: \u0026ldquo;Я считаю себя очень умным в данном вопросе и даже в этом не сомневаюсь. И удосуживаться приводить иные факты, относящиеся к предмету спора, я не буду, как будто это ниже моего достоинства\u0026rdquo;. Мне кажется, что желание возвать к своему образованию возникает тогда, когда другие аргументы исчерпаны. И очень печально, если и не было других аргументов.\nЕсли ты компетентен в предмете спора, то ты найдешь простые объяснения своей точки зрения. Нет смысла взывать к своему образованию, если ты не умеешь его применять на практике. И ты опозоришься, если ошибешься после того, как похвастался своей компетентностью.\nВзывание к образованию очень похоже на требование \u0026ldquo;уважать старость\u0026rdquo;. Мол, \u0026ldquo;я тебя старше, уважай меня\u0026rdquo;. Нет, только лишь за то, что ты стар, я не буду тебя уважать больше, чем своего ровесника. Более того, если человеку к его 60/70/80 годам больше нечем хвастануть, кроме прожитых лет, то уважать такого человека не за что. Открыто проявлять неуважение я не призываю, но я буду игнорировать любые советы и слова от таких людей.\nВерить мнению только лишь из-за образования говорящего или уважать человека больше, чем он того заслуживает, только лишь из-за возраста - это все не про реальные уменя и поступки. Слова мало что значат, \u0026ldquo;человек делом красен\u0026rdquo;. Если в следующий раз ты услышишь от своего собеседника фразу наподобие \u0026ldquo;поверь мне, я - инженер\u0026rdquo;, то к его мнению нужно отнестись с большей долей критической оценки.\n","permalink":"https://maximgorbatyuk.github.io/blog/opinion/2020-09-15-knowledge-as-argue-arguement/","summary":"На днях посмотрел видео, где автор видео критикует книгу о \u0026ldquo;Мужском движении\u0026rdquo;. Книга, как и само мужское движение, так себе. Видео немного лучше, но тоже среднее, на мой взгляд. Но мой пост не об этом. Больше всего в видео меня зацепил этот момент, где автор берет факт из книги и разносит его в пух и прах, как он сам думает.\n Факт из книги: \u0026ldquo;\u0026hellip; в некоторых регионах России количество разводов достигает более ста процентов от количества заключенных браков\u0026rdquo;.","title":"Знания сами по себе как аргумент в споре"},{"content":"Недавно я послушал подкаст \u0026ldquo;Идеальный бизнес-аналитик глазами разработчика\u0026rdquo; своего очень хорошего друга. Не со всеми тезисами я был согласен, однако подкаст побудил меня начать обсуждение с участниками подкаста. А потом еще и сам побывал в этом подкасте в качестве гостя.\nЧтобы понять, кто такой \u0026ldquo;идеальный аналитик\u0026rdquo;, важно определиться с набором требований. Что я жду от аналитика как разработчик? А как тимлид? А как менеджер проекта? Сколько людей, столько и мнений, и я тоже хочу порассуждать о том, каков он - этот неуловимый идеальный аналитик.\nИдеальный аналитик\u0026hellip; \u0026hellip;глазами других участников проекта  Аналитик глазами разработчика. Для разработчика важно, чтобы тикет был понятен, краток и емкий. Так разработчик реализует тикет без переделок, тестировщик понимает, как нужно тестировать максимально эффективно, а тимлид и менеджер проекта не страдают. Аналитик глазами тимлида и проектного менеджера. Для тимлида важно, чтобы тикет был реализован вовремя и в соответствии с планом. А это достигается, если тикет прописан максимально качественно. Проектному менеджеру это так же важно, как и тимлиду.  В целом, аналитик идеален тогда, когда результат его работы - тикеты - идеален.\n\u0026hellip;пишет качественные тикеты Но что же за зверь такой, этот \u0026ldquo;качественный тикет\u0026rdquo;? Этот тикет отвечает на все вопросы разработчика, какие бы у него они не возникли. Тут важно соблюсти баланс: тикет можно перегрузить так, что у любого читающего будет возникать вопросов больше, чем их было до его прочтения. Любой тикет должен содержать критерии приемки, которые будут полезны и разработчику, и тестировщику, и тимлиду, и проектному менеджеру. Без них, на мой взгляд, сложно понять, что же хочет увидеть в конечном итоге заказчик функциональности. Если тикет привносит новую функциональность, то критериев приемки будет достаточно.\nЕсли тикет меняет предыдущую функциональность, то лучше всего написать требования в формате \u0026ldquo;было → стало\u0026rdquo;. Нужно не забыть и о ссылках на связанные ресурсы. Так читающий получит возможность прочесть больше контекста измененной бизнес-фичи.\n\u0026hellip;общается эффективно Коммуникация - это важно. Тикеты могут вызывать вопросы, в том числе и глобальные. Но коммуникация, связанная с тикетами должна быть письменной. Почему? Потому что она будет сохранена не только в двух головах, которые завтра могут уйти с проекта, но и в общекомандной тикет-системе. Принятые решения нужно фиксировать письменно, чтобы любой участник проекта мог ознакомиться с ними в любой момент времени. В противном случае мы получаем требования изменений, которые нигде не зафиксированы, никем не прочтены и никем не могут быть утверждены, пусть и задним числом.\nЧитатель может мне возразить, что можно обсудить задачу голосом, а зафиксировать решение письменно. Да, верно. Однако есть одно НО. Ты отвлекаешь аналитика и мешаешь ему продумывать новые фичи. Мало кому из разработчиков нравится, когда его отвлекают. Многие программисты могут рассказать целые тирады о том, как они строят в своих головах сложные абстракции и как легко они рушатся и приходится начинать думать сначала. Окей, это мнение имеет право на жизнь. Но почему же эти же самые разработчики считают, что отвлекать аналитика или тестировщика можно и даже как будто бы поощряется. На мой взгляд, это неверный подход. Аналитик - тоже человек думающий, который выстраивает абстракции в голове и выкладывает их в тикет-систему вместо кода.\nИдеальный аналитик это тоже понимает и в рамках разумного сопротивляется устойчивому желанию разработчиков отвлечь его. В первый раз предупреждение, а во второй - эскалация. Нужно сразу выстраивать грамотную систему коммуникации и пресекать ее нарушения. Иначе говоря, идеальный аналитик не боится идти на рабочий здоровый конфликт с разработчиками во имя блага проекта, а толковый проектный менеджер его поддержит в этом.\n\u0026hellip;отдает все свои усилия проекту Выше я затронул очень важный момент - отдача проекту. Каждый ее участник должен вкладываться в проект максимально. Цель участия в проекте каждого - улучшение этого проекта, и никаких других целей не должно быть.\nМотивация у каждого может быть своя - деньги, знания, расширение компетенций. Но все эти варианты мотивации абсолютно не противоречат цели самого проекта. Я не понимаю людей, которые говорят \u0026ldquo;я на проекте только из-за денег\u0026rdquo;. Мысленно я продолжаю их мысль так: \u0026ldquo;... поэтому вкладываться я не буду, даже и не ждите\u0026rdquo;. А зачем еще человеку говорить подобное? Если ты хочешь денег больше, новых знаний или прокачаться в программной архитектуре, то ты сможешь это реализовать, отдавая проекту все свои усилия. Как тимлида, меня приводит в уныние работа, сделанная вполсилы.\nАналитик тоже может прокачаться в новой для себя бизнес-сфере проекта. Но идеальный аналитик - как раз тот, кто отдается проекту на все 100%.\n\u0026hellip;с чувством юмора (опционально) Это качество желательно, но не обязательно. Как бы ни было странно, но все мы - люди, и мы хотим общаться с приятными нам людьми. На мой взгляд, если у человека есть чувство юмора, то он адекватен в общении. Не обязательно общаться с аналитиком вне рамок работы и рабочего проекта, но если есть возможность перекинуться парой слов с ним в курилке, то это - приятно и благоприятствует дружелюбной атмосфере в команде.\nНе обязательно, чтобы человек всем нравился. Главное - чтобы он выполнял свои задачи эффективно. Однако мы ведь говорим об идеальном аналитике, поэтому я отметил это качество. Если уж не повезло настолько, что аналитик оказался токсичным человеком, то только верно выстроенная система коммуникации убережет остальных членов команды от его токсичности. Если уж не повезло с чувством юмора, то, благодаря правильной письменной коммуникации, атмосфера в команде не пострадает.\nА тяжело ли найти идеального аналитика Да, тяжело. Как и идеального разработчика, тестировщика или проектного менеджера. Хорошо, что уже имеющийся аналитик на проекте может прокачаться до уровня, близкого к идеальному. Поэтому не все так страшно и депрессивно, как может показаться. На поиск или взращивание идеального тиммейта может уйти вся жизнь, но я думаю, что оно того стоит.\n","permalink":"https://maximgorbatyuk.github.io/blog/management/2020-09-07-ideal-ba/","summary":"Недавно я послушал подкаст \u0026ldquo;Идеальный бизнес-аналитик глазами разработчика\u0026rdquo; своего очень хорошего друга. Не со всеми тезисами я был согласен, однако подкаст побудил меня начать обсуждение с участниками подкаста. А потом еще и сам побывал в этом подкасте в качестве гостя.\nЧтобы понять, кто такой \u0026ldquo;идеальный аналитик\u0026rdquo;, важно определиться с набором требований. Что я жду от аналитика как разработчик? А как тимлид? А как менеджер проекта? Сколько людей, столько и мнений, и я тоже хочу порассуждать о том, каков он - этот неуловимый идеальный аналитик.","title":"Идеальный Бизнес-Аналитик глазами разработчика"},{"content":"Недавно пересмотрел мультфильм \u0026ldquo;Кунг-фу Панда\u0026rdquo;, а точнее два из трех. Последний раз смотрел почти десять лет назад, поэтому многое уже забылось. Сейчас, когда я вступил в осознанный возраст в 26 лет ¯\\_(ツ)_/¯, философия мультфильма видится совершенно другой. Мультфильм о том, как обрести себя, как отпустить прошлое и как начать жить сегодняшним днем.\nВ первом мультфильме По, главный персонаж, воспользовался случаем и изменил свою жизнь. Случай - его посчитали избранным Воином Дракона. По и до этого чувствовал, что не принадлежит тому месту, где он был и чем занимался. А занимался он семейным бизнесом и помогал отцу в лапшичной. А снились ему сны о битвах, где По - непосредственный участник и предводителей других воинов кунг-фу. Мечтатель, одним словом. И мечтателю мешал страх \u0026ldquo;предать\u0026rdquo; мечты отца, который видел По продолжателем семейного дела.\nВ течение мультфильма зритель увидит, что По на самом деле обладает недюжиной силой и наудивление проворен для панды, когда хочет покушать. Мастер Шифу лишь раскрыл потенциал По. Так что По - действительно избранный. Легенды гласили, что чтобы стать полноправным Воином Дракона, он должен прочесть свиток, когда будет готов. Под конец мультфильма По открывает список, но там пусто. Как окажется впоследствии, свиток был зеркален и показывал, что глядящий в него и есть избранный, а секрета нет. Главное - поверить, что ты избран.\nПараллельно нам показывают историю становления протагониста - Тай Лунга. Тай Лунг когда-то был учеником Шифу, а тот возлагал на него надежды как на будущего избранного. И когда Угвэй - старейшина дома кунг-фу - говорит, что Тай Лунг не является избранным, Шифу это принимает. Но Тай Лунг - нет. Тай Лунг, как он сам рассказал, делал все, чтобы Шифу гордился им, что он положил свою жизнь на подготовку к тому, чтобы быть достойным титула. А Шифу в момент кульминации отвернулся от Тай Лунга.\nПо понял, что он будет избранным, если сам поверит в это. Более того, мне показалось, что избранности-то и нет, как таковой. По понял это, осознал себя и перестал стремиться быть избранным. Хотя в мультфильме показали, что навыки кунг-фу у него уже были, я думаю, что это для того было сделано, чтобы объяснить, как он так быстро овладел боевыми искусствами. Тай Лунг же всю жизнь жил ради цели других. Он обвинил в этом Шифу и разрушил родную деревню. Заглушил выплеском агрессии боль от неоправданных ожиданий, хотя лишь он сам возложил эти ожидания. Он сам решил жить ради цели Шифу, а не ради себя. И винить в этом Тай Лунг не может никого, кроме себя.\nВторой мультфильм - о том, как обрести внутрений покой и гармонию. Сценарий мультфильма гораздо слабее, однако философская мысли глубже. Мне это понравилось больше. Еще в первом фильме затронули тему течности бытия: жить нужно сегодня, потому что прошлое не изменить, а будущее никто не знает. Именно поэтому значение имеет лишь сегодняшний день.\nПротагонист фильма Шен уничтожил весь род панд из-за того, что по предсказанию именно панда должна была остановить его на пути захвата всего Китая. Когда По увидел символику формы войнов Шена, он начинает ловить флэшбеки, которые его обескураживают. По пытается прояснить историю и выяснить у Шена, где же его родители. Когда По узнает про геноцид, он проигрывает сражение. Восстановиться ему помогает провидица и она же ему рассказывает, что не имеет значение прошлое, его уже не вернуть и не изменить. Нужно принять его, сделать выводы и строить свою судьбу без фрустрации. Тогда По понимает, что у него был любящий отец все это время - гусь Пинг. И флэшбеки больше не беспокоят По, он обретает внутреннюю гармонию. Какая разница, как начался его путь Воина Дракона? Значение имеет, что он делает сейчас и как будет строить свою судьбу дальше. Обретя гармонию, По побеждает Шена.\nТут я вспоминаю несколько цитат дяди Айро из мультсериала \u0026ldquo;Аватар. Легенда об Аанге\u0026rdquo;. Во втором сезоне в последней серии Аанг делится с ним переживаниями, что он выбрал спасти Катару вместо обучения и становлению как аватар. Айро поддержал его: \u0026ldquo;Роль превосходства силы преувеличивают. Ты поступил очень мудро, что выбрал счастье и любовь\u0026rdquo;. Каждый видит свое в этой фразе. Айро, по моему мнению, считает тоже, что жить нужно сегодня. Нельзя отказываться от счастья в настоящем ради абстрактного блага в будущем, которое еще и не предопределено, к тому же. Вторая цитата Айро сказана в самом начале: \u0026ldquo;Я открою тебе секрет, юный маг воздуха, как ты менял форму облаков, так же можно менять линию своей судьбы!\u0026rdquo;.\nМне понравилось, что мультфильм транслирует такую восточную мудрость детям. Жаль, что я лишь сейчас смог это понять и увидеть. Дети вряд ли смогут самостоятельно понять эту философию, поэтому важно, чтобы родители разъяснили ее им.\nМногие на нашем пути будут пытаться возлагать на нас надежды и свои ожидания, даже близкие нам люди. Но никогда нельзя забывать о том, чего хочешь в этой жизни ты. Нельзя жертвовать своим счастьем сегодня ради туманного будущего завтра. Тем более, если это будущее нам пытается внушить кто-то другой. Каждый ответственен за свою жизнь и за все, что в ней происходит. Жить нужно сегодня, перестав переживать из-за свершившегося \u0026ldquo;вчера\u0026rdquo; и неопределенного \u0026ldquo;завтра\u0026rdquo;.\n","permalink":"https://maximgorbatyuk.github.io/blog/opinion/2020-08-01-thoughts-about-kung-fu-panda-movie/","summary":"Недавно пересмотрел мультфильм \u0026ldquo;Кунг-фу Панда\u0026rdquo;, а точнее два из трех. Последний раз смотрел почти десять лет назад, поэтому многое уже забылось. Сейчас, когда я вступил в осознанный возраст в 26 лет ¯\\_(ツ)_/¯, философия мультфильма видится совершенно другой. Мультфильм о том, как обрести себя, как отпустить прошлое и как начать жить сегодняшним днем.\nВ первом мультфильме По, главный персонаж, воспользовался случаем и изменил свою жизнь. Случай - его посчитали избранным Воином Дракона.","title":"Мысли о мультфильме \"Кунг-фу Панда\" и о становлении себя"},{"content":"Написать эту статью меня натолкнул один случай. В моей команде двое junior-девелоперов: парень и девушка, и девушке я делал код-ревью. Задача была простая: ранее она написал экстеншн-метод (extension method из .NET) для валидации свойств объекта, и я предложил перенести этот экстеншн в сам класс объекта в качестве публичного метода. Девушка перенесла метод, и в качестве аргументов передавала те же свойства, которые нужно было провалидировать. Это было странное решение, ведь свойства объекта доступны в самом методе, нет нужды передавать их извне. Я написал ей в Slack, зачем она так написала. Разработчица мне ответила, что теперь поняла суть задачи и пообещала переделать в ближайшее время.\nСуть проблемы не в том, что был написан неоптимальный код. Девелопер признался, что реализовал задачу и отправил ее на код-ревью, хотя не уловил суть задачи. Именно \u0026ldquo;не уловить суть задачи\u0026rdquo; и есть, как мне кажется, гораздо более важная проблема.\nЯ встречал такое раньше. Я и сам в начале своей карьеры бросался имплементировать задачи, даже когда не понимал их и для чего они предназначены. Когда приходилось переделывать имплементацию, я задумывался, почему же так получалось. После раздумий я пришел к выводу, что причина - непонимание задачи и того, что хотят видеть в итоге, а главное - какую проблему решают.\nЭтот вывод может показаться очевидным для опытных разработчиков, однако для меня тогдашнего это было чем-то вроде откровения с небес. Мир как будто перестал быть прежним в тот момент. Я начал относиться к задачам более скептически и всегда стал задавать себе вопрос: а зачем хотят видеть эту бизнес-задачу выполненной? Какую проблему она решает? Естественно, мне ответить мог только заказчик (product owner), и так начались сессии общения с ним. Так я начал изучать не только программную архитектуру и computer science, но и менеджмент и маркетинг.\n К задачам и требованиям разработчик должен относиться скептически.\n Теперь я каждый раз, когда я беру задачу, я анализирую ее и с точки зрения бизнес-проблемы, которую задача закрывает. Это помогает мне лучше ее реализовать и понять, стоит ли прорабаывать легко расширяемую архитектуру или задача - лишь одноразовая затычка проблемы.\nВторая причина - это искажения призм восприятия и вещания у людей: разработчиков, тестировщиков, аналитиков, проджект-менеджеров (Project manager) и продакт-менеджеров (Product manager). Когда мы работаем, мы часто забываем, что требования нам отдают не машины, а люди. А люди имеют свойство уставать вследствие перегруза. Максим Дорофеев, автор шикарнейшей книги про прокрастинацию и тайм-менеджмент, писал об этом.\nПостановщик задач может испытывать проблему, которую Максим называет \u0026ldquo;синдромом дырявого стека\u0026quot;: задачи поступают аналитику настолько быстро, что он бросается выполнять их тут же и не успевает закончить с прежними. И так по кругу. В итоге, ни одна из задач не проработана достаточно прозрачно для всех остальных участников проекта. А разрабам их имплементить. И если разраб не отнесется скептически к поступившей задаче и приступит к ней, не понимая сути, то продукт не получится хорошего качества. Поэтому и важно не начинать разработку, пока суть и смысл задачи не ясен.\nОчень редко эта проблема встречается вследствие злого умысла. Всегда есть факторы, которые могут исказить смысл описания тикета. Например, в голове у автора задачи картинка мира идеально прорисована, а вот словарного запаса или моральных сил не хватило на то, чтобы описать тикет полноценно. И автор считает, что тикет написан достаточно доходчиво, но другим он непонятен вообще. И это - проблема не всех остальных, а отдельно взятого неверно оформленного тикета. Я не призываю обвинять конкретных людей в этом, я призываю просто признать и принять проблему и решать ее коллективно.\n Хорошо описать тикет - задача не только аналитиков, но разработчиков и всех остальных участников проекта.\n К этому призывают и некоторые принципы Agile-манифеста: второй и четвертый в частности. На планировании продакт-оунер (Product owner) \u0026ldquo;продает\u0026rdquo; задачи разработчикам, а они, в свою очередь, задают уточняющие вопросы и прорабатывают его коллективно. И только когда тикет понятен всем участникам проекта, его берут на оценку и закладывают в будущий спринт.\nЕсть еще одна причина непроработанных тикетов, которую не все признают. Чаще всего она встречатеся в продуктовых компаниях, хотя и аутсорс не лишен этого порока. Иногда заказчик или проектный менеджер просто хотят выслужиться перед своим руководством, и тогда начинается имитация бурной деятельности - незначительные требования и украшательства либо недооформленные тикеты. Иными словами, все процессы заказчик строит так, чтобы быть занятым либо на митингах с разрабами, \u0026ldquo;которые ничего не понимают и им нужно разъяснять все по несколько раз\u0026rdquo;, либо наоборот овер-описанные тикеты, где можно утерять суть тикета за тонной текста. К счастью, мне не доводилось напрямую работать с такими заказчиками, однако по рассказам друзей и по их тикетам я видел это.\nОдна из основных задач разраба в разработке - подвергать описание тикетов критике. Заказчик рассказывает о задаче разработчикам на своем языке бизнеса, а разработчики стремятся перевести его слова в язык технический и понять, как тикет повлияет на разрабатываемую систему. Этот рабочий доброжелательный конфликт всегда должен присутствовать в продуктивной рабочей среде.\n Если рабочего конфликта между разработчиками и заказчиком не будет, то о непроработке задач будут сигнализировать уже непосредственные конечные пользователи системы.\n Мой совет всем разработчикам: помогать бизнесу разрабатывать продукт, в том числе и прорабатывая тикеты совместно. Не беритесь за тикеты, пока их не понимаете, но не нужно наотрез отказываться от тикетов. Помогая аналитикам прорабаывать задачи и требования, разработчик прокачивает и свои аналитические навыки.\n","permalink":"https://maximgorbatyuk.github.io/blog/opinion/2020-04-24-do-not-develop-what-you-dont-understand/","summary":"Написать эту статью меня натолкнул один случай. В моей команде двое junior-девелоперов: парень и девушка, и девушке я делал код-ревью. Задача была простая: ранее она написал экстеншн-метод (extension method из .NET) для валидации свойств объекта, и я предложил перенести этот экстеншн в сам класс объекта в качестве публичного метода. Девушка перенесла метод, и в качестве аргументов передавала те же свойства, которые нужно было провалидировать. Это было странное решение, ведь свойства объекта доступны в самом методе, нет нужды передавать их извне.","title":"Не берись делать то, чего не понимаешь"},{"content":"Егор много выступает, и практически после каждого доклада ему задают вопросы. Ответы на вопросы Егора очень ценны, на мой взгляд, сами по себе, даже в отрыве от основного доклада. Эта статья - набор тех ответов, которые мне больше всего понравились. Ответы на доклады, которые я уже законспектировал, я выкладывать здесь не буду, дабы не повторять материал.\nВопросы и ответы даны в моем пересказе, и на полную точность передачи не претендую. Статья будет постоянно дополняться по мере публикаций выступлений Егора.\n \u0026ldquo;Who Cares About Quality? (in Russian)\u0026rdquo; Ответы на вопросы к докладу \u0026ldquo;Who Cares About Quality? (in Russian)\u0026quot;.\nQ: Мне показалось, что в докладе говорится о низкоуровневом качестве. А что насчет качества выбранной архитектуры?\nНеверно выбранная архитектура - это действительно баг, который может обойтись дороже, чем любой другой на проекте. Но по опыту Егора, архитектурные решения принимаются довольно редко, а кода пишется много. Все архитектурные решения принимаются в начале проекта при запуске: выбор фреймворка, базы данных и другие инфраструктурые вопросы. Дальше программисты пишут обычный код на основе тикетов, которые разбиты на микро-задачи по полчаса-час работы. Какие-то архитектурные решения в таких тикетах будут приниматься довольно редко.\nБольшинство ошибок приходятся на этап кодирования, и эти ошибки часто \u0026ldquo;отсекаются\u0026rdquo; линтером. Архитектурные ошибки линтером не отсекутся, конечно, но таких ошибок довольно мало на проекте, чем банальных дефектов типа неработающих кнопок.\nQ: Ротация - довольно дорогая штука для проекта, ведь новичок должен вникнуть в проект, используемые технологии и написанный до него код. Иначе говоря, ротация замедляется архитектурной синхронизацией новичка. Что ты на это скажешь?\nТекучка (ротация) действительно \u0026ldquo;утяжеляет\u0026rdquo; проект, но если в нем качество на высоком уровне и присутствует документация, то ротация проходит настолько безболезненно, насколько это возможно.\n Если проект ценит людей больше, чем код, то это - плохой проект.\n Разработчики должны быть на службе у кода. Мы - заменяемые ресурсы: пришли - сделали код лучше - ушли. Проект продолжает жить.\n Чем легче вас уволить, тем лучше вы профессионал.\n Чем более вы заменяемы, тем выше качество продукта, который вы пишете. Если вам легко заменить и перекинуть на другой проект, значит вы правильно настроили процессы вокруг себя, минимизировав свое участие и перенеся все свои знания в репозиторий проекта.\n Если же вы незаменимы, если только вы знаете, как работает тот или иной модуль в вашем проекте, значит у вас низкий профессиональный уровень.\n Ротация - это хорошо. Ротируя людей, мы тестируем нашу систему. Если мы увидели, что после замены какого-то человека система встает, то значит мы выявили проблему. И решив эту проблему, проект станет стабильным.\nQ: Мотивация деньгами - не самая лучшая мотивация, есть множество других аспектов. Например, желание разработчиков использовать новые подходы, фреймворки. которое не будет пропущено пайплайном. Что насчет мотивации, которую не всегда деньгами купишь?\nЕгор согласен, что деньгами не создашь интерес к работе. Деньгами можно создать интерес только у тех, кому нечего есть. Егор считает, что хорошо мотивирует высоко поставленная планка качества в его проектах и решение сложных проблем.\n Серьезного технического специалиста можно замотивировать только проблемами.\n Чем серьезнее проблема поставлена перед программистом, чем больше усилий ему нужно приложить для решения этой проблемы (в том числе и пайплайн проекта), чем больше менеджмент уделяет внимание дисциплине и организации работы, тем больше программисту нравится работать. Полная свобода на проекте чаще всего демотивирует. Чем больше внимания обращают на результат работы программиста, тем больше мотивации.\nПроект создает программисту комфортную среду. Можно привести аналогию: ехать гораздо комфортнее по автобану с организованным движением, светофорами и инфраструктурой. Иногда хочется и по бездорожью проехаться, когда ничего не известно и риск высок, однако это желание приходит не так часто. Второй вариант - это больше креатива, однако и риски больше. Первый вариант может показаться скучным относительно второго, однако, по опыту Егора, мотивирует все же ощущение, что менеджменту \u0026ldquo;не все равно\u0026rdquo; на проект, на его качество и на результат работы отдельно взятого программиста. У сеньоров возникает интерес поработать в таких условиях, а джуны действительно быстро отсекаются.\nПрофессионал не хочет отвечать за чужие ошибки, он не хочет, чтобы ему кто-то мешал работать. Он хочет, чтобы ему дали понятный скоуп работы, понятные правила, понятный тикет. В процессе работы над тикетом профессионал не только узнает что-то новое, но и видит, что результат его работы сразу вливается в общую кодовую базу. Это и мотивирует специалистов, считает Егор.\nQ: Егор, ты говоришь, что распределенная команда - это лучше, чем команда в одной комнате. Но если каждый участники сидит в своей локации и пишет код в своем модуле, то зачем ему проводить код-ревью другому программисту и тратить свое время?\nДействительно, если мне никогда больше не работать с тем кодом, которому я провожу код-ревью, то мне и мотивации нет делать это код-ревью качественно. Нужно мотивировать людей. Егор делится опытом, что оджнажды они платили за количество комментариев в код-ревью, чем больше комментариев, тем больше денег ревьюер получал. Это работало не так плохо. Конечно, были элементы обмана, однако и автор кода - тоже человек, который увидит придирки ради придирок и напишет репорт архитектору. Система была работоспособна. Также учитывался и средний показатель ревьюера: ревьюеры, после ревью которых остается больше комментариев, оплачивались дороже. Что-то подобное можно придумать и в ваших проектах, говорит Егор.\nЕсли же мотивацию строить на проведенном времени в офисе, то люди будут просто жать кнопку \u0026ldquo;Approve\u0026rdquo; раз в час, чтобы сымитировать активную деятельность, и чай пить параллельно.\nОтветы на вопросы после выступления в офисе EPAM в Питере Видео: youtube\nQ: Есть разные роли в проектах. Простых исполнителей, от работы которых не зависят другие (в большей степени). Они могут работать удаленно откуда угодно: дача, дом, Бали, Тайланд и тд. А что насчет ключевых позиций на проекте типа архитектора или девопсера, который должен настроить архитектуру? Будут ли они на фрилансе?\nДа, они будут. Тенденция к этому и ведет. Как они смогут работать удаленно и коммуницировать - это вопрос нашей с вами квалификации. Пока что нам кажется, что без митингов ничего не решить, однако научиться - это дело времени. Митинги нас развратили.\n Инженер - это тот, кто умеет излагать свои мысли ясно на бумаге, а не \u0026ldquo;на пальцах\u0026rdquo; как обезьяна.\n На бумаге - это не только документация, но и различные диаграммы. Проще собраться на митинге и объяснить, конечно. Однако письменная коммуникация лучше. Есть какая-то мысль или идея - напиши простым английским/русским языком. Если в ней есть смысл, то проект ответит тебе.\nQ: Если есть стартап, которому нужно быстро запуститься, и ему нет времени формализовать свои требования. Что делать им?\nМы не работаем в Zerocracy с избыточными требованиями, требования формализованы ровно настолько, насколько это необходимо. Главное, чтобы исполнители понимали, что им нужно делать. Объяснить можно словами, а можно текстом, и текстом предпочтительнее. Как минимум потому что повторять второй раз не придется.\nВторая причина, зачем писать тикеты, а не объяснять их словами, заключается в том, что когда наступят времена фрилансеров, каждому новому человеку на проекте (а это случаться будет часто) не нужно будет объяснять те или иные архитектурные решения. Новичок на проекте просто прочтет об этом из обсуждений.\nЭто уже происходит в опенсорсе. Когда вы хотите контрибьютить в какой-нибудь проект, специально для вас не создают митинг, где вам объясняют суть проекта. Вот код, вот репозиторий, вот правила - бери и делай тикеты.\nQ: Что насчет командной работы, синергии, командного духа?\nЕгор согласен с тем, что в команде быстрее проекты запускаются, но командный дух создается не путем воодушевления или раздачей пряников. Не пиццей воодушевляются программисты или красивым офисом. Программист хочет работать в команде, которая ставит себе высокие требования к качеству, которые пользуются единым подходом к юниттестированию и к архитектуры. Мотивируют и деньги, полученные сразу за результат, а не за месяц. Чем жестче правила игры и чем жестче они соблюдаются, тем интереснее в них работать.\nКогда менджер - это вчерашний программист, а теперь он лучший друг всех вокруг, это не мотивирует и командный дух надолго не создаст.\nQ: Как вы оцениваете качество кода?\nКачество кода у нас на высшем уровне. Мы не доверяем фрилансерам. Это такие ковбои, которые сегодня пишут, а завтра им не дозвонишься. Поэтому мы изначально предполагаем, что человек приносит нам мусор вместо кода, и поэтому мы максимально строго его проверяем, платим и забываем про него. Как только задача закрыта, это больше не его код, а уже наш. И баги будут не его, а наши. Наша система качества кода пропустила его код. Двойные пир-ревью, проверки юниттестов, все это нам помогает. Тикеты у нас очень маленькие, поэтому и возмодности занести баг гораздо меньше.\nВ стандартной команде же разработчик неделю работает, вываливает пулл-реквест на 7к строк, и кто будет его смотреть? \u0026ldquo;Давайте мерджить уже, пятница, сейчас пиццу привезут\u0026hellip; Разберемся в понедельник.\u0026rdquo;\nQ: Как передаются знания в проекте?\nЗнания в стандартной команде витают в воздухе в головах участников проекта, именно поэтому новичку нужно время на раскачку. В опенсорсе и в Zerocracy же не так. Вот тебе тикет на полчаса, ждем пулл-реквест.Новичок открывает код и ищет причину проблемы. Если новичок не может разобраться в коде, то это - дефект проекта - документация \u0026ldquo;бедная\u0026rdquo; или отсутствует. Не вини себя, не учись, не пытайся понять, а пиши сразу багрепорт. Ее подтянут, разберутся, починят или объяснят, и тогда ты получишь деньги не за тикет, а за этот багрепорт. Когда по багрепорту отработают, ты снова возьмешь свой первый тикет и попробуешь разобраться. И таких кругов может быть несколько. Так проект и улучшается.\nСам новичок помог нам разработать богатую документацию. Нет ответственных за модули, нет необходимости платить людям только за то, что он написал некий модуль и только он знает, как он работает. Код принадлежит репозиторию, а не людям.\nКачественный программист стремится улучшить репозиторий, а не себя. Он все время думает, как ему можно улучшить код так, чтобы он был понятен другому \u0026ldquo;с первого взгляда\u0026rdquo; случайному прохожему. Поддерживаемость - это скорость понимания новичком вашего проекта. Не нужно рассказывать, что у вас сложный проект, что у вас энтерпрайз-система.\nПри этом следующий человек может сказать, что \u0026ldquo;тут документации слишком много, надо убрать\u0026rdquo;, и тогда если проект решит, что это действительно так, то документацию поправят и сократят.\nQ: Кто будет отвечать?\nА что значит \u0026ldquo;отвечать\u0026rdquo;? Возьмите любой договор о разработке продукта, и там ни слова о том, кто будет отвечать. В договорах обычно прописывают, что заказчик покупает 50 человек в свои ресурсы, и аутсорсер лишь отвечает за то, что эти 50 человек приходят в офис и у них есть все необходимое для выполнения своей работы. Ни один аутсорсер не соглашается на договор по принципу Fixed Price, ему это не выгодно. В основном это аренда людей, slave-trade.\nМы показываем заказчику свой процесс разработки без митингов и с письменной документацией, и если заказчик понимает его, то мы с ним работаем. Если же не понимает, ему подавай митинг-колл с пятьюдесятью программистами, то окей, пусть платит за это.\nМы пытаемся учить продакт-оунеров разговаривать на техническом языке. Попросить заказчика написать тикет вместо эфемерного рассказа о фиче - это смертельный номер. Тогда мы ставим ему человека, который уже и оформляет его мысли в тикеты.\nQ: Кому ваш подход подходит?\nПодходит большинству типов проектов. Наш подход может мешать только тем проектам, которые очень быстрые и где полная свобода творчества: это какие-то научные проекты с исследовательской целью, которые пишут за пару дней или недель, не более.\nНаверное, также нам не подойдут проекты с маленьким бюджетом. Пара тысяч долларов - это мало.\n","permalink":"https://maximgorbatyuk.github.io/blog/management/2020-04-08-faq-by-yegor256/","summary":"Егор много выступает, и практически после каждого доклада ему задают вопросы. Ответы на вопросы Егора очень ценны, на мой взгляд, сами по себе, даже в отрыве от основного доклада. Эта статья - набор тех ответов, которые мне больше всего понравились. Ответы на доклады, которые я уже законспектировал, я выкладывать здесь не буду, дабы не повторять материал.\nВопросы и ответы даны в моем пересказе, и на полную точность передачи не претендую. Статья будет постоянно дополняться по мере публикаций выступлений Егора.","title":"Лучшие ответы Е. Бугаенко на вопросы из зала"},{"content":"О книге Книга \u0026ldquo;Элегантные объекты. Java Edition\u0026rdquo; не сильно распространена на рынке в Казахстане, где я живу. Как только узнал, что появилась возможность приобрести в магазине flip.kz - купил тут же.\nВ предисловии автор рассказывает историю создания языков через его призму восприятия. Он пишет, что 20 лет назад языки программирования были процедурные, не было классов и ООП. И именно эти программисты, которые мыслили процедурно, и создали первые ООП-языки. Егор нисколько не умаляет их заслуг, но говорит о том, что подход к ООП с тех пор практически не изменился и программисты сейчас пишут на Java/.NET/Ruby так же, как писали процедурные программисты на первых ООП-языках.\nЕгор размышлял об ООП много и пришел к выводу, что нужно начать мыслить иначе, чтобы писать более правильный ООП. А тому, что значит фраза \u0026ldquo;правильный ООП\u0026rdquo;, и посвящена книга. Труд полон противоречивых тезисов, но об этом автор прямо и пишет:\n Честно говоря, я не думаю, что прав во всем, о чем говорю. Я сам многие годы был процедурным программистом.\n Мне нравится, что Егор добавил к каждой главе комментарии других программистов, и чаще всего эти комментарии содержали противоположное мнение. Так читатель может увидеть, что думают другие \u0026ldquo;читатели\u0026rdquo;, не заходя на соответствующие блог-посты и не читая все ветки обсуждений. Ну а если у читателя возникнет такое желание, то Егор заботливо оставил ссылки на эти обсуждения. Автор ведет свой блог и даже посвятил своей книге отдельный сайт, где перечислены основные тезисы со ссылками на блог-посты с пояснениями.\nЯ не согласен со всеми принципами, к которым призывает Егор, однако большинство действительно интересны и улучшают сопровождаемость и читаемость кода. В этой статье я составлю больше конспект по книге, чтобы периодически возвращаться к ним в будущем.\nНет именам классов, оканчивающимся на -er Класс в ООП - это представитель какого-то объекта из реального мира. Основной тезис Егора в том, что в реальном мире нет Хэлперов, Врапперов, Ридеров, Хэндлеров и Контроллеров. Исключения - исторические слова наподобие User или Computer, образованные от слов use и compute соответственно.\nКласс можно назвать двумя способами: правильно и неправильно. Неправильно \u0026ndash; это когда мы смотрим, что делает класс, а нужно смотреть, чем класс является.\n Объект - это представитель инкапсулированных в нем данных.\n Если мы называем класс именем с -er, то это говорит нам и другим программистам, что класс - набор процедур для манипулирования данными, а не сам объект. Статья Егора расскажет о принципе более подробно.\nОдин главный конструктор Конструктор класса - точка его создания. И создать объект класса можно с разным набором данным, а значит и конструкторов в нем должно быть больше чем один. Егор даже считает, что нормально, когда конструкторов в классе больше, чем его публичных методов. Автор считает, что только один конструктор должен инстанцировать себя, все же остальные конструкторы - вызывать первичный с передачей нужных параметров. Инстанцировать объект во вторичных конструкторах плохо из-за того, что это приводит к дублированию кода.\nЕсли язык, на котором вы пишете, не позволяет перегружать методы и конструкторы, то Егор, в первую очередь, советует перейти на другие языки. Если же это невозможно, то он советует принимать в конструкторе словарь \u0026ldquo;ключ-значение\u0026rdquo; и парсить его, заполняя нужные поля.\nВ конструкторах нет места коду Автор имеет в виду вызов других методов. Конструктор предназначен лишь для компоновки объектов. Есть несколько причин такого требования, в том числе филосовская и техническая. С технической точки, во-первых, зрения конструктор должен быть легковесным, чтобы не загружать память в рантайме. Во вторых, мы не вызывает операции преобразования до тех пор, пока они нам не понадобятся действительно.\nПреобразования и операции необходимо делать в публичных методах, которые вызываются по мере необходимости. Если нам понадобится закэшировать результаты, то мы можем вполне создать декоратор. Более того, Егор настоятельно и рекомендует именно так и делать вместо создания приватных полей и проверки на их заполненность.\nПринцип также находит отклик и в философском подходе к ООП: ООП \u0026ndash; это декларативное программирование, а не императивное, но об этом позднее. У Егора есть статья на эту тему.\nИнкапсулируйте как можно меньше Чем меньше кода, тем легче его поддерживать и сопровождать. Егор рекомендует инкапсулировать не более четырех объектов. Цифра взята из ниоткуда, как признается Егор, он просто вывел ее \u0026ldquo;по опыту\u0026rdquo;. Набор инкапсулированных объектов называется состоянием (идентичностью) объекта. Это значит, что класс с одинаковыми значениями в трех его внутренних объектах должны считаться одинаковыми при операциях проверки на идентичность.\nИдентичность - это как набор координат, который идентифицирует объект. И чем больше координат мы имеем, тем тяжелее поддерживать такой код. Поэтому и руководствоваться нужно правилом \u0026ldquo;меньше - лучше\u0026rdquo;.\nИнкапсулируйте хоть что-нибудь Класс не может не иметь состояния и быть лишь набором методов. Тогда он ничем не отличается от простой коллекции \u0026ldquo;полезных\u0026rdquo; утилитарных методов, что приводит нас к процедурному программированию.\nВсегда используйте интерфейсы Использование интерфейсов необходимо для того, чтобы разорвать связь между классами. Егор не первый, кто об этом пишет. Чтобы повысить сопровождаемость, мы должны максимально расцепить (decoupling) объекты. Это дает нам возможность легче модифицировать объекты и подменять их при необходимости.\nКласс в системе живет потому, что нужен кому-то. То есть, он используется в других классах. Именно поэтому ему необходим контракт в виде интерфейса, чтобы была возможность создать и конкурентов этому классу. Пример - юниттестирование и классы-заглушки.\nТщательно выбирайте имена методов Егор рекомендует использовать два вида имен методов: методы-строители называть именами существительными, а методы-манипуляторы - глаголами.\nМетод-строитель - это такой метод, который возвращает какой-то созданный класс. Строитель никогда не должен возвращать void, это противоречит его природе. В имени метода мы также не должны указывать и способ создания объекта, используя слова fetchObject, createObject или getObject.\nЕгор приводит аналогию с кофейней. Когда мы приходим в кофейню, мы не говорим \u0026ldquo;Сварите мне кофе\u0026rdquo;, мы лишь говорим \u0026ldquo;Я бы хотел чашку кофе\u0026rdquo;. Во втором случае кофейня сама решает, как мне предоставить зака: сварить кофе, использовать быстрорастворимый или разогреть недопитый кофе предыдущего клиента (прим.ред: шутка про недопитый кофе - моя). Это и есть декларативный подход - класс, у которого мы вызываем метод, сам решает, как его создать и как его построить.\nМетоды-манипуляторы должны именоваться глаголами для того, чтобы показать, что они что-то делают и преобразовывают. Манипуляторы ничего не возвращают. Клиенты такого класса лишь просят его сделать что-либо, а класс уже сам решает, выполнить просьбу или нет. В аналогию Егор приводит пример с музыкой в кофейне. Нам, к примеру, не нравится громкость музыки в заведении. Если мы попросим убавить звук фразой \u0026ldquo;Убавьте, пожалуйста, звук, а как убавите, скажите ее громкость\u0026rdquo;. Такая просьба звучит неуважительно, мы уже вынесли решение об изменении громкости вместо того, кто на самом деле должен это делать. Именно поэтому и методы-манипуляторы возвращают лишь void.\nИсключение из правила - методы, возвращающие boolean. Например, success(). Можно было бы назвать этот метод checkSuccess(), но тогда все подобные методы содержали бы префикс check, что ухудшило бы читаемость.\nНе используйте публичные константы Какие-то данные в публичном доступе - это процедурный стиль. Их использование - это путь к увеличению связанности классов. Причем связь будет даже противоречить логике, ведь через константу можно связать классы из разных доменных областей приложения.\nКонстанта сама о себе ничего не знает. Ее используют в своих целях другие классы. Егор считает, что это неприемлемо. Альтернативой может быть класс-утилита, которая преобразует другие данные каким-то образом, пусть даже и при участии этой же константы, но только в приватной области видимости. Тогда и дублирования кода/данных не будет, и класс-утилиту можно будет протестировать.\nЧитатели могут возразить, что на каждый такой пример использования константы нужно будет создавать класс, что приведет к библиотекам из тысяч классов. Егор же считает, что это только лушче. Чем богаче наш разговорный язык на словарный запас, тем лучше мы выражаем свои мысли и тем яснее мы понятны остальным. Почему же этот же принцип нельзя применить и в языке программировании, где отдельный класс - это отдельно взятое слово.\nДелайте классы неизменяемыми Здесь Егор имеет в виду иммутабельность свойств класса. Иначе говоря, методы класса не должны менять его инкапсулированные объекты. Это противоречит идентифицируемости этих объектов. Ели нам необходимо преобразовать инкапсулированные данные, то мы должны из метода возвращать новый инстанс класса с уже измененными этими данными. В пользу использования иммутабельных объектов Егор приводит следующие эффекты:\n Атомарность отказов. Объекты инстанцируются либо полностью, либо происходит отказ операции. Отсутствие временного сцепления. Если нам нужно сформировать класс последовательным вызовом его сеттеров (про сеттеры отдельный пункт есть), то неверный порядок вызовов может привести к проблемам в рантайме. Отсутствие побочных эффектов. Человечкский фактор может привести к ошибкам в коде. Именно сокращение влияния человеческого фактора и является путем к повышению качества кода. Отсутвие NULL-ссылок. О NULL будет написан отдельный пункт, но пока что можно сказать, что если одно из наших приватных полей не инициализировано сразу, значит в остальном коде от нас потребуется проверять его на NULL постоянно. Потокобезопасность. Если наш класс используется в мультипоточном исполнении, то так может произойти, что в одном потоке класс еще полностью не был инстанцирован, а в другом от него уже ожидается некий результат. В итоге - неконсистентные операции. Объекты становятся меньше и проще. Чем проще объект, тем легче его поддерживать.  Комментаторы в блоге указывают Егору, что если инстанцировать каждый раз новые объекты, то куча (heap) может быстро заполниться ненужными объектами, и перформанс системы просядет. Егор же в ответ говорит, что сейчас железо стоит гораздо дешевле, чем время программистов, поэтому чем меньше времени программист тратит на чтение и написание кода, тем дешевле становится проект.\nБолее подробно в статье Егора.\nПишите тесты, а не документацию Важна не сама документация, а любая дополнительная информация о том, как написанный вами класс нужно использовать. Теоретически, читатель вашего кода даже и знать не должен, как формируется MD5 строки и как работает регулярное выражение, инкапсулированное в ваш класс. Но зато читатель легко поймет из написанного юниттеста, какие данные нужно подать классу на вход, чтобы получить ожидаемый результат.\nЕгор советует писать код так, чтоы его понимали не программисты со стажем, а новички, которые не знакомы со многими вещами в языке программирования, но умеющие читать текст по английски. Представьте, что читатель гораздо глупее вас, и пишите код так, чтобы он его понял.\n не хвастайтесь своими способностями - пишите простой, легко читаемый код.\n Плохие программисты пишут плохой код, а хорошие - простой. Комментаторы могут возразить, что модно задокументировать код, однако Егор считает, что один юниттест стоит страниц документации, которая вполне может быть устаревшей. Юниттест показывает, какие данные нужно подать на вход, какие ошибки в рантайме будут вызваны, какое поведение ожидается от класса.\nИспользуйте fake-объекты вместо mock-объектов Моки вынуждают авторов кода относиться к классам как к прозрачным ящикам. Более того, мокинг классов превращает предположения в факты. Например, мы передает в класс Кэша класс Биржи для конвертации валюты. Но вместо того, чтобы использовать оригинальный класс Биржи, мы создаем мок и передаем его как зависимость. В моке мы настраиваем возвращаемый результат рейта конвертации на нужный и ассертим результат работы класса Кэш. Что это значит? Что мы сделали предположение, что Кэш будет использовать метод rate() класса Биржа, хотя об этом мы можем строить лишь предположения. Получается, что если мы изменим внутренний код класса Кэш, то мок об этом ничего не узнает, и юниттесты посыпятся.\nПолучается, что мы заранее должны знать, как реализована логика класса Кэш, какие методы своих зависимостей он вызывает и на основе этой информации строить мок этих зависимостей. Философия юниттеста же заключается в том, чтобы относиться к тестируемому классу как к черному ящику и доверить ему самому решать, какие метоы он вызывает, а какие - нет.\nПримечание редактора. Не согласен с этим пунктом. Мне кажется, что создание фейк-объектов в коде самой библиотеки приведет к большим проблемам, чем даст профита. С одной стороны, мы действительно имеем возможность сразу актуализировать фейк-класс, если меняем логику проекта. Но с другой стороны, открывается возможность использовать случайно или намеренно фейковые классы в основном домене приложения, что приведет к багам в системе.\nДелайте интерфейсы краткими, используйте smart-классы Smart-класс - это вложенный класс в интерфейс, который расширяет возможности этого интерфейса. Иначе говоря, какие-то утилитарные методы, которые могут использоваться другими классами. Разделение кода на интерфейс и смарт-класс позволяет сокращать размер интерфейса и не принуждает реализовывать его имплементаторам все методы смарт-класса, которые могли бы быть частью самого интерфейса.\nПримечание редактора. Тоже спорный принцип. Ощущение, что это и есть те самвые утилитарные статические классы, против которых Егор выступает в других главах этой книги. По сути, мы просто перенесли методы-утилиты со статического класса в сам интерфейс, но не упразднили их. Либо я не понял концепции.\nПредоставляйте менее пяти публичных методов Чем меньше кода, тем легче его сопровождать. Этот принцип перекликается с принципом о четырех приватных полях. Цифра \u0026ldquo;пять\u0026rdquo; тоже взята из головы, по словам автора. Но по сути Егор прав: чем меньше публичных методов в классе, тем легче понять его предназначение.\nНе используйте статические методы Статические методы - это наследие процедурного стиля программирования. Вызов статических методов очень похож на вызов команд Ассемблера, что противоречит ООП-подходу. Программирование может быть императивным и декларативным.\nИмперативное программирование - это когда мы вызываем статический метод с параметрами в процессе исполнения программы и сохраняем в переменной ее результат \u0026ldquo;тут же\u0026rdquo;. Как в процедурном языке C до изобретения ООП. Декларативный же стиль предполагает, что мы вместо вызова операций объявляем (декларируем), что в некоторая переменная - это результат выполнения других операций, который будет вычислен позже. Реализация такого подхода достигается за счет классов и их компоновки. Затем, когда нам понадобится результат операции, мы вызываем публичный метод у созданной декларативно переменной и используем его.\nВ главе также Егор предлагает идти дальше и использовать компонуемые декораторы. Об этом он говорил еще на докладе \u0026ldquo;Utility-классы нас убивают\u0026rdquo;. Также более подробно - в статье Егора.\nПримечание редактора. Это очень сильно напоминает функциональный подход, где объявляется цепочка вызовов методов с некоторыми параметрами, но сами методы не вызываются до последнего. Также это напоминает и LinqToSQL из .NET, где мы можем навесить кучу экстеншенов на IQueryable, и только по вызову метода ToArrayAsync() мы получим искомую выборку. Иначе говоря, отложенное ленивое исполнение.\nПодход, как мне кажется, верный, но тяжело его применять. Чтобы код проекта не обрастал статическими методами, все участники команды должны следовать этому правилу.\nНе допускайте аргументов со значением NULL Отношение Егора к NULL весьма однозначно, судя по книге - их просто не должно существовать. Мысль заключается в том, что когда мы задаем значение какой-то переменной NULL, то мы заведомо начинаем не доверять своему же коду и сами решаем проверкой на NULL, нужно ли нам \u0026ldquo;общаться\u0026rdquo; с этой переменной. Иначе говоря, не спрашиваем у самого объекта, есть ли у него все нужные нам данные, а просто игнориуем его, если \u0026ldquo;ему и сказать нечего\u0026rdquo;.\nПроверки на NULL утяжеляют код, делают его менее поддерживаемым.\nПримечание редактора. Противоречивый тезис. С одной стороны, проверки на NULL действительно утяжеляют чтение кода, но эта проблема в .NET решается методом-экстеншеном (привет утилитарным методам). С другой стороны, а как можно передать \u0026ldquo;пустой\u0026rdquo; объект строки? Вводить некоторую прослойку типа Nullable\u0026lt;T\u0026gt;? В общем, применение этого принципа повлечет утяжеление кода для неподготовленных разработчиков, нужно будет объяснять концепцию остальным сначала.\nНе используйте геттеры и сеттеры Использование гетерой и сеттеров - плохо по двум основным причинам:\n Раскрывают детали класса, делая инкапсуляцию бессмысленной. Превращают объекты в некие структуры данных наподобие DTO-классов.  Смысл инкапсуляции в том, чтобы скрыть логику работы класса, доверить ему самому решать, что нужно делать и как. Используя геттеры и сеттеры же мы обнажаем его структуру и уже сами имеем возможность манипулировать данными. Уже самим именем метода getObject() мы указываем методу, что он должен сделать. Сеттеры же нарушают описанный выше принцип иммутабельности всех объектов, давая возможность извне манипулировать внутренними данными объекта.\nНе используйте оператор new вне вторичных конструкторов Внедрение зависимостей - полезная штука, позволяющая разделить классы и уменьшить их связанность. Почему нельзя использовать new вне вторичных констрикторов? Потому что это сразу показывает плохую архитектуру класса.\nЕсли какой-то метод внезапно создает инстанс другого класса для выполнения своей логики, то это автоматически связывает оба этих класса самой жесткой связью. Мы уже не сможем подменить фейком этот класс-зависимость, не сможем протестировать разное поведение, если следовать правилу \u0026ldquo;относиться к классу как к черному ящику\u0026rdquo;.\nВторичные конструкторы нужны в классе для того, чтобы помочь инстанцировать его при недостаточности данных извне. Именно поэтому и дозволяется использовать в них оператор new, чтобы скомпоновать нужный объект.\nПримечание редактора. На удивление очень ценный принцип, о котором не сразу задумываешься при проектировании классов. Действительно, лучше предпочитать инъекцию зависимостей, показывая контракт класса всем его клиентам.\nИзбегайте интроспекции и приведения типов Интроспекция - это \u0026ldquo;рефлексия\u0026rdquo;. Приведение типов и проверка на тип вредны для кода, потому что ухудшают понимание кода. Действительно, зачем нам принимать в качестве зависимости базовый класс/интерфейс, чтобы затем проверть его на соответствие более конкретного типа и вызвать у этого самого конкретного типа его методы.\n Рефлексия - хороший инструмент для плохих программистов\n Приведение типов нарушает ООП путем дискриминации объектов по типу. Мы взаимодействуем с некоторым объектом по-разномув зависимости от его типа. Это довольно странная логика. По идее, если дочерний тип общего ведет себя иначе (раз требуется проверка на тип и приведение), то это проблема проектирования того самого дочернего типа, а не нашего класса.\nЕгор приводит в пример интересную аналогию. Приведение типов - это как будто мы зовем сантехника починить кран, но затем мы обращаемся к нему \u0026ldquo;Я полагаю, что вы еще и компьютерщик, так что почините мне принтер\u0026rdquo;. А если сантехник - никакой не компьютерщик, то у нас будет баг в системе.\nПриведение типов и интроспекция - это выражение наших ожиданий относительно объекта без документирования этих самых ожиданий. Такие непрозрачные отношения в коде серьезно снижают сопровождаемость кода.\nПримечание редактора. Еще один ценный принцип. Пока читал главу, задумался действительно, а зачем нам нужно приводить типы в коде, чтобы вызывать другие методы, а не те, которые мы \u0026ldquo;просим\u0026rdquo; по контракту в конструкторе. Получается, что применение этого принципа позволит выявить проблемы проектирования системы.\nНикогда не возвращайте NULL Принцип перекликается с тезисом о NULL в качестве аргументов. Возврат NULL принуждает клиентов нашего метода перепроверять результат нашей работы, что снижает уровень доверия к коду и классам.\nВозврат NULL в качестве результата - это в некотором роде подход \u0026ldquo;Безопасного отказа\u0026rdquo;. Противоположный подход - это \u0026ldquo;быстрый отказ\u0026rdquo; (fail fast). Безопасный отказ - это максимальные попытки \u0026ldquo;сгладить углы\u0026rdquo; и не выбрасывать исключения, а стараться обрабатывать их как можно безопаснее. Следование этому подходу может аукнуться долгоживущими багами в системе.\nПодход быстрого отказа же наоборот предостерегает систему от ошибок на самых ранних этапах попадания данных в нее. Если нам не хватает каких-то данных, то мы бросаем ошибку. Пусть клиент нашего кода сам разбирается, что он не смог передать. Мы не пытаемся исправить ошибку клиента, мы учим клиента не допускать своих ошибок.\nПримечание редактора. У меня все тот же аргумент против этого тезиса - а что делать с примитивами типа строки? Альтернативы нет, и Егор тоже не дает ее.\nБросайте только проверяемые исключения Проверяемые исключения - это те исключения в Java, которые задекларированы в его сигнатуре. Принцип хорош, принуждает программистов следовать контракту. В главе Егор дает следующие рекомендации:\n Не ловить исключения без необходимости. Пусть на более высоком уровне решают, что делать с ними. Стройте цепочки исключений. Если ловим исключение на нижних этапах, то выбрасываем новое исключение с понятным текстом ошибки и отловленным исключением в качестве InnerException Восстанавливайтесь единожды. Отлов и обработка исключений должна быть только один раз и на самом высоком уровне.  Общее мнение Мне книга в целом понравилась. Написана и переведена хорошо. Егор дает практические советы и очень подробные пояснения, почему он считает так, а не иначе. Автор показывает альтернативное мнение, взгляд на которое побуждает пересмотреть читателя свой подход к ООП и проектированию в целом.\nМне также нравится, что автор приводит и противоположное мнение комментаторов к его блог-постам по теме главы. Это показывает, что Егор открыт к дискуссиям, даже если его оппоненты не всегда (полит)корректно выражают свои мысли. Конечно, эти лишь выжимка, которая может быть выгодна автору, однако в книге приведены ссылки на конкретные обсуждения, так что любой читатель может пройти по ним и ознакомиться с оригинальными комментариями.\nНу и в довершение моей статьи-обзора-конспекта пара забавных (на мой взгляд) цитат Егора, которые он использовал в дискуссиях.\n Я думаю, что программирование - это образ жизни, религия, искусство, но никак не процесс создания инструмента. Вы проводите 1% жизни на свиданиях, а 80% - за компьютером. Почему мы должны встречаться с красивыми мужчинами/женщинами, но при этом не беспокоимся о красоте собственного кода?\n  Bruno S.: Это все придирки ради славы и денег. Делайте качественные приложения и называйте методы как угодно.\nЕгор Б.: Да, будь хорошим мальчиком, слушай маму - и все будет хорошо. Для детей это подойдет, но в серьезной разработке ПО нужны правила, принципы, дисциплина. ООП дает нам дисциплину, если мы ее правильно понимаем.\n ","permalink":"https://maximgorbatyuk.github.io/blog/books/2020-04-01-elegant-objects-bugayenko/","summary":"О книге Книга \u0026ldquo;Элегантные объекты. Java Edition\u0026rdquo; не сильно распространена на рынке в Казахстане, где я живу. Как только узнал, что появилась возможность приобрести в магазине flip.kz - купил тут же.\nВ предисловии автор рассказывает историю создания языков через его призму восприятия. Он пишет, что 20 лет назад языки программирования были процедурные, не было классов и ООП. И именно эти программисты, которые мыслили процедурно, и создали первые ООП-языки. Егор нисколько не умаляет их заслуг, но говорит о том, что подход к ООП с тех пор практически не изменился и программисты сейчас пишут на Java/.","title":"Мнение о книге \"Elegant Objects\" (Vol.1) Е.Бугаенко"},{"content":"Предыстория Идея этой статьи родилась, пока я писал статью на другую тему: \u0026ldquo;Product development vs outsourcing\u0026rdquo;. За мою небольшую карьеру я успел поработать сначала в двух продуктовых компаниях, а затем в двух аутсорсовых. Переход с продуктовой разработки в аутсорс случился два года назад (2018) и показался мне кардинальным. С тех пор я держал в голове мысль написать об этом статью.\nСперва мне показалось, что в продуктовой компании работать лучше. Продуктовой в данном случая я называю банк, который разрабатывал свой веб-сайт, систему мобильного онлайн-банкинг и мобильные приложения. Я тогда думал, что в продуктовой компании работают, по большей части, люди заинтересованные в развитии продукта, тогда как в аутсорсе большинство разработчиков работали по принципу \u0026ldquo;сегодня один проект, завтра другой, так зачем сильно напрягаться сегодня?\u0026rdquo;. Не скажу, что я видел какой-то огонь в глазах разработчиков в банке, однако я видел яркое отношение людей к проектам в аутсорсе. Люди в аутсорсовой компании, которые участвовали далеко не в первом проекте, были \u0026ldquo;расслабленными\u0026rdquo; и не заботились об архитектуре программного кода. Сейчас я думаю, что именно таким я и видел в целом \u0026ldquo;температуру по больнице\u0026rdquo;.\nСпустя пару лет и сменив один аутсорс другим гораздо меньших масштабов я понял, что я был не совсем прав: слышал звон, да не знал где он. Я думаю, что\u0026hellip;\n отношение разработчика к проекту, где он задействован, базируется на том, видит ли он возможности чему-то научиться или нет.\n В банке я видел многих разработчиков, которые с энтузиазмом приходили на работу и искренне обсуждали проблемы продукта, над которым работали. Курилки, посиделки в кафетериях на этажах, мероприятия вне стен банка - везде слышались разговоры о сайте, о проектах и проблемах интеграции. В аутсорсе разговоры в курилках были менее активные, а если и были, то только между разработчиками одного проекта. Иначе говоря, как будто продуктовые разговоры, но в меньших масштабах.\nЯ думаю, что разговоры о проекте в контексте, где таких разговоров быть вроде как не должно, появляются в двух случаях:\n Разработчик хочет решить проблему и научиться чему-то новому. Разработчику хочется пожаловаться и выговориться.  В обоих случаях нет разницы, продуктовая это разработка или аутсорс. Конечно, все мы люди и иногда хочется, чтобы нас выслушали в определенных ситуациях, где нам даже совет и не нужен, поэтому рассмотрим более близко первую причину.\nЧему можно научиться на проекте На любом проекте каждый может найти что-то, чего он до этого не делал, и это может быть:\n технологии; фреймворки; алгоритмы; инструменты; роли на проекте; менторство над менее скилловыми тиммейтами.  Мне кажется, что попробовать себя в новой роли на проекте - не менее интересно, чем освоить новые технологии. Например, я перешел в другую компанию пару месяцев назад для того, чтобы примерить на себе роль тимлида на проекте, который почти ничем не отличался стеком технологий от предыдущего. Другой разработчик может найти что-то новое для себя в решении бизнес-задач, которые раньше он не решал никогда. Один мой хороший друг и сильный програмист по совместительству ушел в компанию, которая захотела запустить проект по прогнозированию нагрузки на общественный транспорт на основе количества транзакций оплаты проезда в единицу времени в разные периоды суток. В этом проекте его заинтересовала именно реализация алгоритма прогнозирования.\nРаботать же с людьми, которые не видят в проекте ничего нового для себя, на мой взгляд, немного демотивирует, если не осознавать причин. Сперва может показаться, что \u0026ldquo;зачем мне пахать на проекте, хотя рядом сидит в развалку товарищ и не парится\u0026rdquo;. Товарищ действительно имеет полное право сидеть вразвалку и не париться, однако ты должен понимать, что на это есть причины, как и у тебя есть причины пахать на этом проекте. Ленивый товарищ просто сидит, пока капает зарплата на оплату платежей по ипотеке, а тебе же необходимо как можно больше нахватать опыта и навыков, которые однозначно пригодятся тебе в будущем.\nСоветы Тимлидам и менеджерам можно дать совет такой: всегда нужно искать тех, кто хочет научиться у вас чему-то новому. Такие разработчики, как минимум, честны с собой и с вами, а значит вы будете уверены в их ожиданиях и мотивации. А если у вас на проекте нечему научиться сильному кандидату, то лучше так и сказать и предложить больше зарплату - авось кандидат и \u0026ldquo;купит\u0026rdquo; у вас позицию на этих условиях. Однако это опасно, потому что если привлечь спеца только деньгами, то делать это бесконечно не получится - деньги далеко не бесконечный ресурс. Поэтому необходимо будет после найма искать иные возможности заинтересовать его.\nРазработчикам, которые понимают, что у них огонь в глазах на текуем проекте не горит, могу посоветовать только банальные вещи:\n расширить круг своей ответственности; менторство над джунами; внедрение совершенно новой технологии на проекте; роль тимлида нового стрима в рамках текущего проекта или переход на другой проект на роль тимлида; pet-проекты.  Если же ты понимаешь, что ничего из вышеперечисленного ты не хочешь, то можно вполне заняться личными pet-проектами, и, возможно, заряда огня в глазах хватит и на рабочие задачи. Всегда есть что-то, чему можно и нужно научиться, главное - не переставать искать, а иначе программирование перестанет быть хобии и станет \u0026ldquo;нелюбимой\u0026rdquo; работой.\n","permalink":"https://maximgorbatyuk.github.io/blog/opinion/2020-03-07-seeking-new-to-learn-is-important/","summary":"Предыстория Идея этой статьи родилась, пока я писал статью на другую тему: \u0026ldquo;Product development vs outsourcing\u0026rdquo;. За мою небольшую карьеру я успел поработать сначала в двух продуктовых компаниях, а затем в двух аутсорсовых. Переход с продуктовой разработки в аутсорс случился два года назад (2018) и показался мне кардинальным. С тех пор я держал в голове мысль написать об этом статью.\nСперва мне показалось, что в продуктовой компании работать лучше. Продуктовой в данном случая я называю банк, который разрабатывал свой веб-сайт, систему мобильного онлайн-банкинг и мобильные приложения.","title":"Желание научиться новому видно по горящим глазам разработчика"},{"content":"В начале доклада Егор предупреждает, что все, что он расскажет в течение последующих 40 минут, относится к его опыту и к его компании, поэтому необходимо отнестись к его словам с долей скепсиса и иронии. Тем не менее, это его мнение, и он рассказывает \u0026ldquo;от души\u0026rdquo;. Егор действительно провел около тысячи интервью, но конкретной цифры он не знает. В видео представлены рассуждения о рассчетах цифры, но для конспекта они мало важны.\nОт автора статьи. Мне нравится подход Егора Бугаенко к разработке софта и организации связанных с этим процессов. Я конспектирую некоторые его видео-доклады, и этот (Мой опыт проведения 1000 интервью / Егор Бугаенко (Zerocracy)) я публикую с разрешения Егора. По ходу текста я даю свои комментарии к его словам, используя наклонный шрифт. Текст написан от третьего лица, но иногда перехожу на повествование от первого. Доклад опубликован и на habr.com\nГрехи интервью Егор расскажет о семи грехах проведения интервью, которые совершают многие работодатели.\n1. Гордыня (arrogance) Поставить этот грех на первое место списка Егора побудил его коллега, который, к тому же, находился в зале во время доклада. Однажды он подошел к Егору и сказал \u0026ldquo;Мы классно проинтервьюировали специалиста, мы почти 2 часа разговаривали\u0026rdquo;. Егор же сказал в ответ, что он не умеет интервьюировать и в нем присутствует, возможно, гордыня - интервьюер считает, что он умнее, чем центры сертификации.\nОценку технических навыков специалиста стоит поручить соответствующим сертифицирующим центрам типа Microsoft и Oracle. Любой программист за приемлемые для себя деньги может пройти сертфикацию и показывать его интервьюерам. Это позволит сэкономить время обоим сторонам интервью. Центров сертификации много, и они есть для почти каждого языка программирования. В целом Егор считает, что\n если вы интервьюируйте человека больше пятнадцати минут, то вы - некачественный интервьюер\u0026hellip;. чем дольше вы задаете технические вопросы, тем более вы неграмотный интервьюер.\n Учитесь доверять сертификационным центрам. Если у кандидата нет сертификации, значит он, по мнению Егора, средний специалист. В таком случае пары ключевых вопросов о языке будет достаточно, чтобы понять уровень кандидата. Егор же сам уже много лет не задает технические вопросы совсем: он показывает файл с кодом кандидатам и просит показать проблемы, которые они могут найти. Ошибки в этом коде допущены намеренно. Какого уровня кандидат найдет ошибки в представленном коде - низкоуровневые или высокоуровневые - и покажет Егору уровень специалиста.\nМнение редактора. Согласен насчет пары высокоуровневых вопросов - они больше скажут об уровне специалиста, чем вопросы по конструкциям языка и его синтаксису.\n2. Доверчивость (credulity) Здесь Егор имеет в виду доверчивость к резюме. Обычно кандидат приходит на интервью и начинает разговор с последнего места работы. Ты ему вопрос \u0026ldquo;какой ты программист\u0026rdquo;, а он в ответ начинает рассказывать о том, где он работал: как в яндексе занимался проблемами поиска в интернете, в газпроме - обеспечением поддержки нефтяных вышек, а в сбербанке - проблемами обслуживания кредитной системы. Но по факту и там, и там, и там человек занимался рефакторингом какого-то Java-кода, написанном до него. Мы доверяем громким словам кандидата, но по сути его уровень может быть не так высок, как он сам считает. Для Егора предыдуще места работы ничего не значат. А верит Егор следующей информации:\nOpen source contribution Егор уже неоднократно говорил, что если разработчик считает себя хорошим программистом, заинтересованным в своей карьере, а не отсиживающем в офисе с девяти до пяти, то он должен делать вклад в open source. Либо это будет вклад в собственные проекты, либо в открытые продукты других авторов. А если кандидат говорит, что отработал 10 лет в нескольких банках, а еще у него жена и ребенок и поэтому он не делает вклад в open source, то это для Егора - один из звоночков. Человек за 10 лет работы не нашел ничего, что можно было бы улучшить и выложить в открытый доступ, и это показывает Егору, что перед ним слабый специалист.\nПо мнению Егора, люди, у которых есть вклад в open source, должны получать больше, потому что они нашли в себе смелость, время и энтузиазм довести до состояния продукта какой-то кусок кода, который они написали в XXX-банке и выложить его в open source. И Егор просит не упоминать NDA, потому что написанный в стенах работодателя код, который сортирует коллекцию более эффективно, чем стандартные методы языка, не покрывается NDA. NDA - это о неразглашении информации о самом работодателе, его сотрудниках, структуры компании и прочей конфиденциальной информации, касающейся непосредственно работодателя. Java-код уж точно не покрывается NDA.\nСертификаты О сертификатах Егор уже упоминал выше.\nCommunity Егору интересно, кто из программистов знает кандидата. Не предыдущие работодатели, а именно технические специалисты. Какое влияние оказывает конкретный кандидат на комьюнити. Блог, open source продукт, доклады на митапах или даже организация этих митапов. Мало кто может похвастаться тем, что другие программисты следуют за ним.\nPet-проекты Егору нравится, когда разработчик ведет свой собственный продукт, за который ему никто не платит: собственный фреймворк или вебсайт для программистов или нечто похожее. Таких специалистов Егор ценит гораздо выше.\nStackoverflow Этот сайт вопросов и ответов вытеснил собой все программистские форумы, считает Егор. Если кандидат говорит, что использует stackoverflow не только в readonly-режиме, то Егор ценит такого кандидата выше. Даже вопрос задать нужно уметь задать правильно, что уж там говорить об ответах. Егор советует всем просто попробовать оформить хотя бы вопрос так, чтобы его поняли, разобрались и помогли ответом. Это не так легко, считает Егор. Что уж говорить об ответах: нужно успеть отправить ответ быстрее остальных, и ответ должен быть правильным и оформлен так, чтобы его поняли многие.\n Егор обращает внимание только на эти 5 пунктов резюме. Доверять словам, что кандидат работал 7 лет в банках и только поэтому он является хорошим программистом, глупо, говорит Егор. Факт, что человек просидел в банке, это месседж о том, что его просто не могли оттуда уволить.\nМнение редактора. Согласен почти по всем пунктам, но признаю, что следовать им всем действительно очень тяжело. Одни ответы на stackoverflow чего стоят: ты должен успеть написать правильный ответ, да еще и так, чтобы его можно было бы взять и перенести себе в код. Мне кажется, что чтобы делать так, нужно действительно проводить \u0026ldquo;на пульсе\u0026rdquo; много времени в stackoverflow. Лично для себя я не вижу такое.\n3. Эгоцентризм (self-obsession) Компании при найме сотрудников считают, что они нанимают только идеально подходящих работников среди всех кандидатов. В пример Егор приводит твит Макса Ховела (Max Howell) - автора программы Homebrew - где он сетует на Гугл: Гугл отказал в найме Максу из-за того, что он не сумел инвертировать бинарное дерево на доске, даже несмотря на то, что 90% разработчиков Гугла пользуются программой Homebrew.\nЕгор считает, что Макс - другого сорта программист. Неважно, что Макс не умеет инвертировать деревья, да и не должен он этого уметь. Макс - это такой разработчик, способный запустить продукт, которым пользуются миллионы людей во всем мире. Но процесс рекрутмента Гугла сделан таким образом, что кандидаты должны пройти ряд стандартных собеседований со стандартными вопросами, после которых они уже будут общаться с тем, кто и будет применять индивидуальный подход.\nЕгор также рассказывает свою историю попытки пройти интервью в Amazon. В 2016-ом году его пригласили на интервью, и рекрутер долго рассказывал о том, что читал блог Егора, просматривал его Github-аккаунт и рад, что он приехал. Но затем Егора отвели в другой корпус, где он встал в конец очереди из других специалистов. Когда дошла до него очередь, он вошел в комнату, и там его попросили инвертировать бинарное дерево тоже. В ответ Егор спросил, знают ли его интервьюеры, а они сказали: \u0026ldquo;да нам все равно\u0026rdquo;. Егор признается, что он имеет отдаленное отношение к алгоритмам, но все равно попытался пройти собеседование, и по реакции интервьюеров понял, что не проходит его. После в комнату пришло двое других интервьюеров и дали Егору другую задачу на алгоритмы. Егор остановил интервью и попросил позвать того рекрутера, который его и пригласил в Сиэтл. В ответ он услышал, что у них другой пайплайн. В итоге собеседование пришлось прервать.\nЕгор признается, что он сам, как и Макс из первой истории, программист о другом: он не умеет решать алгоритмические задачи, но зато умеет запускать проекты и продукты. А вот многие работодатели грешат как раз тем, что пытаются подстроить окружающий мир под свой пайплайн рекрутмента. Они думают, что знают, что задать программисту, какие критерии важны. Егор считает, что\u0026hellip;\n на интервью нужно задать вопрос кандидату \u0026ldquo;Расскажи, что ты за программист и почему мы должны тебя нанять?\u0026rdquo; и слушать его внимательно.\n Егор рассказал еще историю, что когда-то услышал вопрос от кандидата \u0026ldquo;Чему я могу у вас научиться?\u0026rdquo; Работодатели должны не кандидатов подстраивать под пайплайн и нанимать именно тех, кто смог адаптироваться, а искать тех, кто яркий сам по себе. Егор советует компаниям оставить на технические вопросы 5-10 минут, а затем спросить кандидата \u0026ldquo;а что в тебе такого интересного?\u0026rdquo; Если в ответ кандидат говорит, что в нем нет ничего интересного и что он просто Java-программист, то это - одна категория, а если он начинает рассказывать, что пишет собственный open-source фреймворк, который решает такие-то вот проблемы, не решенные в аналогах, то это - другая совершенно категория людей.\n4. Неопределенность (vagueness) Очень часто Егор видит, что многочасовые интервью заканчиваются вердиктом \u0026ldquo;Good guy!\u0026rdquo;. Это - нечеткий, субъективный результат интервью, который нельзя перепроверить даже спустя 2 недели. Егор же заканчивает свои интервью таблицей с баллами. Что за критерии в таблице, Егор специально не показал. После интервью у него есть некая объективная оценка, по которой он может уже сравнивать кандидатов на позицию. В противном случае, когда у нас есть только вердикты \u0026ldquo;Good guy!\u0026rdquo; и \u0026ldquo;Bad guy!\u0026rdquo;, мы не можем оценить ретроспективно кандидатов и нанимаем на эмоциональном ощущении. Это, считает Егор, непрофессионально. Интервьюер в таких случаях просто не умеет выразить свои ощущения в цифрах и выдать метрику, что конкретный кандидат нравится ему потому-то и потому-то в 5.5/10 баллах. Во \u0026ldquo;внешний мир\u0026rdquo; интервьюер может выдать вердикт в виде только лишь \u0026ldquo;Good guy!\u0026rdquo;, однако для себя он уже понимает почему так и насколько \u0026ldquo;сильно\u0026rdquo; хорош кандидат.\n5. Враждебность (hostility) Егор часто видит, как интервьюеры считают, что они самые умные, ведь они уже сидят в этой компании и теперь их задача на собеседовании - не кандидата раскрыть и понять его уровень, а себя показать. Такие интервьюеры задают вопросы надменно и высокомерно, \u0026ldquo;пугая\u0026rdquo; кандидатов. Это тоже непрофессионально. Интервьюер должен раскрывать кандидата и ни в коем случае не показывать свои эмоции насчет его ответов. Что бы кандидат не говорил, какие бы \u0026ldquo;глупости\u0026rdquo; по мнению интервьюера не озвучивал, это мнение кандидата и хорошо, что он это рассказывает на интервью. Уже после собеседования интервьюер может обсуждать услышанное с коллегами и \u0026ldquo;высмеивать\u0026rdquo; в случае, если кандидат нес чушь.\n На интервью цель - раскрыть, а не закрыть кандидата, иначе мы его не узнаем. Цель - узнать кандидата, а не себя показать.\n Враждебность на интервью говорит о непрофессионализме специалиста. Если вы видите, что кто-то \u0026ldquo;жестко\u0026rdquo; проводит интервью или даже хвастается и гордится этим, то перед вами плохой интервьюер.\n Жесткость только мешает, она приводит к потере информации.\n Мнение редактора. Я видел такое много раз. Когда-то на моем собеседовании интервьюер просто вставал и ушел. Кстати, меня он \u0026ldquo;валил\u0026rdquo; как раз вопросами по алгоритмам и коллекциям. Я тоже далек от алгоритмов и прямо об этом сказал на собеседовании. Я не сильно рефлексировал по этому поводу, потому что знаю, что алгоритмы - не мое, и просто \u0026ldquo;забыл\u0026rdquo; об этом интервью. Сейчас же после просмотра доклада я понял, что я просто не подходил под требования компании и это не значит, что я был плохим специалистом.\n6. Эмоции (emotions) Люди проявляют эмоции, и многие могут сказать, почему бы не проверить эмоциональню составляющую кандидата: поведение в стрессовых ситуациях, например. Некоторые даже называют это soft skills. Егор не сторонник такого интервью и считает, что soft skills точно не об этом: soft skills не про эмоции. Soft skills - это те навыки, которые напрямую не относятся к программированию, но тесно связаны с ним:\n Branching - умение работать в нескольких ветках, даже одновременно. Это умение разбивать большую таску на множество мелких и даже параллельных, а также умение быстро переключаться между контекстами. Drawing - умение доносить свои мысли через диаграммы. Даже обычные квадраты и стрелки вместо UML лучше, чем ничего. Writing - умение писать документацию и выражать свои мысли письменно. Не только джуны должны уметь писать документацию. Intriguing (интриги) - умение понимать и вести политику в офисе. Это тоже важный навык, хотя многие считают, что \u0026ldquo;они просто программисты\u0026rdquo;. Нужно уметь понимать, кому написанный код нужен, а кому - мешает. Testing - умение построить систему тестирования, написать правильные юниттесты. Reporting. Многие умеют кодить, но написать об этом не могут. Вроде и накодил, и протестировал, и задеплоил, но написать об этом не сумел, что перечеркивает труд за всю предыдущую неделю. Volunteering - умение участвовать в активностях, за которые не платят. Если их делать, то карьера будет расти: помощь в организации профессиональных митапов, выступлений и тд. Delivering. Многие программисты не понимают, как код с их лэптопа попадает на продакшн. Нужно уметь понимать это. Tweeting - умение работать с социальными сетями. Если вы считаете, что соц.сети - не про вас, то вы просто ретроград. Когда-то и про мобильные телефоны говорили \u0026ldquo;зачем эти мобильные телефоны? На работе есть телефон, дома тоже\u0026rdquo;. Нужно уметь представлять себя в соц.сетях правильно. Если кандидат говорит, что у него нет профиля в инстаграме, то это - ретроград, который не умеет им пользоваться. Лучше сразу иметь дело с тем, кто понимает, что соц.сети - зло, если пользоваться ими 8 часов в день, если вступать в дискуссии в твиттере, если в инстаграмме лайкать все подряд. Соц.сети тоже можно превратить в инструмент для работы. Relaxing. Если человек ничего не может сказать насчет того, как он отдыхает, то лучше не работать с такими людьми. Если человек не умеет отдыхать, то у него будет низкая производительность. Charging. Многие не умеют брать деньги за свою работу и не могут сказать, сколько они стоят. Умение торговаться, умение понять условия и посчитать стоимость этих условий. Asking - умение правильно задавать вопросы.  7. Загадочность (mistery) Загадочность после интервью и отсутствие обратной связи кандидату. Причин может быть много: NDA, \u0026ldquo;Good guy\u0026rdquo;-фидбек или иные подобные. Важно оставить кандидата с хорошим впечатлением о компании, особенно когда мы отказываем кандидату. Человек должен уйти с каким-то конструктивом. Егор сам грешит этим, и если только если кандидат спрашивает об обратной связи, тогда он ее и дает. \u0026ldquo;Мы с вами свяжемся\u0026rdquo; - это ни о чем, кандидат понимает, что перед ним - непрофессионалы.\nВ пример Егор приводит свои интервью. Он дает кандидатам кусок кода, в котором они должны найти ошибки. В конце интервью, если кандидат просит, Егор показывает весь список ошибок и объясняет, что категории ошибок тоже разные, и если кандидат нашел высокоуровневые ошибки, то его наймут, а если только минорные, то с ним не будут иметь дело. Тогда кандидат понимает, что его навыки были оценены по объективной системе, а не на основе субъективной оценки \u0026ldquo;нравится / не нравится\u0026rdquo;.\nМнение редактора. Согласен на все сто. Я и сам, как интервьюер в EPAMе, старался давать обратную связь прямо на интервью, минуя официальные процессы. Будучи кандидатом, я и сам спрашивал обратную связь \u0026ldquo;тут же\u0026rdquo; и видел, как интервьюеры с радостью рассказывали свое мнение о моих навыках.\n Егор не \u0026ldquo;перечеркивает\u0026rdquo; кандидатов на интервью, а дает им конструктивную обратную связь: чего им не хватает для найма в конкретный момент. Тогда кандидат понимает, что ему нужно улучшить, если он хочет работать с Егором, и делает какие-то выводы.\nВопросы из зала Не противоречите ли вы сам себе? Вы в книгах говорите, что главное - чтобы разработчик приносил ценность, а сейчас говорите, что разработчик интересен для вас только тот, кто медиен: гитхаб-аккаунт, блог, митапы. Я действительно ценю тех разработчиков, которые больше зарабатывают (для компании - прим.ред.), которые закрывают больше тикетов. Хороший программист - тот, кто коммитит больше всего кода в репозиторий, но это определяется только через время. Но момент проведения интервью я не могу об этом судить, ведь я не знаю человека и стоит ли ему вообще давать тикеты. По опыту могу сказать, что нанимая человека с блогом, выступлениями и гитхаб-аккаунтом, я получаю шансов больше на то, что он будет коммитить больше, чем тот, кто не медиен. А вот когда человек приходит совершенно без ничего и говорит, что \u0026ldquo;я проработал в банке 10 лет и я обязательно буду закрывать задачи\u0026rdquo;, то закрывать задачи он не будет, потому что он не умеет многие вещи.\nЦентры сертификации не отражают навыки, потому что ответы на вопросы уже есть в интернете. Заучил - и прошел сертификацию успешно. Разве сертификат может объективно оценить программиста? Нет, действительно не может, однако если сравнивать двух программистов: один с сертификатом, а другой без него, то для Егора программист с сертификатом лучше. Это не значит, что он в целом лучше, но на момент интервью это так.\nПо поводу медийности. У меня на практике была ситуация, когда у человека было выступление на конференции, хороший гитхаб-аккаунт и код он хороший написал, но на банальные вопросы об интерфейсах коллекций он ответить уверенно не смог. Наверное, все же нужно копать глубже. Вы можете подумать, что сделать доклад так легко. Ну выйдете на сцену и сделайте доклад по Java, и мы посмотрим как у вас это получится. Для того, чтобы это сделать, нужно пройти длинный путь: подготовить доклад, пройти отбор программного комитета, подготовиться к выступлению. Конечно, если человек медиен тем, что постит котят и репостит мемы про Java, то это одна медийность. А если человеку есть что сказать на митапе, то это уже другая категория медийности.\nЧеловек из вашей истории действительно может не знать всех всех коллекций, но это значит, что человек умеет что-то другое. Если же вам нужен человек, который знает все коллекции в языке, то тогда и не смотрите на медийность кандидата. Тогда лучше сделать упор на сертификации, потому что сертификация покроет ваш вопрос про коллекции. Смотрите на конечный результат. Проверять человека, который говорит \u0026ldquo;я знаю все коллекции\u0026rdquo;, говоря \u0026ldquo;ну садись, будем два часа проверять это\u0026rdquo; - это просто непрофессионально.\nМнение редактора. Ощущение, что Егора очень нервирует этот вопрос. Явно ему уже не раз задавали его, и он очень бурно на него реагирует. Впрочем, этот ответ перекликается под озвученный тезис в докладе о том, что нужно не искать людей, подходящих под определенный стандартный пайплайн, а спрашивать кандидатов, в чем они сильны. Один - в алгоритмах, другой - в problem-solving-навыках. Так что вопрос из зала в этом контексте звучит так, как будто Егор не смог донести свою мысль, и его раздражительность объяснима.\nТы немного упоминал про soft-skills, но ты понимаешь, что человек груб/токсичен и не совсем подходит под команду. Как ты скажешь ему \u0026ldquo;нет\u0026rdquo;? Ну так и скажу: \u0026ldquo;нет\u0026rdquo; (смех в зале). \u0026ldquo;Я тоже человек, у меня тоже есть эмоции\u0026rdquo;, - говорит Егор - \u0026ldquo;Но я понимаю, что я делаю в этот момент что-то неправильное\u0026rdquo;. Егор говорит о том, что причин грубости на интервью может быть множество, и не всегда удается раскрыть человека.\nЕгор также решил рассказать историю о ненайме одного сотрудника в Нидерландах. Егор занимался интервьюированием кандидатов в команду, которая исторически сложилась только лишь из белых молодых мужчин. Собеседование Егор проводил для индуса средних лет, и специалист показал себя неплохо. Егор после интервью сомневался, что индуса возьмут именно из-за того, что он отличается от остальных участников команды. Он передал менеджеру свой фидбек, а менеджер сказал \u0026ldquo;Not a good fit\u0026rdquo; без объяснения причин. Егор до сих пор не знает, правильно ли сделал менеджер или нет.\nМнение редактора. С одной стороны, действительно отсекать специалиста только лишь по национальному или возрастному приницпу - неправильно, но с другой стороны, мне кажется, что индус средних лет просто не вписался бы в команду молодых белых парней. Так что вполне вероятно, что менеджер поступил правильно, хоть и некрасиво с первого взгляда.\nЧто делать, если идеального кандидата нет, а проект надо запускать едва ли не сегодня? Ситуация очень типична. Егор считает, что это бывает так почти всегда. Очень мало, кто может попасть подо все критерии идеального кандидата, которые Егор рассказал. Именно поэтому Егор ставит оценки по 10-балльной шкале, оценивать кандидатов и уже отбирает тех, кто наиболее подходит под поставленные задачи. Егор любит говорить уже сформированным командам, что они не лучшие только лишь потому, что их взяли в компанию. Программисты, естественно, \u0026ldquo;делают большие круглые глаза\u0026rdquo; (с) и недоумевают. На что Егор уже показывает свои критерии оценки лучших программистов и советует подтягивать свой уровень.\n На поиск идеального кандидата может уйти вся жизнь.\n Егор признает, что таких ярких людей мало, однако он не хочет быть неким ситом, которому нужны только идеальные сотрудники без вложений, и именно поэтому он и выступает на конференциях и продвигает идеи open-source.\nМой начальник хочет очень качественной технической части интервью, иначе, говорит он, \u0026ldquo;мы берем кота в мешке\u0026rdquo;. Что делать? Да, такое бывает. Есть люди, которые считают, что если интервью шло меньше чем два часа, то это значит, что оно некачественное. Что делать в такой ситуации? Пытаться переубедить своего начальника, показать что он не прав.\nЕгор, ты даешь код кандидату на проверку. А что делать, если кандидат говорит, что \u0026ldquo;все нужно переписать\u0026rdquo;? Это признак яркости или, наоборот, ему не интересно разбираться в прежнем коде. Егор считает, что любой месседж от программиста типа \u0026ldquo;тут нужно все выбросить и переписать заново\u0026rdquo; сразу деклассифицирует его в джуниор девелопера автоматически. Переписывание заново всегда приводит к идентичным результатам, если переписывает та же команда. Нужно не код менять, а команду.\nПрофессионал, открыв код и увидев, что его нужно переписать, закрывает код и говорит остальным: \u0026ldquo;а давайте пойдем на курсы\u0026rdquo; или \u0026ldquo;а давайте я расскажу вам что такое юниттестирование\u0026rdquo; или \u0026ldquo;а давайте мы UML изучим\u0026rdquo;. Вот это - профессиональный подход.\nМнение редактора. Довольно интересная мысль про джуна и \u0026ldquo;все переписать\u0026rdquo;. Действительно, \u0026ldquo;все переписать\u0026rdquo; - это борьба со следствием, а не с причиной. Не раз слышал от коллег фразы типа \u0026ldquo;я бы тут вообще все переписал\u0026rdquo; и каждый раз я сомневался с результате такого переписывания. Приятно было понять, что Егор с его опытом думает так же.\nЕсли с разработчиками разобрались, то что вы скажете насчет интервью тестеров или бизнес-аналитиков? Егор признался, что у него мало опыта в этом и поэтому он не стал отвечать на вопрос.\nЕгор, а вам не кажется, что в Amazon процесс построен так, что им нужно собеседовать тысячи разработчиков в неделю, и поэтому вы просто не дошли до тех самых людей, которые и проводят интервью на основе вопроса \u0026ldquo;чем вы хороши\u0026rdquo;. Возможно, Егор действительно просто не дождался, и подстраиваться только лишь под него - слишком дорого для Амазона. Поэтому и его пустили по пайплайну. Доклад не об этом, и Егор как раз и говорит о том, что такой пайплайн не всегда приносит профиты. Именно в таких пайплайнах могут потеряться интересные люди, а проходят как раз те, кто учится проходить стандартные интервью только лишь для того, чтобы сесть в Google или Amazon.\nВы много рассказали о том, как выявить, что кандидат умеет делать, но что насчет того, как человек думает? Я даю задачки на алгоритмы и логику и применение шаблонов проектирования. Егор согласен с тем, что необходимо выявлять как человек умеет думать. Но Егор пользуется тем же куском кода и смотрит, как человек думает над ним. Кто-то вслух рассуждает, кто-то задает вопросы, а кто-то молчит. Кусок кода состоит из 50 строчек, и если человек говорит \u0026ldquo;дайте мне время подумать\u0026rdquo; и молчит в течение минуты, а затем говорит, что он бы переименовал переменную иначе, то это уже о чем-то говорит. Егор считает, что человек этот в течение минуты думал, а может и не думал даже, но зато вернулся с какой-то ерундой. Другой программист начинает читать код построчно и начинает выдавать идеи \u0026ldquo;здесь вот так бы сделать\u0026rdquo;, \u0026ldquo;здесь бы я поправил так\u0026rdquo; и так далее.\nДавать задачки на мышление типа \u0026ldquo;сколько кочегар вместится в автобус\u0026rdquo; нерационально, по мнению Егора: во-первых, ему самому бы стало скучно, а во вторых, Егор не видит возможности выставить объективной оценки для сравнения двух разных программистов.\n","permalink":"https://maximgorbatyuk.github.io/blog/management/2020-03-05-my-experience-of-interviews/","summary":"В начале доклада Егор предупреждает, что все, что он расскажет в течение последующих 40 минут, относится к его опыту и к его компании, поэтому необходимо отнестись к его словам с долей скепсиса и иронии. Тем не менее, это его мнение, и он рассказывает \u0026ldquo;от души\u0026rdquo;. Егор действительно провел около тысячи интервью, но конкретной цифры он не знает. В видео представлены рассуждения о рассчетах цифры, но для конспекта они мало важны.","title":"Мой опыт проведения 1000 интервью. Егор Бугаенко"},{"content":"Написать эту статью меня побудил случай в Германии. Я решил провести пару недель в Европе, и чтобы комфортно пользоваться интернетом, решил купить симкарту и пакет в размером в 3гб. Казалось бы, одна из самых простых операций в СНГ, которая не заняла бы много времени. Но мы ведь в Германии, стране, где капитализм и социализм переплелись в крайне занятный тандем.\nЧто нужно туристу, чтобы начать пользоваться интернетом в другой стране?\n Купить симкарту. Купить интернет-пакет. Пользоваться в свое удовольствие.  Однако я, будучи туристом в Германии, столкнулся с рядом проблем и совершением ненужных, с моей точки зрения, действий.\nИстория покупки симкарты У выбранного мной оператора были одни из самых выгодных условий по предложению интернет-пакетов и стоимости: 3гб интернета, безлимит по звонкам и стоимость в 15 евро, что относительно недорого. Если бы не эти факты, то я бы не стал проделывать весь этот квест, о котором ниже.\nСначала я очень удивился, когда я пришел в отделение и узнал, что у них нет самих симкарт. Довльно странная работа со складом, на мой взгляд. Тут вопрос не только удобства клиентам и особенно туристам. Из-за того, что в отделении не было запаса карт, клиенты уходят к их конкурентам. Так сделал бы и я, но условия пакетов привлекали. Мне посоветовали пойти в местный филиал \u0026ldquo;Техносулпака\u0026rdquo; и купить симкарту там, а приобрести пакет - у них. Покупка симкарты заняла минут 30 из-за того, что продавец долго заполнял данные паспорта. Возможно, продажа иностранцам чего-либо в Германии требует заполнения этой электронной макулатуры, но мне как клиенту это стоило времени.\nЧто ж, \u0026ldquo;симка\u0026rdquo; куплена, остался интернет-пакет. Возвращаюсь в отделение оператора, и там мне вместо пакета \u0026ldquo;продают\u0026rdquo; два листа формата А4: на одном из них был код, введя который я бы получил 15 евро на свой счет, на втором - номер телефона, по которому я должен был позвонить для активации интернет-пакета. Тут у меня возник резонный вопрос: а зачем тогда нужен был этот поход в отделение? Я помню времена, когда в магазинах продавали карточки на пополнение баланса телефона: вводишь комбинацию из цифр и звездочек и получаешь деньги на счету.\nВторой вопрос, который бепокоил меня еще больше - это необходимость звонить по какому-то номеру для активации пакета. Зачем? Почему? На каком языке мне там нужно будет общаться? Здесь мне уже помогли мои родственники, у которых я и остановился. Как мне сказали, на телефоне был робот, который просил нажимать нужные цифры для подтверждения покупки пакета. Таким образом, спустя два часа и кучи потраченных нервов из-за непонимания необходимости тех или иных действий.\nЗачем нужно столько людей? В Казахстане, где я живу, подобная задача требует лишь одного похода в отделение и буквально 15 минут времени. Не знаю, как проходит регистрация симкарт для неграждан РК, но почему-то кажется, что никаких дополнительных сложностей со стороны клиента, кроме ожидания, это не требует. Процесс автоматизирован лучше, чем в Германии. Я сначала искренне не понимал, почему здесь с такой простой задачей возникли такие проблемы, а потом пришла одна идея. Мне кажется, что Германия таким образом обеспечивает рабочие места людям. Об этом еще писал Юваль Ной Харари в книге \u0026ldquo;21 урок для XXI века\u0026rdquo;. Новаль пишет, что государство, вполне вероятно, сдерживает прогресс для того, чтобы низкоквалифицированное население успело адаптироваться к новым реалиям автоматизации и переучиться на другие профессии.\nМне кажется, что Германия, как страна со смешанной экономикой с большим уклоном в социалистический строй, и обеспечивает рабочие места иммигрантам за счет сдерживания автоматизации и прогресса. В рассказанной мной истории участвуют двое людей: продавец симкарты и консультант в отделении, хотя всю услугу мог предоставить только один человек вместо двух. Сохранение рабочими местами людей - это обеспечение стабильности в обществе. Думаю, что это требуется еще больше в том государстве, которое вынуждено содержать иммигрантов и сохранять \u0026ldquo;спокойствие\u0026rdquo; своим гражданам в этих условиях.\nСтабильность vs прогресс С одной стороны, полдня ожидания симкарты вместо двадцати минут - небольшая плата за относительную стабильность в обществе, где каждый ее работающий гражданин обязан отдавать почти половину заработной платы в пользу государства. С другой стороны, такой подход к экономике - отход от капитализма. Можно долго ругать капитализм как строй, однако человечество ничего лучшего пока не придумало, на мой взгляд. Как бы ни было жестоко, но я считаю, что люди должны учиться быть конкурентно способными уже сейчас, и если твою профессию сокращают в связи с оптимизацией и автоматизацией. Не стоит оттягивать этот момент как можно дольше, потому что прогресс не просто \u0026ldquo;наступает\u0026rdquo;, а уже наступил.\n","permalink":"https://maximgorbatyuk.github.io/blog/opinion/2020-02-27-social-employment-about/","summary":"Написать эту статью меня побудил случай в Германии. Я решил провести пару недель в Европе, и чтобы комфортно пользоваться интернетом, решил купить симкарту и пакет в размером в 3гб. Казалось бы, одна из самых простых операций в СНГ, которая не заняла бы много времени. Но мы ведь в Германии, стране, где капитализм и социализм переплелись в крайне занятный тандем.\nЧто нужно туристу, чтобы начать пользоваться интернетом в другой стране?\n Купить симкарту.","title":"О социальном трудоустройстве"},{"content":"Видео доклада: Youtube-канал Егора Бугаенко.\n Егор давно в разработке софта и видит одну и ту же проблему, которая становится тенденцией в современном менеджменте:\n Менеджмент не трансформируется, а деградирует.\n Менеджмент вместо функции управления, вместо помощи участникам проекта и организации их работы, превращается в бесполезную высокооплачиваемую прослойку, ничего не делающую. В Америке и Европе, считает Егор, немного больше даже. Более того, на конференциях и докладах спикеры даже пропагандируют эту деградацию, называя ее Agile. Егор считает, что это - не Agile точно, и ничего против Agile Егор ничего не имеет: он готов подписаться под всеми двенадцати пунктами Agile-манифеста, кроме шестого - “The most efficient and effective method of conveying information to and within a development team is face-to-face conversation”.\nЕгор выделяет четыре основные проблемы современного менеджмента.\n1. Ответственность vs корпоративные ценности Современные менеджеры заменяют ответственность корпоративными ценностями, тогда как менеджмент должен распределять ответственность между участниками проекта. Вместо четко прописанных инструкций и описаний задач каждому человеку менеджеры предлагают нам командные тренинги и игры и учат нас быть ответственными за общий результат. Нас учат отвечать “ни за что”. Егор считает, что необходимо каждому участнику проекта давать личные метрики эффективности и фидбек на основе работы каждого отдельно взятого члена команды. Менеджеры же пытаются привить мысль о том, что\n либо команда целиком выиграла, либо целиком проиграла.\n Правильный менеджмент должен уметь передавать личную ответственность каждому исполнителю. В итоге в большинстве команд, по наблюдению Егора, ее участники не доверяют менеджменту, они начинают считать, что менеджер им врет под видом продвижения корпоративных ценностей.\n Вместо оценки личных результатов современный менеджмент предлагает размытую командную ответственность.\n 2. Управление проектами vs стрессоустойчивость Современный менеджер в принципе не компетентен. Менеджер проекта должен:\n анализировать риски управлять временем управлять скоупом работы управлять ресурсами  Но Егор видит, что чаще всего на место менеджера в IT-сфере попадают просто более стрессоустойчивые разработчики. Эти современные менеджеры - просто люди, которые дольше сидят на работе, на которых можно легче “кричать”, просто люди, которые способны выдержать больше давления:\n ”Теперь ты не программист, а менеджер, потому что когда все мы выходили в субботу, все остальные расстроились, а ты - не расстроился и сидел допоздна”. ”Ты умеешь разговаривать с клиентом, когда клиент кричит на тебя по телефону, ты не бросаешь трубку, а слушаешь его до конца. Ты - прекрасный менеджер”.  Вместо того, чтобы понимать метрики и методики менеджмента, наши менеджеры знают слова “толерантность”, “эмпатия” и “soft-skills”.\n3. Личная мотивация vs командный дух Правильный менеджмент должен уметь дать разработчикам личную мотивацию и разбираться в вопросах мотивации. Он должен делать так, чтобы каждый участник команды, преследуя и достигая личные цели, делал ценный вклад в общее дело. Но вместо этого современный менеджмент продвигает идеи корпоративных ценностей и value. Вместо того, чтобы признать тот факт, что все мы работаем за деньги, и нам нужно связать нашу личную мотивацию с мотивацией общего проекта, вместо этого нам говорят “Value” и ставят главными мотиваторами для нас внешние показатели всей компании. Иначе говоря, программисту, пришедшему на работу и отвечающему за реализацию конкретной фичи в продукте, менеджмент собирает общее совещание на 2 часа и 150 человек рассказывает, куда идет их компания в последующие пять лет. В итоге лучшие профессионалы из таких компаний уходят, потому что профессионалы честные и жадные.\n Профессионалы хотят, чтобы за их труд платили по-честному, они не хотят “кушать” эти корпоративные ценности, которые ничего лично для них не значат.\n Менеджмент в таких компаниях не знает, как замотивировать профессионалов правильно. Вместо этого менеджеры вешают на всех стенах флаги с лозунгами компании и считают, что все люди после этого станут замотивированы двигаться вперед. Но этого не происходит, лучшие люди уходят, а средние и худшие - остаются.\n4. Документооборот vs митинги Современный менеджмент не умеет правильно организовать документооборот - обмен информацией между людьми. Вместо этого современный менеджмент предлагает нам митинги. Передача знаниями должна происходить дисциплинированным способом через документы, тулзы, электронные средства. Но менеджеры не умеют это организовать, они полагаются на митинги и экспертов. Иначе говоря, такие менеджеры знают, что “есть вон там программист, который уже три года работает, вот он все знает, обращайтесь к нему”. Особенно ярко эта ситуация проявляется, когда в команду приходят новички: новичок пытается погрузиться в проект, но вместо этого ему предлагают “пообщаться вон с тем экспертом”. “В чем же тогда роль менеджмента?”, риторически спрашивает Егор.\n (Современные) менеджеры в этой ситуации лишь наблюдают за процессом, ремонтируют кондиционеры и ставит кофемашины.\n Правильные менеджеры же, в свою очередь, налаживают и организовывают прозрачные потоки информации и делают так, чтобы таких экспертов не было на проекте, а информация двигалась свободно и была доступна всем участникам.\nЕгор даже видит иногда, как такие современные менеджеры гордятся своими экспертами. Они говорят: “У меня есть такой классный программист, на котором держится весь проект”, но Егор считает, что этими словами современные менеджеры расписываются в собственном бессилии. В итоге огромное количество денег и времени тратится на бесконечные митинги, а знания теряются, когда “эксперты” уходят из проекта.\nНекомпетентные лентяи и капризные рабы Возможно грубо звучит, но Егор считает, что в сложившейся ситуации виноваты два типа людей:\n “некомпетентные лентяи” на позициях менеджеров, которые развешивают лозунги компании на стенах и продвигают корпоративные ценности вместо управления; “капризные рабы” на уровне исполнителей, которые приходят в офис и сидят с девяти до пяти. получают зарплату за месяц и капризничают, когда им не хватает денег.  В итоге менеджмент не помогает исполнителям развивать проект - разрабатывать софт - а просто наблюдает за тем, чтобы у участников проекта было хорошее настроение. Егор встречал людей, которые считали, что “чтобы проект двигался в нужную сторону, у программистов должно быть хорошее настроение”. Егор относится к этому скептически.\nЕгор считает, что проектный менеджер должен строиться не на корпоративных ценностях, а на том факторе, который можно описать цитатой:\n Честный ребенок любит не маму с папой, а трубочки с кремом, а честный матрос хочет не служить, а спать. (с) Контр-адмирал В.Г. Доброскоченко\n Правильный менеджмент в компании Егора Бугаенко Правильный менеджмент понимает, что люди приходят на работу для того, чтобы получить деньги. У каждого есть личная мотивация сделать личный вклад в проект, получить за это личный результат и уйти домой в семью, и не нужно им предлагать вместо этого корпоративные ценности. Егор строит свой бизнес на следующих принципах:\n Ставить только персональные задачи. Программист, ответственный за задачу, не может сказать, что он “не сделал задачу потому что…”, она либо сделал ее, либо нет. Открывать метрики производительности. Каждый участник должен видеть, почему он лучше или хуже своего коллеги и как ему подняться на ступень выше и получать больше денег. Егор не скрывает эту информацию, а программисты уважают эту открытость и честность. Платить только за результат. Закрыл тикет - получил оплату. Никаких офисов и митингов. Каждый участник сидит кто где хочет, и нет необходимости сидеть в одном месте.  Построение такого процесса - непростая задача, над ней нужно работать. Менеджер - это не о толерантности или корпоративных ценностях. Менеджер - это диаграммы Ганта, анализ рисков и планирование времени. И когда на конференции заявляют, что задача менеджера - донести корпоративную ценность до исполнителей на нижнем уровне, особенно когда “они устали”, то верить этому не стоит, ведь правильный менеджмент - не об этом.\nВопросы из зала Как рассчитываются количественные показатели эффективности программистов у вас? Одна из метрик - это время решения задач. Учитывая, что тикеты разбиты в среднем на небольшие объемы работы (1 час, по заявлению Егора), то можно сравнить затраченное время программистов друг с другом и понять, кто лучше работает, а кто - хуже. Другая метрика, которую использует Егор, это количество закрытых задач в единицу времени. Егор считает, что метрики могут быть любые, но одно ясно точно:\n метрики должны быть всегда.\n Как поделить правильно задачи и оценить эффективность работы каждого участника, если участники обладают кардинально разными компетенциями и задачи у них тоже не однотипны? Как в этом случае сравнивать? Это и есть задача менеджера - поделить объем работы на маленькие тикеты. Неграмотный менеджер просто говорит разработчикам: “Вот тебе большая задача, сам с ней разберись”, а грамотный менеджер умеет находить способы поделить эти большие задачи на маленькие. И только тогда появляется возможность управлять сроками и рисками. Как можно поделить задачи? Как один из вариантов, Егор предлагает позвать разработчика только лишь поделить задачу на мелкие “кусочки”. Если у менеджера в проекте две-три большие задачи на спринт, то это не менеджер, а надсмотрщик. Управлять большими задачами практически невозможно. Выдал тикет - получил результат, и это повторять как можно чаще.\nНо зачем тогда менеджер нужен, если этот самый разработчик, которого позвали поделить тикеты, может сам передать их остальным участникам команды?\nДействительно, может показаться, что менеджер не нужен. Что можно выдать объем работы команде и сказать: “Вот вам проект, разберитесь там сами, только не поругайтесь.”\n Менеджер нужен для того, чтобы дать информацию тому, кто платит за проект, о том, когда мы его закроем.\n Это и есть главная миссия менеджера, без менеджера нам эту информацию нам никто не даст.\nДолжен ли проектный менеджер обладать техническими знаниями, чтобы верно оценить сроки проекта? Егор считает, что проектный менеджер не должен обладать техническими знаниями, что они ему мешают. Чем больше технических знаний, тем больше они ему мешают заниматься управлением. Менеджер должен уметь использовать ресурсы верно: привлекать одних людей для разбиения объема работы на мелкие тикеты, давать другим людям оценивать эти тикеты, а третьим - имплементить их.\nКак найти грамотного менеджера? Как понять, кто хороший менеджер, а кто - плохой? Егор считает упущением, что почти нигде не обучают проектному менеджменту. Есть методологии управления, есть, например, PMBok, и он, по мнению Егора, один из немногих источников информации о проектном менеджменте. Как вычислить хорошего менеджера? Спрашивать его о принципах из PMBok, хоть это и не является гарантией. Егор не знает более хорошего способа.\nНе демотивирует ли сотрудников метрика рейтинга: в этом месяце он первый, а в следующем - десятый. Егора часто спрашивают об этом: не будет ли команда работать в первую очередь на метрики, а уже потом - на результат проекта. Егор рассказывает, что когда-то Microsoft рассказывали, как отказались от метрик из-за того, что они приводили к ухудшению общего перформанса. Майкрософты винят эту систему оценки в падении своих позиций, потому что хорошие люди стали уходить из этой компании.\nНо если разобраться, почему эта система оценки сыграла против компании, то причина становится ясной. Майкрософт оценивал программистов на основе отзывов их менеджеров, и это Егор и считает причиной, почему эта система не работает. Вместо того, чтобы оценить работу программиста, его результаты, компания оценивает его отношения с менеджером и насколько он ему нравится. Конечно, эта система не работает, ведь программист может не нравиться конкретному менеджеру или просто кофе с ним не попил когда-то, а вот коллега этого программиста попил в нужный момент кофе со своим менеджером, и поэтому он выше в рейтинге по этой системе оценок.\n Конечно, это демотивирует первого программиста, ведь метрика на основе отзывов менеджера оценивает не личный вклад в развитие проекта, а отношения программиста с окружающим его миром.\n Программисты обычно интроверты, менее социальны, и поэтому они получают низкие оценки.\nЕще пример приводит Егор. Его как-то позвали повысить производительность группы тестировщиков в одной европейской компании. Он пришел в команду и предложил им внести метрики производительности. Егор мало что понимает в тестировании, но понимать, кто лучше работает, а кто хуже - нужно, и сделать это можно только через систему метрик. И он предложил такую метрику: кто больше найдет багов с учетом их сложности в неделю, тот и лучше тестировщик. Один из тестировщиков команды работал давно и считался хорошим специалистом, а остальные - молодые ребята. Через неделю посчитали баги, и оказалось, что молодые ребята нашли в среднем по двадцать багов, а “старожил” - один. Егор спрашивает его “как так получилось”, на что в ответ старожил заявил, что метрика не отражает реальности, что у него много других задач и что метрику нужно изменить. Егор сказал, что его главная задача - находить баги в продукте, и поэтому метрику менять не будет. На следующей неделе ситуация повторилась: у всех по двадцать, а у старожила - один. Егор предложил вышестоящему менеджменту уволить этого тестировщика, потому что он не слушает своего менеджера - Егора - и не выполняет свою работу - не находит баги. Егор рассказывает, что поднялся шум и что менеджмент не захотел его увольнять, ведь “он так давно работает у нас”.\nЕгор говорит, что внедренная количественная метрика показала молодым ребятам на проекте, что их труд тоже может быть оценен справедливо. Они увидели, что вон тот товарищ, который сидит на проекте уже три года, не будет считаться главным тестировщиком только из-за этого. Егор дал ребятам честную и открытую метрику, по которой нужно делать только свою работу, и если ты делаешь ее хорошо, то ты - номер один. А более старшие товарищи не будут номерами один только потому, что они - старожилы проекта.\nКак быть с заказчиками, которые привыкли к стрессоустойчивому “современному менеджменту”, а не правильному? Егор считает, что это - трудная задача, и не всегда выполнима. Иногда бывает, что заказчик звонит Егору и говорит, что хочет со всеми разработчиками устроить конференц-колл. Егор спрашивает его: “зачем митинг? Напиши полстраницы текста что тебе нужно, и мы обдумаем и ответим на все твои вопросы. Зачем тебе собирать 8 человек и держать их два часа?”. Заказчик отвечает Егору: “Я хочу рассказать разработчикам о цели проекта”, на что Егор говорит, что\n Разработчикам наплевать на цель твоего проекта. Это программисты, они профессионалы. Они выполнят свою работу и пойдут домой к своим семьям. Им не важно, что будет с твоим проектом через четыре месяца и как он выйдет на рынок.\n Разработчику нужно, чтобы ему четко поставили задачи, и он ее выполнит. Ему не нужно знать цель стартапа, над которым он работает. Разработчик - не бизнесмен, а Java-программист, и он не хочет разбираться в бизнесе.\nИногда получается переубедить заказчика, но бывает и так, что Егор теряет заказчиков. Такие заказчики привыкли, что толпа людей слепо подчиняется ему, и отказываться от этого они не хотят.\nКак можно управлять проектом, не имея базовых технических знаний? Ведь такой человек просто не сможет понять, за что программисты получают свои деньги. У Егора в компании почти каждый проект имеет двое людей: проектного менеджера и архитектора. Архитектор и есть тот человек, который обладает глубокими техническими знаниями, а проектный менеджер же выполняет бюрократическую работу и работает с рисками и сроками проекта. В практике Егора проблем в таком распределении не наблюдается.\nНаоборот, ситуации, когда не очень хорошего, но самого стрессоустойчивого программиста назначают менеджером, приводят к более плохим последствиям. Такой менеджер начинает мнить себя супер-техническим специалистом и требует, чтобы архитектурные решения проходили через него. В итоге получается так, что программисты выше уровнем своего менеджера вынуждены выпрашивать у него аппрува на архитектурные решения, у того, кто мнит себя техническим специалистом, но который им не является.\n Нельзя быть техническим специалистом, если ты не пишешь код каждый день.\n Менеджер уже давно отошел от дел, и мы не должны спрашивать его технологические вопросы. Именно у архитектора проекта мы и должны аппрувить решения, ведь он обладает достаточными технологическими знаниями.\n","permalink":"https://maximgorbatyuk.github.io/blog/management/2020-02-25-who-manages-who-yegor256/","summary":"Видео доклада: Youtube-канал Егора Бугаенко.\n Егор давно в разработке софта и видит одну и ту же проблему, которая становится тенденцией в современном менеджменте:\n Менеджмент не трансформируется, а деградирует.\n Менеджмент вместо функции управления, вместо помощи участникам проекта и организации их работы, превращается в бесполезную высокооплачиваемую прослойку, ничего не делающую. В Америке и Европе, считает Егор, немного больше даже. Более того, на конференциях и докладах спикеры даже пропагандируют эту деградацию, называя ее Agile.","title":"Who Manages Who? Егор Бугаенко"},{"content":"Эту же статью я опубликовал на habr.com.\nЗачем это необходимо Когда в твоей команде работают больше одного человека, так или иначе все сталкиваются с проблемой разных стилей кодирования каждого члена команды. Кто-то пишет скобки для блоков if...else, кто-то нет. Когда проект становится больше, то такой код труднее читать и еще сложнее проводить код-ревью.\nЧтобы код-ревью и прочие командные митинги не превратились в обсуждение tab vs spaces на повышенных тонах, лучше настроить репозиторий таким образом, чтобы сам проект не допускал написание невалидного и нестандартного для команды кода.\nС одной стороны, использование разных стилей кодирования может показаться вкусовщиной, недостойной внимания. Ну не оборачивает джун единственную строку кода после условия if, а кто-то пишет, что с того? Если оставить код из под пера джуна \u0026ldquo;как есть\u0026rdquo;, то это может стать \u0026ldquo;бомбой замедленного действия\u0026rdquo;: ту строку кода после if могут удалить, и тогда под условие попадет следующая строка. Конечно, эта ситуация обычно отлавливается на код-ревью, однако бывает так, что этот потенциальный баг проходит проверку, и вот две основных причины:\n Мы все люди, а люди ошибаются. Люди социальны, а значит вступать \u0026ldquo;в очередной раз\u0026rdquo; в конфликт, связанный со стилями, не захочется. И тут возможны два варианта:  \u0026ldquo;Лучше поправлю сам\u0026rdquo;, думает проверяющий, и правит код. Проверяющий срывается на джуна и высказывает свои сомнения в его адекватности и необходимости существования.    Как можно добиться того, чтобы каждый писал в соответствии с командным стилем? Бить по рукам на код-ревью каждый раз демотивирует и автора кода, и самого проверяющего. К счастью, эта проблема будоражит умы не одного программиста не первый год, и в нашем распоряжении сейчас есть множество инструментов.\nЦель этой статьи - рассказать другим и себе будущему, как я настраиваю репозиторий проекта таким образом, чтобы он сам обезопасил себя от невалидного кода с точки зрения стандартов команды.\nЧто мы имеем В качестве примера возьмем демонстрационный проект, код которого будет выложен на GitHub. Так как я занимаюсь разработкой на .NET Core, то и проект будет написан на нем. Что я буду использовать:\n .NET Core 3.1 Angular 8+ Github аккаунт Travis CI  Я уже создал демонстрационный репозиторий проекта и настроил в нем Travis-CI. Далее в статье разберем, что необходимо было сделать для этого и почему.\nПайплайн репозитория Пайплайн репозитория - механизм, предотвращающий попадаение невалидного кода с второстепенных веток в основную master branch. \u0026ldquo;Из коробки\u0026rdquo; пайплайны доступны в Gitlab и Azure DevOps, а в Github - через Travis CI.\nНастраиваем репозиторий Мне нравится подход к разработке софта Егора Бугаенко. Я законспектировал несколько его докладов на этом блоге. Если кратко, то вот основные принципы, которым я буду следовать при настройке репозитория:\n Ограничение прав на пуш. Я ограничиваю права на пуш в develop и master всем, кроме мейнтейнеров (maintainer). Пайплайн сборки. Я прописываю пайплайн для сборки проекта в CICD и прогона юниттестов как для бэкенда, так и фронта. Repository is a king. В репозитории я прописываю правила работы с кодом и gitflow, а также другие связанные с подходами в разработке документы. Fail fast. Если код написан невалидно с точки зрения стандартного стиля, то разработчик получит ошибку компиляции. Git pre-commits hoocks. Чтобы не занимать агенты CI гитлаба лишком часто, я добавляю прогон тестов и иные полезные операции на пре-коммит хуки гита.  Что мы получаем в итоге? Во-первых, в master и develop смогут залить код только мейнтейнеры проекта. В идеале, конечно, и им нужно ограничить доступ, чтобы только \u0026ldquo;автомат\u0026rdquo; мог сливать ветки. Я оставил реализацию этого принципа \u0026ldquo;на потом\u0026rdquo;. Ограничение прав настраивается через интерфейс гитлаба, поэтому я не буду описывать этот этап здесь.\nВалидация бэкенда Я настраиваю solution-файл (*.sln) проекта так, чтобы он выдавал несоответствия написанного кода стандартам стайл-гайда .NET как ошибки компиляции. Чтобы сделать это, мне понадобится файл с перечислением кодов ошибок, пара nuget-пакетов и немного терпения.\nЯ использую stylecop в проектах для .NET Core. Чтобы его верно настроить, прежде всего мы создаем несколько файлов в корне проекта рядом с solution-файлом (ссылки ведут на gist.github.com):\n Directory.build.props - ссылка на файл. standard.ruleset - ссылка на файл. stylecop.json - ссылка на файл.  После этих действий наш проект не будет собираться, пока в нем будут ошибки стиля кодирования.\nВалидация фронтенда Фронтенд-приложение тоже необходимо валидировать. Здесь настройки пайплайна менее критичны к нарушениям стиля кода: если мы пропустим где-то точку с запятой, то проект все равно будет работать. На страже репозитория здесь будет стоять агент пайплайна. Я автоматизирую следующие команды:\n# Проверка линта ng lint # Сборка в режиме продакшна, чтобы провалидировать и html-файлы ng build --prod # Прогон тестов ng test Есть небольшой нюанс работы агентов репозитория с тестами. Дело в том, что для прогона тестов необходим движок Хрома (Chrome / Chromium), а он чаще всего отсутствует в контейнерах CI-систем. Чтобы агент мог запускать тесты фронта, я добавляю npm-пакет puppeteer в проект, который подтянет с собой и хромиум.\nТаким образом, чтобы и корректность фронтенда валидировалась пайплайном, нам необходимо проделать следующие шаги:\n Добавить новую команду \u0026quot;test-headless-ci-only\u0026quot;: \u0026quot;ng test --browsers ChromiumNoSandbox\u0026quot; в блок scripts файла packages.json:  \u0026#34;scripts\u0026#34;: { \u0026#34;ng\u0026#34;: \u0026#34;ng\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;ng serve -o\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;ng build\u0026#34;, \u0026#34;build-stage\u0026#34;: \u0026#34;ng build --configuration=staging\u0026#34;, \u0026#34;build-prod\u0026#34;: \u0026#34;ng build --prod\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;ng test\u0026#34;, \u0026#34;test-headless-ci-only\u0026#34;: \u0026#34;ng test --browsers ChromiumNoSandbox\u0026#34;, \u0026#34;lint\u0026#34;: \u0026#34;ng lint\u0026#34;, \u0026#34;e2e\u0026#34;: \u0026#34;ng e2e\u0026#34; }, Установить пакет npm install puppeteer и прописать его в файле karma.conf.js в самое начало файла:  const process = require(\u0026#34;process\u0026#34;); process.env.CHROME_BIN = require(\u0026#34;puppeteer\u0026#34;).executablePath(); module.exports = function(config) { ... }; Добавить кастомный лаунчер тестов в файле karma.conf.js в секцию customLaunchers:  config.set({ ...., customLaunchers: { ChromiumNoSandbox: { base: \u0026#34;ChromeHeadless\u0026#34;, flags: [ \u0026#34;--no-sandbox\u0026#34;, \u0026#34;--headless\u0026#34;, \u0026#34;--disable-gpu\u0026#34;, \u0026#34;--disable-translate\u0026#34;, \u0026#34;--disable-extensions\u0026#34; ] } }, singleRun: true }); Теперь в скриптах пайплайна можно запускать тесты командой npm run est-headless-ci-only.\nСтандартизируем код фронтенда Чтобы код-ревью тикетов для фронтенда не превратились в обсуждение предпочтений форматирования, лучше всего стандартизировать его. Я пользуюсь инструментом prettierrc, потому что репозиторий проекта имеет много звезд и документация написана подробно. Эта библиотека помогает подкорректировать форматирование автоматически. Чтобы добавить prettierrc в проект, необходимо:\n Установить пакеты prettier и pretty-quick глобально:  npm install -g prettier npm install -g pretty-quick Добавить файл конфигурации с именем .prettierrc в корень фронтенд-приложения:  { \u0026#34;useTabs\u0026#34;: false, \u0026#34;printWidth\u0026#34;: 120, \u0026#34;tabWidth\u0026#34;: 2, \u0026#34;singleQuote\u0026#34;: true, \u0026#34;trailingComma\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;semi\u0026#34;: true } Добавить список файлов для игнорирования prettier-ом в файл с именем .prettierignore в корень фронтенд-приложения:  package.json package-lock.json tslint.json tsconfig.json browserslist .gitkeep favicon.ico tsconfig.lib.json tsconfig.app.json tsconfig.spec.json karma.conf.js protractor.conf.js ng-package.json *.html Теперь можно \u0026ldquo;привести в порядок\u0026rdquo; код фронтенда командой pretty-quick --staged.\nИспользование прекоммит-хуков Запуск агента пайплайна в CI/CD системах - это потребление ресурсов, и зачастую небесплатных. Можно и нужно запускать валидацию проекта локально, но делать это на каждый коммит надоедает. В итоге люди перестают запускать скрипты так часто. Чтобы автоматизировать этот процесс, я пользуюсь прекоммит-хуками, которые позволяют запускать полезные скрипты при коммитах и пушах.\nДля фронтенда лучше всего подойдет библиотека husky. Чтобы настроить хук, необходимо:\n Установить библиотеку husky  npm install -g husky Добавить хук husk в файл package.json в конец:  \u0026#34;devDependencies\u0026#34;: { ... }, \u0026#34;husky\u0026#34;: { \u0026#34;hooks\u0026#34;: { \u0026#34;pre-commit\u0026#34;: \u0026#34;pretty-quick --staged\u0026#34;, \u0026#34;pre-push\u0026#34;: \u0026#34;ng lint \u0026amp;\u0026amp; ng test --browsers ChromiumNoSandbox\u0026#34; } } Здесь я разделил команды: нет необходимости проверять тесты фронтенда на каждый коммит, но мы не дадим залить изменения в удаленный репозиторий, пока тесты не будут \u0026ldquo;зелеными\u0026rdquo;.\nИтог После того, как сделаны описанные в статье шаги, я получаю проект, который \u0026ldquo;защищает сам себя\u0026rdquo; от невалидного кода. Понятное дело, что одной проверкой синтаксиса и стайл-гайда не уберечь продукт от багов, однако даже эти незначительные вещи помогают в достижении большего качества кода и позволяют обсуждать архитектурные решения на код-ревью, а не вопросы форматирования.\n","permalink":"https://maximgorbatyuk.github.io/blog/development/2020-02-16-how-to-reject-invalid-code/","summary":"Эту же статью я опубликовал на habr.com.\nЗачем это необходимо Когда в твоей команде работают больше одного человека, так или иначе все сталкиваются с проблемой разных стилей кодирования каждого члена команды. Кто-то пишет скобки для блоков if...else, кто-то нет. Когда проект становится больше, то такой код труднее читать и еще сложнее проводить код-ревью.\nЧтобы код-ревью и прочие командные митинги не превратились в обсуждение tab vs spaces на повышенных тонах, лучше настроить репозиторий таким образом, чтобы сам проект не допускал написание невалидного и нестандартного для команды кода.","title":"Как не пропустить невалидный код в репозиторий"},{"content":"Краткий конспект доклада TDD вверх ногами.\nАвтоматизированные тесты Егор считает, что юниттесты - неотъемлемая часть работы программиста. Егор приводит в пример метафору про сетку безопасности, которую натягивают гимнасты для отработки своих трюков. Егор очень сомневается, что гимнасты не будут натягивать сеть по причинам, по которым некоторые разработчики отказываются писать тесты:\n \u0026ldquo;У нас нет времени\u0026rdquo; \u0026ldquo;У нас нет денег\u0026rdquo; \u0026ldquo;У нас никогда и не было тестов (сети)\u0026rdquo;  Сеть безопасности дает гимнастам уверенность, что совершённые ошибки в тренировке не будут стоить здоровья и карьеры трюкачам. Как гимнаст, не имеющий сети под собой, боится рисковать, так и разработчик не будет экспериментировать при реализации новых фич, боясь сломать предыдущий функционал.\n\u0026ldquo;У нас нет времени\u0026rdquo; Егор считает, что эти причины довольно нерациональны. Наивно полагать, что написание тестов - это какая-то второстепенная работа, которую делают (если делают) в последнюю очередь \u0026ldquo;когда остается время\u0026rdquo;. По мнению Егор, разработчик не должен делить время на разработку и на тесты, потому что тесты - неотъемлемая часть разработки. Тесты - это \u0026ldquo;сеть безопасности\u0026rdquo;, которая уберегает разработчиков от появления новых критичных и повторных появлений старых.\nБолее того, Егор считает, что когда разработчики говорят, что у них нет времени на тесты, они просто не умеют писать тесты.\n You just don\u0026rsquo;t know how!\n Егор ссылается на свою статью Fools don\u0026rsquo;t write unit tests, где объясняет более подробно свою точку зрения.\n\u0026ldquo;У нас нет денег\u0026rdquo; Вторую причину также Егор ставит под сомнение. Вы никогда не услышите от гимнаста, что он не натянул сеть, потому что \u0026ldquo;это слишком дорого\u0026rdquo;. То же можно уверенно сказать и про строителей, которые используют сети для падающих людей и инструментов. Сравнение разработки софта и гимнастов со строителями имеет смысл, потому что часто баги в продакшене приводят к не меньшим потерям, а иногда даже и к краху всей компании.\nЕгор считает, что предлагать заказчику варианты \u0026ldquo;Разработка софта за N денег\u0026rdquo; и \u0026ldquo;Разработка софта с тестами за N+ денег\u0026rdquo; совершенно не имеет смысла, ведь заказчик выберет в большинстве случаев первый более дешевый вариант.\n Мы построим вам здание без систем безопасности за один миллион долларов, а без них - за миллион двести.\n Строители почти никогда не предложат такую сделку заказчику, так почему же разработчики предлагают. По мнению Егора, заказчикам нужно предлагать вариант разработки софта без тестов как гораздо более дорогой. Объяснить увеличение стоимости Егор предлагает тем, что команда разработки без тестов будут меньше экспериментировать и дольше тестировать. Это явление Егор называет \u0026ldquo;Fear driven development\u0026rdquo;.\n\u0026ldquo;У нас никогда и не было тестов (сети)\u0026rdquo; Эта причина однозначно нерациональна. Ее корень - неумение писать тесты.\nTDD вверх ногами Классического TDD, когда сначала пишем тест, а затем код для него, практически невозможно придерживаться. Всегда разработчики начинают писать тесты на основе чего-то. Егор предлагает следующую схему TDD:\n Разработчик пишет код Программмист передает его некоторому пользователю (в том числе и сам начинает им пользоваться) Пользователь (сам разработчик) находит баг Разработчик пишет фикс и юниттест для найденного бага.  И так по кругу. В качестве \u0026ldquo;пользователя\u0026rdquo; Егор имеет в виду и самого автора написанного кода, ведь когда разработчик пишет некоторую фичу, после завершения кодирования он приступает к ее дебагу в своей ветке. Иначе говоря, он начинает выступать в качестве первого пользователя собственного кода и сам начинает находить баги и фиксить их. В принципе, так и делают многие все разработчики, из них часть пишет тесты на свой код. Но чаще всего тесты пишут (если пишут) уже после того, как написан код и отловлены баги \u0026ldquo;первичной\u0026rdquo; разработки самим автором кода.\nИдея Егора заключается в подходе написания тестов: он предлагает разработчикам после того, как он нашел баг в собственном коде в собственной ветке, остановить дальнейший дебаг, пока он не напишет фикс и как минимум один юниттест для него.\nЕсли баг был зарепорчен тестером, то разработчик в первую очередь латает \u0026ldquo;сеть безопасности\u0026rdquo; из юниттестов, добавляя еще несколько для найденного случая. Тот же подход применим и для багов с продакшена, зарепорченных конечными пользователями.\nВопросы из зала Есть ли исключение из правила \u0026ldquo;Пока не найдут дефекты, тестов не будет\u0026rdquo;, верно? Если так, то в случае разработки финансовых систем не лучше ли сначала написать тесты, чтобы не было багов на продакшене? Ощущение, что автор вопроса не понял суть доклада и услышать только \u0026ldquo;пользователь находит баги\u0026rdquo;. Егор упомянул и самого разработчика как пользователя своего же кода, он не имел в виду, что только конечные пользователи репортят баги.\nЕгор согласен с задающим вопрос и также напоминает, что если система требует высокого качества, то и пайплайн релиза софта будет содержать этапы тестирования на препрод-окружениях автоматически и/или вручную. Так или иначе, баги будут отловлены еще до этапа деплоя релиза, если процессы построены верно. также не стоит забывать и о кодревью, на котором даже потенциальные проблемы могут быть отловлены.\nЕсли у нас финансовое приложение, то между разработчиком и продакшеном есть код-ревьюеры, QA-отдел, альфа-тестеры и бета-тестеры, и каждый из них отлавливает баги и репортит их. И разработчики подстраивают фиксы и тесты под них, а не перед ними.\nКак вы решаете проблемы, что когда руководство видит, что код написан без тестов, и останавливает разработчика? Оно, допустим, говорит, что \u0026ldquo;отлично, код написан, бог с ними с тестами, мы тебя перебрасываем на следующий проект\u0026rdquo;. В таком случае разработчик должен еще раз напомнить, чем чревата разработка софта без тестов, и если руководство принимает ответственность на себя за это, то разработчику беспокоиться об этом совершенно не нужно. Если руководство устраивает гимнаст, который периодически падает на пол, то пусть так, ведь они несут за это ответственность.\nЧасто разработка через тестирование принуждает разработчика писать код так, чтобы он был пригоден для тестирования. А если следовать вашему подходу, то может сложиться ситуация, когда код становится просто непригоден для тестирования. Егор согласен с этим тезисом и считает, что непригодность какого-то кода к написанию тестов - это еще один из видов багов, который необходимо решать. Иначе говоря, разработчик написал спагетти-код и столкнулся с тем6 что тестить его почти невозможно. Егор считает, что это характеризует в первую очередь разработчика как профессионала: чем больше разработчик пишет код и тестов к нему, тем лучше он пишет этот код \u0026ldquo;по наитию\u0026rdquo; и \u0026ldquo;интуитивно\u0026rdquo;, принимая во внимание предыдущий опыт. Человек постоянно учится и улучшает свои навыки.\n У профессионала код после первого этапа кодирования вряд ли будет непригоден для тестирования.\n Полезные ссылки  Fools Don\u0026rsquo;t Write Unit Tests Unit Testing Anti-Patterns, Full List  ","permalink":"https://maximgorbatyuk.github.io/blog/development/2020-02-15-tdd-upside-down/","summary":"Краткий конспект доклада TDD вверх ногами.\nАвтоматизированные тесты Егор считает, что юниттесты - неотъемлемая часть работы программиста. Егор приводит в пример метафору про сетку безопасности, которую натягивают гимнасты для отработки своих трюков. Егор очень сомневается, что гимнасты не будут натягивать сеть по причинам, по которым некоторые разработчики отказываются писать тесты:\n \u0026ldquo;У нас нет времени\u0026rdquo; \u0026ldquo;У нас нет денег\u0026rdquo; \u0026ldquo;У нас никогда и не было тестов (сети)\u0026rdquo;  Сеть безопасности дает гимнастам уверенность, что совершённые ошибки в тренировке не будут стоить здоровья и карьеры трюкачам.","title":"TDD вверх ногами. Е. Бугаенко"},{"content":"Я ходил на фильм \u0026ldquo;Паразиты\u0026rdquo; летом прошлого года, когда он только вышел в прокат в Казахстане. Помню, что он показался мне немного запутанным, но сюжет, игра актеров и повествование завораживалb. Мне хотелось смотреть его еще и еще и, наконец, узнать, чем же он закончится. Я - небольшой критик кино, я не могу сходу назвать и увидеть сценарные и операторские приемы, которые делают хорошие фильмы хорошими, а их отсутствие - плохие фильмы плохими. После выхода из зала я могу лишь сказать, понравился мне фильм или нет. К моменту написания этой статьи стало известно, что фильм получил два оскара в номинациях \u0026ldquo;за лучший фильм\u0026rdquo; и \u0026ldquo;за лучший иностранный фильм\u0026rdquo;. Хорошее достижение, говорят, что это - впервые за 92 года истории премии Оскар.\nКогда я вышел из кинозала после просмотра \u0026ldquo;Паразитов\u0026rdquo;, я был немного шокирован концовкой. Пока не произошло убийство главы богатого семейства Пак, мне фильм определенно нравился, он действительно завораживал. Подобное я чувствую при просмотре фильмов Тарантино, которые мне очень нравятся. Однако концовка \u0026ldquo;Паразитов\u0026rdquo; шокировала меня, и мне фильм даже разонравился в тот момент.\nМне просто ужасно не понравилась кульминация сюжета действиями и поведением отца семейства бедняков Ким. Да, отец семьи Пак высказывался презрительно про запах от водителя - главы семьи Ким, и это его определенно не красило. С другой стороны, это его мнение, которое он как раз-таки и не высказывал на публике, он обсуждал его только со своей женой. На публике в присутствии семьи Ким он не позволял себе подобных презрительных высказываний. Мы не знаем, считает ли чета Пак водителя - отца семьи Ким - за человека второго сорта, потому что кроме претензий к запаху они никоим образом не показали, что считают свою прислугу за людей \u0026ldquo;хуже себя\u0026rdquo;. Более того, претензия была только к одному из четы Ким, и даже к нему они проявляли должное уважение.\nСтало ли это отношение богатого к бедному причиной для убийства? Сомневаюсь. Думаю, что причина убийства главы семьи Пак была в другом.\nГлава бедной семьи Ким начал слышать комментарии в адрес запаха. Что мог сделать отец Ким в этом случае? Я вижу два варианта:\n Признать, что семья Ким живет в неблагополучных условиях и как минимум исправить одно из проявлений этого - помыться и постирать свою одежду. Продолжать терпеть комментарии и затаить обиду на семью Пак.  Очевидно, что второй вариант не требует особых усилий и слома мировоззрения, и поэтому глава Ким выбирает именно его. Даже если он не хочет поработать над собой, он мог бы просто уйти с этой работы, дав возможность заработать остальным членам его семьи. Более того, отец Ким - здоровый мужчина вполне работоспособного возраста. Интересно, почему он безработный? Скорее всего, у него в крови лениться и паразитировать на результатах труда других вместо того, чтобы работать и зарабатывать честно самому. Впрочем, вся семья пытается так или иначе прожить за счет других: даже показанная в начале фильма история про ловлю соседского WiFi в начале фильма подтверждает это.\nОтец Ким видит, что к нему презрительное отношение у богачей, и он продолжает присасываться к ним как паразит. По мне так это - отсутствие гордости и самоуважения. При этом это его решение гложет, и в итоге он просто не выдерживает накала внутри себя и убивает отца Пак. Этим он перечеркнул судьбы обеих семей: дети Пак остались без отца и счастливого детства (хотя в этом они уж точно не виноваты), а его родная семья - с грузом ответственности и проблемами с законом. А мог просто уйти и перестать паразитировать на богатстве других. Довольно эгоистичный поступок, как по мне.\nМне кажется, что фильм как раз показывает одну из главных причин классового неравенства - отсутствие у некоторых бедных желания работать и зарабатывать честно. Мы не знаем, каким образом семья Пак стала богатой, потому что фильм как раз и не об этом. Эти бедняки в фильме паразитируют на труде и успехе других, чем точно не вызывают симпатии. Семья Ким не хочет и не умеет работать честно, они воруют персики с прилавка, подделывают документы и подставляют других.\nФильм, по моему мнению, показывает, как не нужно себя вести, если ты беден. Сейчас, спустя полгода после просмотра и обдумывания этой статьи, я пришел к выводу, что все же фильм заслуженно получает награды, он хорошо снят, сюжет интересный. Судя по разбору операторской работы от Кинопоиска, в фильме были применены необычные приемы в работе с камерой.\nСейчас я понимаю, что он мне нравится именно потому, что обличает причины бедности некоторых и показывает, к чему может привести желание паразиторовать на труде и успехе других.\n","permalink":"https://maximgorbatyuk.github.io/blog/opinion/2020-02-13-about-gisaengchung-movie/","summary":"Я ходил на фильм \u0026ldquo;Паразиты\u0026rdquo; летом прошлого года, когда он только вышел в прокат в Казахстане. Помню, что он показался мне немного запутанным, но сюжет, игра актеров и повествование завораживалb. Мне хотелось смотреть его еще и еще и, наконец, узнать, чем же он закончится. Я - небольшой критик кино, я не могу сходу назвать и увидеть сценарные и операторские приемы, которые делают хорошие фильмы хорошими, а их отсутствие - плохие фильмы плохими.","title":"Мое мнение о фильме \"Паразиты\""},{"content":"Эта статья - конспект видео-доклада Егора Бугаенко. Доклад доступен на youtube по ссылке.\n Comments for other speech Егор уже выступал с похожим докладом на другой конференции, и вот комментарии, которые он получил, были нелестными: одни комментаторы обвиняли Егора в распространении вредных практик, другие - в том, что его тезисы противоречат здравому смыслу. Основная идея Егора в том, что при разработке софта разработчики должны строить код, а тестировщики - ломать его.\nProgrammers build, testers - break. Чаще всего Егор видит в командах, как тестировщик помогает разработчику строить код: программер кодит, а тестировщик сидит рядом, проверяет и затем говорит \u0026ldquo;да, твой код работает\u0026rdquo;. Книги, которые Егор приводит в качестве примера, опровергают этот тезис следующим: задача тестировщика заключается в том, чтобы доказать, что написанный программистом код не работает. Если тестировщик не нашел багов в реализованной задаче или не доказал, что код не работает, то это - плохой тестер.\n Конечная задача тестера - доказательство неработоспособности написанного кода.\n Иначе говоря, тестер доказывает, что код не готов к релизу и деплою, и делать это он должен постоянно.\nСлом мировоззрения в software development Чтобы достичь верной философии тестирования, Егор считает, что необходимо добиться изменения мировоззрения участников проекта. И далее тезисы, которые должны быть приняты ими.\n:heavy_check_mark: 1. Testers are not second-class citizens В продакшн уходит код хорошего качества только в случае здорового конфликта между разработчиком и тестировщиком: разработчик кодит как можно больше, а тестировщик стремится как можно больше написанного кода не пропустить в продакшн. Но этот конфликт будет происходить только в командах, где к тестерам относятся как таким же равноправным участникам команды, а не как к людям \u0026ldquo;второго сорта\u0026rdquo;. Тестерами точно не должны становиться вчерашние студенты или джуниоры. Егор считает, что\u0026hellip;\n тестерами должны становиться более квалифицированные инженеры, чем обычные программисты.\n Почему? Построить проще, чем поломать построенное и, что важнее всего, доказать, что оно поломано. С ростом проекта и поиск багов затрудняется, и поддержание количества найденных багов на прежнем уровне становится дороже. Это значит, что и тестеру нужно платить больше с возрастом проекта, чтобы привлечь высококвалифицированных специалистов на эту роль. Егор даже считает, что, возможно, карьера разработчика должна идти по следующему сценарию: junior -\u0026gt; middle -\u0026gt; senior -\u0026gt; tester.\nЧаще всего менталитет складывается так, что начинающие инженеры сначала становятся тестерами, а затем с опытом переходят в разработку. В итоге сфера получает сеньоров, код которых никто не может поломать, и написанный код этими сеньорами идет фактически без препятствий в продакшн. И тут выявляется главная проблема сложившейся ситуации:\n непосредственные пользователи начинают нам доказывать, что написанный нами софт не работает.\n (От меня) Думаю, что многие согласятся с тем, что лучше бы эти баги из продакшена мы нашли на этапе тестирования до релиза.\n:heavy_check_mark: 2. Testers don\u0026rsquo;t tell us when to release Во многих случаях тестеры становятся неким quality gate\u0026rsquo;ом. Программисты кодят и готовят релиз, затем передают его тестировщиками; тестировщики проверяют код и репорят баги, которые уже программисты фикстят, и затем тестеры говорят: \u0026ldquo;Окей, оно готово к релизу\u0026rdquo;. Это - еще одна фундаментальная ошибка. Как можно ожидать от тестера зеленого света деплою, если его задача - доказать, что софт нерабочий. В этой концепции он никогда и не даст зеленый свет релизу, ведь это противоречит его основной задаче. В текущей ситуации, когда тестеры становятся quality-gates-keeper\u0026rsquo;ами, им незачем доказывать неработоспособность софта. Он просто может ничего не проверять и сразу дать зеленый свет.\nКодирование и тестирование должны идти параллельно всегда в течение процесса разработки софта. Чем больше багов нарепортят тестеры, тем лучше. Чем сильнее они докажут, что софт не работает, тем лучше будет качество продукта. Когда готовится релиз, менеджер должен оценить, изменилась ли тенденция поиска багов с их фиксом. Если находить баги в релиз-кандидате становится тестерам все труднее и труднее при той же интенсивности поиска, то это значит, что качество растет. Тестеру же продукт никогда не нравится, ему всегда есть что сказать про его качество.\n Если тестеру нравится продукт, который он видит, это - плохой тестер.\n Менеджер, видя количество и качество найденных багов спустя некоторое время после подготовки релиза, должен принять решение: деплоим ли мы версию продукта с полученным качеством или нет. Тестеры делать этого ни в коем случае не должны.\n:heavy_check_mark: 3. Testers must be rewared for bugs they find Наиболее правильный путь мотивации - награждать за найденные баги. Чем больше багов, тем больше денег они получают. Эта мысль, по словам Егора, и вызывает много споров.\nВозражения комментаторов и других разработчиков на тезисы Егора Егор часто выступает с рассказами о своей концепции, и вот наиболее частые возражения, которые он встречает.\n:x: 1. Programmers and testers must work together! Создание конфликта между тестерами и разработчиками приведет к разладу в команде, по мнению возражающих. Звучат также тезисы, что конфликт может выйти за рамки рабочих процессов. Егор считает, что тестеры и разработчики и так работают в одной команде, и цель у них одна - выпустить качественный продукт. Однако рабочие задачи тестеров и разработчиков действительно встречные: одни кодят, другие не пропускают написанный код. Всегда должен быть конфликт интересов, иначе не будет высокого качества кода.\nВ ответ на возражение Егор задает встречный вопрос: \u0026ldquo;а как можно замотивировать тестировщика на поиск как можно большего количества багов?\u0026rdquo;.\nМотивация на время Мотивация на время в офисе не сработает, ведь тестеру заплатят N денег в конце месяца в любом случае, найди он 5 багов или 50. Тем более что он в одной команде с разработчиками, и ему сказали, что у них у всех одна общая цель.\nВ таких условиях понятное дело, что репортов багов будет очень мало - зачем тестеру идти на конфликт с разработчиком и рассказывать ему, что его код не работает. Руководство говорит \u0026ldquo;не ссорьтесь\u0026rdquo;, а как тестеру не ссориться, если код не работает. В итоге тестер не репортит баги с мыслью \u0026ldquo;Ну не работает, да и ладно. Они все сеньоры, я джун, у меня права нулевые. Лучше покажу баг тем, кто меньше на это реагирует. Пофиксят - хорошо, а не пофиксят - не страшно.\u0026rdquo;. Тестеры должны ссориться с разработчиками, они должны иметь карт-бланш на вступление в конфликты с разработчиками.\n Здоровый рабочий конфликт между тестером и программистом неизбежен.\n Мотивация на скрипты Вторая мотивация - на скрипты. \u0026ldquo;Вот тебе список из 100 шагов по скрипту. Выполни их, проверь тикет, и свободен\u0026rdquo;. Эта мотивация немного лучше, считает Егор, потому что тестер обязан покрыть некоторый объем работы. Хочешь-нехочешь, но если шаг 14 не работает по скрипту, то тестер обязан зарепортить баг, и от этого никак не отвертеться, хотя это \u0026ldquo;некомфортно\u0026rdquo;. Почему некомфортно? Потому что этот скрипт ломается уже в который раз на тикете от разработчика Пети. Петя вот сидит, Пете семью кормить. Вдруг его уволят после репорта бага? Может ну этих пользователей, пусть живут с багами, а Петя вот тут сидит. Лучше мы договоримся с Петей и закроем баг без репорта.\nВторой негативный момент, связанный с внедрением скриптов тестирования, это отсутствие мотивации создавать автоматические тесты UI, интеграционные и другие виды тестов. Зачем, если сценарии тестирования.\n:x: 2. Rewarding for bugs will produce more bugs. \u0026ldquo;Если мы платим за баги, то багов будет только больше\u0026rdquo;. Тестеры смогут насоздавать бесконечное количество багов, значительных и косметических. А может даже тестеры еще и вступят в сговор с разработчиками: разработчик делает баги, тестер их репортит, а деньги за баги они делят пополам. Довольно частое возражение, говорит Егор.\nЧтобы этого не допустить, нужен человек, который верифицирует баги: принимается баг или нет. Часто баги отбрасываются, потому что они \u0026ldquo;слишком абстрактные\u0026rdquo;, либо незначительные, либо косметические, либо пространные в духе \u0026ldquo;посмотрел ваше приложение, и мне что-то не понравилось\u0026rdquo;. Решение о принятии бага или его непринятии принимает архитектор проекта. Баг должен быть зарепорчен так: что не работает, как должно работать, как воспроизвести и как починить, если есть предположения.\nКонечно, в сговор могут вступить и трое, включая того самого архитектора, но Егор такие случаи в практике не встречал. Команды в проектах у Егора распределенные, и связаться друг с другом им тяжелее.\nЕгор считает, что большое количество багов в тикет-системе - это хорошо, потому что они были зарепорчены тестерами, а не конечными пользователями. Это и есть высокое качество.\n Качеством можно назвать соотношение багов, найденных тестерами, к багам от конечных пользователей,\n и чем больше багов будет зарегистрировано в тикет-системе тестерами, тем меньше багов придет с продакшена.\nКонечно, будут просачиваться незначительные баги, будут и ситуации, когда какому-то тестеру переплатили за баг, который оказался не таким значительным. Но это нестрашно, считает Егор, потому что альтернатива - гораздо хуже.\n:x: 3. Testers will quit when complexity grows. \u0026ldquo;Тестеры будут уходить, когда сложность проекта возрастает, и баги находить становится гораздо сложнее\u0026rdquo;. Это возражение - самое логичное, считает Егор. Когда проект сырой, то и багов будет море. Тестеры репортят баги тоннами, получают много денег и радуются. Но с ростом качества проекта поиск одного бага будет занимать уже не полчаса, как раньше, а по нескольку часов. Егор считает, что это нормально.\nКогда проект молодой, можно привлекать недорогих / неопытных тестеров, а с ростом проекта и его качества привлекать уже более квалифицированных профессионалов. Сеньор-тестировщики уже не тестируют UI и законченный продукт, но смотрят и security-issue, и анализируют проект на бэкдоры и бреши, и performance-тестирование проводить и находить баги уже в этих областях.\nВопросы из зала По поводу второго возражения. В банке N был как раз описанный сговор в одной из команд, и в итоге команду распустили. В природе человека лежит желание с кем-то договориться и хакнуть систему. Такое может быть действительно, но Егор задает встречный вопрос: а как заведомо дефективный код попадает в master-branch? Ведь код разработчика попадает тестеру не напрямую, а через билд-пайплайны, код-ревью, юниттестирование и прочие quality gates. Если этого пайплайна нет, то это - уже дефект всей системы, и даже хорошо, что отдельно взятые двое людей его выявили. Если пайплайн \u0026ldquo;недопущения\u0026rdquo; кода разработчика в master-branch есть и если разработчик смог пройти все его шаги, а затем тестер нашел баг, то это прекрасно, считает Егор. Черт с ним со сговором, Егор готов им заплатить за выявленный дефект в продукте. Дело ведь в том, что эти двое людей показали, что в самом пайплайне есть дефект, который необходимо чинить в первую очередь.\nЧто произойдет с этим багом? Он вернется в систему тикетов, другой разработчик определит, что дефект был в системе пайплайна и зафиксит ее и сам баг тоже, получив свое вознаграждение.\n Если пайплайна проверки кода нет и мы просто скажем \u0026ldquo;Ребята, теперь мы платим за баги\u0026rdquo;, то у проекта будут сговоры.\n Ваш подход может сделать задачу нерешаемой. Баг можно найти сегодня, завтра, постоянно. Релиз никогда не выйдет. Задача тестера - сказать, что релиз соответствует требованиям. Нет ситуации, когда поиск багов прекращается. Как понять, когда заканчивать тестирование. В любом продукте есть бесконечное количество багов. Даже в примитивном калькуляторе можно найти уйму багов. В данном случае\n багом мы называем несоответствие продукта ожиданиям пользователя.\n Даже незначительное несоответствие ожиданиям, вплоть до \u0026ldquo;кнопка не того цвета\u0026rdquo;, можно зарегистрировать как баг. Когда остановиться - решает менеджмент, а не тестеры. У менеджмента есть бюджет и менеджмент и решает, какой объем багов он покупает у тестировщиков. Чем больше бюджет на тестирование, тем качественней будет конечный продукт.\nОтвет на вторую часть вопроса - \u0026ldquo;Задача тестера - сказать, что релиз соответствует требованиям\u0026rdquo;. Как раз программист говорит, что код соответствует спецификациям, а вот тестер ему говорит \u0026ldquo;нет, дорогой мой, не соответствует, и вот почему: \u0026hellip;\u0026rdquo;\nСогласен насчет того, что работать разработчик и тестер не должны вместе. Но это приведет к тому, что чем лучше программист напишет код, тем меньше получит тестер. Получается, что они делят один пирог, и в итоге конфликт может выйти за стены офиса. Егор не согласен с этим утверждением. Тестер работает с кодом проекта, а не с конкретным разработчиком. Когда баг найден, менеджмент не должен искать автора этого бага. Код был пропущен пайплайном проекта, значит виновата система качества продукта и нужно чинить и ее тоже, а не обвинять конкретного разработчика.\n Баг принадлежит коду проекта, а не разработчику.\n Если менеджмент начнет выяснять, кто виноват в найденном баге, то появится так называемый fear-driven-development - страх разработчика сделать багис новым кодом. Это приведет к тому, что разработчики перестанут экспериментировать и будут думать \u0026ldquo;лучше я ничего не напишу, чем напишу что-то новое, и меня потом начнут винить в багах и заставлять фиксить их поздними вечерами\u0026rdquo;. Если баг уже в master-branch, то автор бага не имеет никакого значения.\nЕгор считает, что конфликт не должен выходить за стены офиса, ведь и программистам выгодно, чтобы баги регистрировались в системе, ведь это - еще работа, за которую платят.\n Плохо только менеджменту, потому что вроде как поток багов и поток фиксов есть, деньги уходят, а качество не растет.\n Тогда уже менеджмент смотрит, как работает пайплайн сборки и почему он пропускает баги от разработчиков.\nКлиент покупает продукт, если этот продукт решает его проблему. Ему все равно на количество багов в системе, и количество багов не равно качеству продукта. Баги бывают разные, и бизнесу важно отсутствие критически важных багов, а не количество багов в целом. А клиенту не важно, как выглядит продукт, ему важно получить от него решение проблемы. Егор считает, что задающий вопрсо слишком идеализирует клиента, что клиенту неважно, как выглядит продукт. Люди эмоциональны, и им важно, красиво ли выглядит продукт, быстро ли он реагирует на действия и другие мелочи. Это уже вопрос продакт-менеджмента: так ли мы делаем продукт и тот ли продукт мы делаем. Доклад не о продакт-менеджменте, а о проджект-менеджменте: принимается за аксиому, что команда разрабатывает тот продукт, который точно нужен рынку, и уже от этой аксиомы проджект-менеджмент начинает выстраивать процессы разработки.\n","permalink":"https://maximgorbatyuk.github.io/blog/management/2020-02-08-do-we-test-in-a-correct-way/","summary":"Эта статья - конспект видео-доклада Егора Бугаенко. Доклад доступен на youtube по ссылке.\n Comments for other speech Егор уже выступал с похожим докладом на другой конференции, и вот комментарии, которые он получил, были нелестными: одни комментаторы обвиняли Егора в распространении вредных практик, другие - в том, что его тезисы противоречат здравому смыслу. Основная идея Егора в том, что при разработке софта разработчики должны строить код, а тестировщики - ломать его.","title":"Правильно ли мы тестируем? Егор Бугаенко"},{"content":"Эта статья - конспект видео-доклада Егора Бугаенко. Доклад доступен на youtube по ссылке.\n В чем проблема  Если у вас очень \u0026ldquo;умная\u0026rdquo; команда, то у вас проблемы.\n Здесь Егор имеет в виду не интеллект, а количество знаний, которые в голове у членов команды, хотя этому место в документации или коде. Если в команде есть люди, которые обладают большим количеством знаний о продукте, который вы пишете, то у вас как у менеджера проблемы. Такие \u0026ldquo;эксперты\u0026rdquo; могут завалить проект.\nСтандартным видом коммуникации в этом случае являются митинги. Чаще всего структура коммуникаций складывается такая: в центре коммуникаций некий архитектор, который понимает проект, его историю, как он собирается и тд, а вокруго него остальные члены команды.\nВажным аспектом проекта является вопрос, как эта группа людей решает ахитектурные вопросы. Чаще всего архитектор принимает решение и вербально передает его команде. Команда что-то кодирует, и в результате проект обрастает новым кодом. Получается, что репозиторий проекта - это результат какой-то устной коммуникации. И тут есть несколько проблем.\n1. Subject Method Experts (SME) SME - это \u0026ldquo;эксперты в определенной области\u0026rdquo;, в определенных модулях системы. Люди начинают хорошо понимать, как работает та или иная часть проекта системы. Это происходит органически, произвольно, никто не делает это специально. Эти люди стремятся подольше остаться в этой позиции, они неохотно делятся своими знаниями, ибо так они становятся нужнее своей компании. И чем дольше они обмениваются знаниями вербально, чем дольше они находятся в позиции архитектора / главного разработчика / ответственного за отдельный модуль проекта, тем больше они стараются защитить себя от внешних \u0026ldquo;угроз\u0026rdquo; - передачи информации кому-то другому.\n2. Неуправляемая команда Такой подход еще и выгоден плохому менеджеру, потому что такими \u0026ldquo;экспертами\u0026rdquo; не надо особо управлять, ведь они сами становятся самоуправляемы. Менеджеры считают, что это очень хорошо: \u0026ldquo;у меня такая классная команда, они сами все делают\u0026rdquo;, \u0026ldquo;у меня Петя классный программист, на нем все держится\u0026rdquo;. Вот эта фраза \u0026ldquo;на нем все держится\u0026rdquo; говорит о том, что перед нами Петя эксперт, который закрепился глубоко в проекте.\n3. Отсутствие документации Такие эксперты и документацию не пишут, ведь нет смысла подответственные им модули документировать - они и так знают, как они работают. Только силовые методы заставят экспертов писать документацию, и то эта документация вряд ли будет информативной.\n4. Неподдерживаемый код Еще одна проблема, вытекающая из этой ситуации - неподдерживаемый код. Поддерживаемость кода можно измерить следующим способом: сможет ли баг в системе решить новичок в команде за 30-60 минут без помощи товарищей по команде. Если нет, то ваш код можно смело назвать неподдерживаемым. Особо запущенный случай - когда новичок говорит, что \u0026ldquo;все нужно переписать\u0026rdquo;.\nВ такой ситуации виноват не предыдущий программист, а менеджер, который это позволил. Программисты не виноваты, ведь все программисты такие, считает Егор.\n Программисты пишут для себя, а не для кого-то другого.\n \u0026ldquo;Я хочу писать так, чтобы было понятно только мне и я один смог бы разобраться в этом коде\u0026rdquo;, - так думают многие программисты. Такова природа человека. Поэтому вина за сложившуюся ситуацию перекладывается на менеджера, потому что он должен был не допустить такой ситуации. Таким образом,\n плохой менеджер делает продукт, который работает только у отдельно взятых людей в его команде.\n 5. Потеря времени и денег Люди становятся более \u0026ldquo;умны\u0026rdquo; в конкретном проекте, а ситуация в продукте - хуже и хуже. Эта тенденция приводит к повышенному риску, что продукт \u0026ldquo;развалится\u0026rdquo;, когда эксперты уйдут из него, а остальные не смогут быстро понять, как их модули работали.\nА как может быть иначе? Егор считает, что программный код должен быть главным элементом проекта. Код в центре системы, его окружают люди. Доступ к коду и информации должен быть одинаковым для каждого участника команды. Важно ограничить коммуникации членов команды только лишь программным кодом или тикетами. Тогда все вопросы и проблемы проекта будут решаться исключительно в репозитории в виде тикетов, ишью (issue) или документации. Члены команды при появляении проблемы идут не к товарищу за соседний стол, а создают тикет в репозитории, и тогда принятые решения в этом обсуждении будут задокументированы.\nСитуации, когда команда год работает над проектом и в ее тикет-системе зарегистрировано только 70 багов (что Егор считает почти нереально низким числом за год), происходят часто, если репозиторий и/или тикет-трекинг система не является центров всех коммуникаций. \u0026ldquo;Вот такая мы классная команда\u0026rdquo;, - говорят они. А знания остались у них в головах, как и остальные 700 или 7000 багов, которые не были зарегистрированы. Эти баги были решены на митингах, которые уже никак не поднять в будущем и не пересмотреть. Новички в проекте вынуждены будут подходить и спрашивать \u0026ldquo;старожил\u0026rdquo; проекта о том или ином архитектурном решении, и в итоге у нас зависимость от конкретных людей - экспертов. А эксперт не захочет делиться знаниями и даст их порционно, и каждую порцию еще и проси у него.\nРепозиторий с кодом и тикет-система должны идти вместе. GitHub в этом плане хорошо спроектирован, другие системы не так прокачены. Тут тебе и тикет/баг, тут же по нему обсуждение, тут же команда приняла решение по проблеме и тут же приаттачен pull-request с решением проблемы.\n Мы все видим единым таймлайном: кто начал, кто закодил, кто замерджил, кто задеплоил и чем все это кончилось.\n Какие мы получаем преимущества 1. Повышается информационный фон (documented info flow) Информация становится формализованной, обмен информацией можно просмотреть через время. Это и является самым ценным источником знаний о продукте.\n2. Документированный код (documented code) Мы \u0026ldquo;заставляем\u0026rdquo; участников команды документировать код через код-ревью или иными способами.\n3. (maintanable code) Когда код задокументирован и все найденные проблемы тоже зарегистрированы в системе или репозитории, то и сам код становится поддерживаемым: новичок в команде сможет в нем разобраться максимально быстро.\n4. (code is a king) Код становится центром проекта и коммуникаций. Как добиться этого? Запретить митинги в любых их проявлениях.\n Чаты, каналы в слаке, группы - все это письменный аналог митингов, и они тоже должны быть запрещены. Все вопросы должны решаться через GitHub в письменном виде.\n Вопросы из зала Звучит очень легко, но не верю, что запрет митингов был безболезненный. Как вы добились отсутствия SME? Это действительно тяжело, если люди привыкли к митингам. Они будут стремиться организовать какой-нибудь групповой чат как аналог митингам. Причем заказчики тоже стремятся к неформальным коммуникациям. Егор заметил, что профессиональные программисты только рады ограничению неформальных коммуникаций, а вот\n плохие программисты не могут отказаться от митингов, потому что они не умеют писать граммотно тикеты и issue в GitHub, им проще все сказать словами, им важны эмоции.\n В итоге мы отказались от таких \u0026ldquo;плохих\u0026rdquo; программистов.\nКак долго заняла трансформация - полный отказ от митингов? Пару лет. Сначала мы отказывались от некоторых митингов и постепенно сокращали их число, пока не осталось ни одного. Митинги только вредят. Есть GitHub и есть митинг; на митинге мы что-то обсудили, а в GitHub не написали, и в итоге информация потерялась.\nТруднее всего было сломать менталитет, ведь люди начинают чувствовать некую изоляцию: раньше у них была группа, к которой они могли обратиться, а теперь ее нет. И нужно учиться писать грамотно тикеты.\nА что стало с атмосферой в команде? Атмосфера стала очень профессиональной. У Егора есть несколько opensource-проектов, поэтому эту атмосферу может посмотреть любой желающий. В обсуждениях стало меньше шума, стало меньше \u0026ldquo;доброе утро\u0026rdquo; и \u0026ldquo;добрый вечер\u0026rdquo;. Программистам это нравится больше, потому что они не тратят свое время.\nПотеря времени - это еще одна причина, за что еще не любят митинги. 7 человек слушают, что один говорит, а ведь говорит он только одному из тех семерых. В итоге шестеро тратят свое время. Егор формирует систему коммуникаций так, что обсуждение - это всегда 1 на 1: вопрос-ответ, вопрос-ответ. Эт единственная эффективная коммуникация по мнению Егора.\nЧто делать, если люди начинают игнорировать обсуждеия в GitHub? Ну есть и есть там обсуждение, меня оно вроде как не касается. Система, которую Егор написал, работает только при сильном менеджменте в компании на правильно замотивированных людях. А правильно замотивировать их можно только деньгами.\nЕсли человек знает, какой результат он получит в долларовом эквиваленте, если он примет участие в обсуждении, то он не будет \u0026ldquo;терять\u0026rdquo; сообщения из GitHub.\n В первую очередь ему нужно ответить, ведь он получит за это деньги.\n В традиционных компаниях люди получают деньги не за закрытые тикеты, а за месяц. В такой системе мотивации людям не нужно здесь и сейчас участвовать в обсуждениях, ведь им и так упадут деньги на карточку в конце месяца.\nЕгор строит систему мотивации так, чтобы самому программисту было интересно участвовать в обсуждении без менеджера, чтобы завершить поставленную задачу и получить результат в виде денег.\nКак не допустить хаос неконтролируемых изменений в коде? Должна быть построена культура code-review, причем Егор использует два ревью: одно от такого же участника команды, а второе - от архитектора проекта, и только потом код попадает в основную ветку. Архитектор является в данном случае техническим лидером, он решает, как будет выглядеть конечный продукт.\nЯ вижу два минуса в этой системе: первый - это лучше человек не запостит тикет с багом и умолчит о проблеме, а второй минус - это возможный переизбыток тикетов в системе, когда на каждый чих создают issue. Не проще ли собрать мит, обсудить, а затем залоггировать результат обсуждения в GitHub? Первая проблема действительно актуальна, считает Егор, но актуальна она для джуниор-девелоперов. Это те люди, которые не умеют задавать правильно вопросы, чтобы получить хорошие ответы. Джуны должны учиться получать информацию из публичных источников в первую очередь, а обычно они начинают спрашивать своих друзей и коллег.\nВторая проблема - проблема избытка тикетов - это тоже беда именно джуниоров, а не системы. Если человек не умеет четко поставить вопрос или описать проблему в одном тикете, значит проблема в этом неумении, а не в системе. Джуны действительно начинают спамят тикетами, задают в них вопросы типа \u0026ldquo;помогите разобраться, вот мои B вопросов\u0026rdquo;. Иначе говоря, люди переносят идею митинга в обсуждение на GitHub.\nВо-первых, на каждый вопрос должен создаваться один тикет, который можно будет закрыть, когда ответ на этот вопрос найден. Джуниоры же этого не понимают и создают полотно текста.\nВо вторых, некоторые джуны создают тикеты с текстом \u0026ldquo;help me, I don\u0026rsquo;t understand\u0026rdquo; и ждет, что придет эксперт и объяснит ему. Как будто задал вопрос по телефону кому-то.\nЕгор советует не работать с такими людьми. Он спрашивает всегда, каков опыт людей в опенсорсе, и если он нулевой, то Егор отказывается работать с такими людьми. Он считает, что опенсорс формирует мировоззрение людей так, что они начинают понимать, что они никому не нужны, никто им не будет помогать, если они не потрудятся и что\n получить ответ можно только лишь задав правильно и лаконично вопрос.\n ","permalink":"https://maximgorbatyuk.github.io/blog/management/2020-02-03-get-rid-of-experts/","summary":"Эта статья - конспект видео-доклада Егора Бугаенко. Доклад доступен на youtube по ссылке.\n В чем проблема  Если у вас очень \u0026ldquo;умная\u0026rdquo; команда, то у вас проблемы.\n Здесь Егор имеет в виду не интеллект, а количество знаний, которые в голове у членов команды, хотя этому место в документации или коде. Если в команде есть люди, которые обладают большим количеством знаний о продукте, который вы пишете, то у вас как у менеджера проблемы.","title":"Избавляйтесь от экспертов. Егор Бугаенко"},{"content":"Эта статья - конспект видео-доклада Егора Бугаенко. Доклад доступен на youtube по ссылке.\nДоклад был рассказан на конференции для мобильных разработчиков, поэтому истории и примеры Егор приводит тоже для них. В процессе доклада я насчитал шесть трендов, а не пять, но названия статьи менять не буду.\n Доклад Доклад Егор начинает с примера из жизни. Он хотел создать демо-приложение для iOs, но у него не получалось. Все туториалы, говорит он, приводят примеры написания кода. Егор же интересовался сборкой проекта и его публикацией хоть где-нибудь. Код - это наименьшая часть проекта, считает Егор, а вот сборку проекта, юниттесты, настройку CI/CD и публикацию приложения он считает самой главной его частью. И Егор удивлен, что остальные разработчики не уделяют достаточно внимания этим процессам и их автоматизации.\n1. Deploy First, code next Чаще всего разработчик при входе в новый проект не сталкивается с проблемами настройки окружения, деплойментом, CI/CD - все уже настроено до него или за него другими людьми. Отсюда и складывается тенденция, что разработчики совершенно не умеют заниматься этим. А ведь эти процессы и механизмы и делают продукт из набора классов и файлов, которые пишет программист. Программисты не видят полный цикл сборки проекта, они не знают, как написанный ими код попадает на продакшн-сервер.\nЕгор приводит еще один пример, почему деплой проекта важнее настроить в первую очередь, прежде чем что-либо кодировать. Он рассказал историю создания приложения на Flutter. Парень предложил помощь с этим фреймворком и разработать демо-приложение. Спустя некоторое время этот разработчик возвращается с репозиторием и говорит: \u0026ldquo;сделал, проверьте\u0026rdquo;. А как получить этот набор файлов на смартфон? Егор попросил упростить процесс проверки прилоежния до максимального. Разработчик подготовил TestFlight и объяснил что нужно сделать, чтобы установить себе тестовое приложение. Егор увидел, что есть пара ошибок в приложении и хотел закоммитить правки и отправить pull-request, однако чтобы убедиться, что его код не ломает приложение, он хотел как минимум собрать приложение с измененным кодом. Сделать этого не получилось \u0026ldquo;из коробки\u0026rdquo;. Егор попросил написать разработчика инструкцию и положить ее в репозиторий, но эта просьба осталась без ответа.\nЕгор рассказал эту историю, чтобы показать, почему сборка важнее кода. Не настроив сборку и деплоймент до буквально нажатия одной кнопки или запуска одной команды скрипта, вы не сможете привлечь новых контрибьютеров в свой проект. Вы как мейнтейнер своего проекта, который хочет расширить сферу своего влияния и упростить порог вхождения новых людей в проект, должны упрощать сборку и другие процессы. Иначе люди с разным уровнем компетенции просто не смогут вам помочь в развитии вашего продукта.\nРазработчик из истории поступил как \u0026ldquo;одиночка\u0026rdquo;, который сам знает что делать и как делать. Его опыт можно экстраполировать на так называемую \u0026ldquo;продуктовую команду\u0026rdquo; - команду людей, которые работают вместе довольно давно над одним продуктом, и знания и компетенции содержатся в их головах. Такой подход Егор считает неверным, так как тендеция идет к тому, что в проекты все чаще заходят люди с аутсорса и фрилансеры со всего мира. Чем выше текучка, тем лучше, ведь новые люди - это новые компетенции и более новые практики. Новички, приходя в ваш проект, должны попадать в дружественное к себе окружение и должны видеть весь скоуп проекта без необходимости \u0026ldquo;пообщаться\u0026rdquo; с кем-то из старожил проекта. Причем запуск билда и деплой не должен зависеть от IDE автора проекта, ведь эту IDE еще нужно настраивать в течение длительного времени. Весь этот процесс, считает Егор, должен запускаться из командной консоли одной командой.\n2. No pet projects? A bad programmer! Большинство разработчиков работают в команде, и даже если они вдохновятся идеями Егора, то они не смогут одномоментно привнести описываемые им практики в рабочие проекты - будут трудности и сопротивление остальных участников команды. Поэтому один из немногих выходов из этой ситуации - наличие собственных pet-проектов.\nЕсли вы считаете себя хорошим разработчиком мобильных приложений, у вас должен быть как минимум один опубликованный pet-проект в App Store или Google Play Market. Действительно специалист мобильной разработки должен уметь пройти весь цикл приложения от А до Я, в том числе и публикация в официальном магазине приложений. И пусть там будет около нуля загрузок - это не важно. Важно умение сделать из проекта продукт. Егор также считает, что все pet-проекты должны быть opensource, чтобы к нему могли присоединиться и другие контрибьютеры при желании. И чтобы эти контрибьютеры показали, как у них \u0026ldquo;не получается\u0026rdquo; задеплоить ваше приложение.\nЕсли у мобильного разработчика нет опубликованных pet-проектов, то этот разработчик, по мнению Егора, не сильно заботится о своей карьере, либо он просто боится пройти весь цикл жизни приложения самостоятельно. И в том, и в другмо случае говорить о высоком профессионализме такого разработчика не приходится.\n3. How much you can code in 100$? Многие разработчики не умеют работать с деньгами: они привыкли получать оплату в конце месяца и не умеют оценивать свою работу в меньших масштабах. Многих вводит в ступор вопрос \u0026ldquo;сколько кода ты напишешь за 100$\u0026rdquo;. Сколько они хотят получать за месяц знают почти все, а вот в обратную сторону и за меньшие порции денег - почти никто.\nЕгор считает, что наиболее успешные проекты будут строиться группой разработчиков-фрилансеров, которые собираются временно, пилят проект и разбегаются. Люди приходят, когда проекту нужны их компетенции, и уходят, когда эти компетенции становятся не нужны. Эра, когда группа разработчиков \u0026ldquo;сидят\u0026rdquo; в компании и вынуждены периодически переучиваться на новые технологии и языки, проходит. Компании, если она хочет создать новый проект с новым стеком технологий, станет невыгодно мпереучивать своих штатных разработчиков, ей будет легче найти фрилансеров со знаниями и быстро запилить проект.\nЧтобы разработчикам можно было жить в таком мире, разработчики должны уметь посчитать свою стоимость и знать, сколько стоит их час работы. Также необходимо каждому разработчику научиться продавать свои компетенции и научиться жить в условиях, когда нужно быстро интегрироваться в новый проект, понять его скоуп, понять свою задачу, затем ее быстро сделать и так же легко уйти.\nЕгор считает, что резюме разработчика должно состоять из списка pet-проектов, а не компаний, где разработчик отработал N лет своей жизни. Законченный pet-проект - это умение довести проект до состояния продукта, а работа в компании в течение N лет - это чаще всего лишь допиливание существующего продукта, где врядли человек занимается чем-то большим. Что умеет разработчик из компании, какие у него компетенции и навыки - остается неизвестным, пока этот разработчик, собственно, не начнет проявлять себя в проекте.\n Такой разработчик хочет, чтобы я взял его на месяц, дружил с ним целый месяц, и неважно, какой от него будет результат.\n Совет Егора разработчикам: учитесь работать по контракту. Даже будучи занятым fulltime на текущей работе, разработчикам нужно находить микро-проекты и учиться работать по контракту на них. Это позволит понять, нужны ли вы рынку как эксперт, или только одному боссу, который боится вас потерять и именно поэтому готов платить больше.\nУмение посчитать время разработчика отсутствует не только у самих разработчиков, но и у заказчиков. Заказчик не понимает \u0026ldquo;ценообразования\u0026rdquo; часа работы программиста и просто хочет подешевле, когда слышит стоимость. \u0026ldquo;Давай не 100$, а 50$?\u0026rdquo;. Егор видит в таких случаях, что заказчик не понимает цены, но вполне может согласиться на цену в два раза меньше и скажет потом, что работа займет в два раза дольше. Заказчики привыкли к fulltime-оплате за 8 часов в офисе, и отсюда и неумение считать стоимость часа работы программиста.\n4. Good programmers write code, best ones - tickets! Программисты и заказчики привыкли к неформальному общению.\n Неформальное общение в виде чатов, звонков и митингов только разрушают проект, делают ему только хуже\n Неформальное общение остается \u0026ldquo;в воздухе\u0026rdquo;, принятые решения в таких коммуникациях трудно отследить. Когда команда меняется (а она будет меняться), очень важно для команд будущего насколько понятен скоуп проекта, его контекст, почему были выбраны те или иные решения. Новички в команде не хотят искать человека в офисе, который объяснит все это, они хотят просто прочесть эту информацию в репозитории или тикетной системе.\nЧасто разработчики идут на поводу у заказчиков и не документируют такие принятые решения в неформальных коммуникациях, и делают это очень зря. Устно принятые решения забываются, по ним нельзя решить конфлитные ситуации. А если бы разговор был закреплен информацией в тикете, а еще лучше бы информация перешла исключительно через тикет, то конфликты в будущем не возникали бы.\n Программистам нужно учиться формулировать задачи в виде тикетов: блок текста, описывающем ограниченную задачу.\n С разработчиком клиент поговорил, заказчик хочет что-то поменять - разработчики конвертируют это в тикет с ограниченным скоупом: что нужно исправить, как должно быть, как воспроизвести, и уже по этому тикету идет работа.\nПо мнению Егора, есть два вида разработки:\n Continious Development - когда разработчик садится в 9 утра за рабочий стол и начинает кодировать до 5 вечера. Incremental Development - когда разработчик работает исключительно по тикетам. Пока нет тикета, разработчики ничего не должны делать. Каждый тикет оканчивается pull-request\u0026rsquo;ом в репозиторий, который будет принят, а тикет - закрыт.  Инкрементальная разработка - это когда на тикет уходит час-два времени, а не неделя. Когда на тикет уходит неделя и заканчивается он пулл-реквестом на 5000 строк - это уже continious development.\nЕгор считает, что именно второй вариант должен преобладать в работе разрабтчиков.\n Нужно учиться разбивать задачу на маленькие подзадачи.\n Код написать проще, чем грамотно проработанный тикет: нужно правильно отобразить все требования из разговора с заказчиком так, чтобы другой разработчик понял, что хотят сделать в результате тикета.\n5. What programming language should I learn first? English! Русскоязычное комьюнити - это плохо, считает Егор. Он рекомендует двигаться в сторону использования только английского языка в своей профессии.\nТак как Егор считает, что так как индустрия software development движется в сторону мультиязычных команд, то и позиционировать себя нужно как \u0026ldquo;Swift software engineer\u0026rdquo; вместо \u0026ldquo;разработчик на Swift\u0026rsquo;е из Москвы\u0026rdquo;. Это значит, что конкурировать за проекты разработчики из Москвы будут с англоговорящими. Учитывая, что большинство платежеспособных заказчиков тоже англоязычные, то русскоговорящие разработчики могут запросто проиграть эту конкруренцию. На глобальном рынке такие разработчики могут легко стать изгоями.\nРекомендации, которые дает Егор для прокачки своего английского языка:\n Читать книги и материалы только на английском языке. Смотреть фильмы на английском языке с субтитрами. Только так можно понят реальный английский язык, на котором разговаривают в жизни. Участвовать в чатах на английском языке. И не только readonly-режим. Писать на английском языке: telegram-канал, твиттер, блог, что угодно.  Мир меняется не сторону программистов, которые хорошо знают алгоритмы, а в сторону тех людей, кто умеет сделать продукт.\n Не нужно сильно заморачиваться насчет грамматики и правил, главное - чтобы вы могли понять других людей и вас могли понять.\n Чтобы этого достичь, нужно как минимум начать делать это.\n6. No GitHub followers? You are not a programmer. Весь мир идет к opensource, считает Егор. Приватными останутся только Nasa-вские и военные проекты. Разработчики должны уметь писать опенсорс и участовать в нем. В опенсорсе никто никому не нужен, никто не знает вас как человека, важен лишь проект, который вы пишете. Именно такой подход и будет превалировать в продакшн-разработке в будущем.\nО человеке, который сидит в офисе, знают только лишь его коллеги, которые легко забудут о нем, когда он уйдет. А вот о человеке, у которого есть фолловеры на GitHub, знают гораздо больше, он имеет какое-то влияние на опенсорс.\nКогда вам понадобится эксперт в какой-то области на разовую работу, то проще всего будет начать искать такого эксперта именно на гитхабе или StackOverflow.com. Это в случае, если вы выступаете в качестве заказчика работы. Эта же логика работает и в обратную сторону - вы сможете найти себе микропроект так же через GitHub-аккаунт, если у вас будет какое-то влияние на комьюнити.\nВопросы из зала Наиболее интересные.\nЧто делать, если хочется выпускать контент качественный на английском языке Пользоваться proofreading\u0026rsquo;ом. Егор сам пользуется услугами native-speaking фрилансера (с upwork.com) для проверки всех своих статей для блога. Стоит это, по словам Егора, около 15-25$, и это не так дорого, если писать в блог 1-2 раза в месяц. Без проверки статьи лучше не публиковать, потому что качество контента - это важно.\nЕгор еще раз упомнялу, что цель производства контента - собратб вокруг себя аудиторию, заинтересовать их, \u0026ldquo;продать\u0026rdquo; им идею или проект, и сделать это можно и без идеального английского. Главное - стараться.\nЕсть сомнения, что нужно следовать принципу Deploy first, в особенности в отношении pet-проектов, ведь иногда нужно только \u0026ldquo;провалидировать\u0026rdquo; идею/видение. Упаковка и соответствующие сборке процессы не должны занимать много времени, Егор считает, что максимум - это несколько часов первоначальной настройке. Когда он начинает новые проекты, то он тратит не более 2х часов на настройку деплоймента, но зато в итоге он уже в самом начале работы имеет возможность увидеть, как его собранный пакет \u0026ldquo;висит\u0026rdquo; публичном репозитории, откуда его может скачать любой желающий. Таким образом, Егор может заинтересовать других контрибьютеров гораздо раньше.\nКак не ошибиться и не нанять посредственного кодера с раскрученным GitHub-аккаунтом вместо отличного разработчика без фолловеров? Егор часто слышит такой вопрос и считает, что раскрученный аккаунт на GitHub не может быть у посредственного разработчика. Фолловеры на гитхабе не будут просто так подписываться на других разработчиков, они не будут участвовать в его проектах.\nПрежде всего Егор советует смотреть на Гитхаб разработчика, и именно так можно понять, посредственный разработчик или нет. Есть много людей, которые пишут книги и материалы о чистом коде, однако их гитхаб почти пустой, и так и можно понять, \u0026ldquo;самозванец\u0026rdquo; человек или нет.\nЯ разработчик из продуктовой компании, и меня зацепили слова про то, что продуктовые команды разработчиков \u0026ldquo;не нужны\u0026rdquo;, ведь продукт живет и развивается. Егор считает, что выражение \u0026ldquo;хороший продукт пишет хорошая команда разработчиков\u0026rdquo; - это заблуждение. Прежде всего хороший продукт выходит из хорошего кода / репозитория. Команда же должна ротироваться, и это делает код репозитория только лучше. Егор считает, что\n \u0026hellip; если команда давно работает вместе над одним проектом, то код в репозитории у них чаще всего плохой. Все знания и принятые решения остаются в головах этих разработчиков, ведь они уже друг друга понимают \u0026ldquo;с полуслова\u0026rdquo;, а в коде - лишь остатки того, что они обсуждают.\n Если же перевернуть эту ситуацию и сделать так, чтобы репозиторий был источником знаний, то состав команды становится неважен. Новички в команде открывают репозиторий и видят хороший и понятный код внутри, документацию, комментарии и прочую информацию о том, почему были приняты те или иные решения. И эта информация никогда не потеряется со сменой участников команды.\nЕгор решил упомнять и следующую тендецию в ответе на заданный вопрос: если раньше считалось, что если человек сидит в одной компании по несколько лет и в его резюме всего несколько таких компаний, то это говорит об его лояльности, а если компаний и проектов много, то он считается ненадеждным разработчиком. Сейчас же считается, что \u0026hellip;\n если вы не меняете место работы каждые два года, то вы получаете в два раза меньше, чем вы заслуживаете.\n Цитата не Егора, но источник вспомнить он не может. Если вы не меняете работу каждые два года, то это значит, что вы засиделись.\nМой вопрос пересекается с предыдущим. Если в будущем команды будут \u0026ldquo;фичевые\u0026rdquo; - преходящие для имплементации одной конкретно взятой фичи (feature), то как можно говорить о поддержке кода? Ведь каждая новая команда захочет просто все переписать по-новому или использовать разные паттерны. Получается, должны быть какие-то четкие архитектурные правила. А как насчет непосредственно доставки инкремента продукта? Будет какая-то отдельная преходящая команда, которая будет отвечать только за доставку? А если есть внешние зависимости между командами? Много в этом вопросе содержится ответов. Действительно, каждый новый разработчик будет всегда видеть \u0026ldquo;ужасный код\u0026rdquo;, который написали до него и будет хотеть все переписать. Этому противиться должен сам репозиторий проекта. Задача репозитория - выжить, потому что между ним и разработчиками идет постоянная война.\nЧтобы репозиторий был целостен и сохранял свою архитектуру, он должен иметь CICD, юниттесты, проверку синтаксиса, документацию, код-ревью и прочие вспомогательные вещи помимо самого кода. Тогда новички в команде не смогут так легко изменить все кардинально и радикально одним лишь pull-request\u0026rsquo;ом.\nЕсли же в репозитории нет перечисленных Егором вещей и каждый может просто запушить в master-branch все, что ему захочется, значит репозиторий эту войну проиграл. Если репозиторий сильный, то он просто не пропустит подобной ситуации, когда каждый новый \u0026ldquo;ковбой\u0026rdquo; пытается его сломать.\n Если какая-то ситуация приводит к поломке репозитория в процессе его жизни, то это лишь повод усилить его и закрыть брешь.\n ","permalink":"https://maximgorbatyuk.github.io/blog/management/2020-02-01-five-trends-we-are-afraid-of/","summary":"Эта статья - конспект видео-доклада Егора Бугаенко. Доклад доступен на youtube по ссылке.\nДоклад был рассказан на конференции для мобильных разработчиков, поэтому истории и примеры Егор приводит тоже для них. В процессе доклада я насчитал шесть трендов, а не пять, но названия статьи менять не буду.\n Доклад Доклад Егор начинает с примера из жизни. Он хотел создать демо-приложение для iOs, но у него не получалось. Все туториалы, говорит он, приводят примеры написания кода.","title":"Five trends we are afraid of. Егор Бугаенко"},{"content":"Эта статья - конспект видео-доклада Егора Бугаенко. Доклад доступен на youtube по ссылке.\n Проверим, а не микроменеджер ли вы. Егор предлагает публике ответить на несколько вопросов, чтобы проверить себя, и на выбор дает по три варианта ответа. Каждый в зале должен был выбрать наиболее близкий вариант к его ответу. Вопросы и варианты:\n  Один из худших программистов спрашивает \u0026ldquo;Могу ли я поработать сегодня из дому?\u0026rdquo;. Ваш ответ:\n Конечно нет! Да, но пообещай мне\u0026hellip;. Конечно да, почему ты вообще спрашиваешь?    Вы заметили, что кто-то из команды смотрит youtube-видео, несмотря на приближающийся дэдлайн. Ваши действия:\n Спросить \u0026ldquo;Что ты делаешь?\u0026rdquo; Поговорить с ним позже Присоединиться и вместе посмотреть видео    Вы назначаете митинг, но дизайнер говорит, что у него нет времени и он не придет на встречу. Ваши действия:\n Сказать \u0026ldquo;Ты обязан присоединиться в любом случае\u0026rdquo; Сказать \u0026ldquo;Мы обсудим твое отношение позже\u0026rdquo; Сказать \u0026ldquo;Как насчет 50$ за участие?\u0026rdquo;    Новый разработчик в команде фэйлит два дэдлайна подряд без уважительной причины. Ваши действия:\n Попросить о более частых репортах о своей работе Уволить ее (Егор использует именно местоимение \u0026ldquo;она\u0026rdquo;) Дать ей повышение    Вы заметили, что ваш программист делает некоторую задачу, которую он получил у другого менеджера. Ваши действия:\n Попросить ее перестать делать это немедленно Поразмыслить, что именно она делает и может ли это помочь вашей команде Попросить того Проджект-менеджера научить вас менеджменту    DevOps-ер жалуется, что его зарплата меньше, чем зарплата разработчика. Ваши действия:\n Пообещать ему повышение Дать ему повышение Предложить ему стать разработчиком    После оглашения вопросов Егор предлагает посчитать баллы, и стоимость ответов следующая:\n 4 балла: 1b, 2a, 3b, 4a, 5b, 6a. 1 балл: 1a, 2b, 3a, 4b, 5a, 6b. 0 баллов: 1c, 2c, 3c, 4c, 5c, 6c.  И после этого Егор говорит, что с радостью бы нанял тех, у кого получилось 0 баллов. А если менеджер набрал более 8 баллов, то он может смело назвать себя микроменеджером. У а тем, кто набрал более 16 баллов, вообще не место в менеджменте, считает Егор.\nРазница между хорошим менеджером и микроменеджером в том, что микроменеджер говорит как делать что-то, а менеджер - что нужно достичь. В пример Егор приводит фото рецепта, где полностью описана инструкция сырников: что смешивать, сколько, в каких пропорциях и сколько времени запекать. Егор говорит, что дай этот рецепт шеф-повару, то он просто откажется работать по нему и скажет \u0026ldquo;Дай мне просто сделать тебе сырники так, как я умею\u0026rdquo;. Если же шеф-повар сделает сырники по данному рецепту и сырники получатся невкусными, то вины шеф-повара в этом нет - ведь это вы дали повару рецепт и указали следовать строго инструкции. Это и есть микроменеджмент.\nСпециалист лучше знает как ему работать, где ему работать и во сколько ему работать. Такому специалисту нужно только лишь поставить цель.\nА теперь разберем ответы.\n1. Один из худших программистов спрашивает \u0026ldquo;Могу ли я поработать сегодня из дому?\u0026rdquo;  Конечно нет! Да, но пообещай мне\u0026hellip;. Конечно да, почему ты вообще спрашиваешь?  Первый ответ - очевидный пример микроменеджмента. Не сделать худшего разработчика лучшим только лишь запретив работать ему из дому, так что такой ответ точно не приведет к повышению эффективности. Более того, он \u0026ldquo;убьет\u0026rdquo; мотивацию этого разработчика развиваться.\nВторой ответ немного лучше, но он манипулятивный. Как будо вы вступаете в некую сделку с этим разработчиком.\nТретий ответ - это профессиональный ответ менеджера. Разработчик знает свою цель, свои задачи, знает поставленные правила игры, сроки и последствия, которые могут его настигнуть, если он не сдаст задачу вовремя. Менеджеру все равно, откуда разработчик работает. Более того, если от сотрудника возникает вопрос подобного характера, то это - подпись в собственной некомпетентности менеджера.\n2. Вы заметили, что кто-то из команды смотрит youtube-видео, несмотря на приближающийся дэдлайн  Спросить \u0026ldquo;Что ты делаешь?\u0026rdquo; Поговорить с ним позже Присоединиться и вместе посмотреть видео  Первый ответ - классический способ проверки на микроменеджмент. Этот вопрос значит, что менеджер признается в собственной профнепригодности. Абсолютно нет разницы, что делает разработчик в данное время. Вы ему цель поставьте, обозначьте правила работы, мотивационную систему и систему \u0026ldquo;наказаний\u0026rdquo;, и разработчик сам решит, как распорядиться своим временем в заданных условиях. Может быть у разработчика такая модель работы с кодом: написал код, посмотрел видео. Может он ночью напишет этот код, а вот сейчас он посмотрит видео. Профессионал знает правила и сам решает, как распорядиться временем.\nВторой вариант получше, но это - \u0026ldquo;затаить обиду\u0026rdquo;, как говорит Егор. Менеджер как будто запоминает ситуацию и собирается поднять этот вопрос на следующем митинге. Если так будет, то разработчики будут подстраивать свою работу не под цели проекта, а под конкретного менеджера. Это - одна из классических ошибок менеджмента, когда сотрудники работают исключительно на него. Цель проекта - закрыть N тикетов за месяц, а не сделать счастливым конкретного менеджера. Проект - это начальник разработчика, а не конкретный менеджер.\nРоль тимлида заключается в трех вещах:\n Придумать и определить правила игры. За что люди должны бороться, какие показатели должны быть и каких результатов должны достичь. Тимлид должен обеспечить, чтобы награждение поступало вовремя: бонусы, отпуск и тд. Каждый участник команды преследует какую-то личную цель, и задача тимлида - сделать так, что эта личная цель благоприятствовала цели проекта. Врзнаграждение должно приходить тем, кто играет по правилам проекта. Наказание тоже должно приходить неминуемо к тем, кто нарушает правила проекта, и обеспечить это - тоже задача тимлида.  Если вы выбрали третий вариант, то вас трудно назвать микроменеджером. Почему бы и не посмотреть видео с ним, если у вас есть время. У разработчика свои правила игры, у вас - свои. Если разработчик считает, что для достижения его цели нужно посмотреть видео, то пусть смотрит. Наказание не минует его, если правила игры нарушены будут (а правило \u0026ldquo;не смотреть ютьюб ни при каких обстоятельствах\u0026rdquo; - очень странное), и награда так же будет дана разработчику, если цель будет достигнута.\n3. Вы назначаете митинг, но дизайнер говорит, что у него нет времени и он не придет на встречу. Ваши действия:  Сказать \u0026ldquo;Ты обязан присоединиться в любом случае\u0026rdquo; Сказать \u0026ldquo;Мы обсудим твое отношение позже\u0026rdquo; Сказать \u0026ldquo;Как насчет 50$ за участие?\u0026rdquo;  Чаще всего митинг нужен менеджеру. Если дизайнер говорит, что ему митинг не нужен, значит он и вправду так считает: он знает свои цели, он знает правила игры, он знает о системе наказания и награждения, и если он говорит, что митинг ему не нужен, значит так оно и есть. Если же менеджеру нужно, чтобы дизайнер присутствовал на митинге, значит менеджер и должен как-то замотивировать дизайнера на участие в нем (пример с 50$ был дан ради шутки). Сотрудников нужно не микроменеджерить, а уважительно с ними общаться и договариваться на принципах торговых отношений. Если дизайнер говорит, что участие в митинге для него - трата времени в обмен на ничто, значит менеджеру нужно уравнять сделку.\nВторой вариант - манипулятивная техника. Менеджер просто пугает дизайнера и вменяет чувство вины. Дизайнер может начать думать, что правила игры включают и умение подстроиться под конкретного менеджера, а не под задачи проекта.\n4. Новый разработчик в команде фэйлит два дэдлайна подряд без уважительной причины. Ваши действия:  Попросить о более частых репортах о своей работе Уволить ее (Егор использует именно местоимение \u0026ldquo;она\u0026rdquo;) Дать ей повышение  Почему новичок фэйлит дэдлайны? Егор считает, что причиной может быть низкая замотивированность в проекте у него. Разработчику недостаточно \u0026ldquo;кнута\u0026rdquo; и \u0026ldquo;пряника\u0026rdquo;. Разработчик увидел, что за первый фэйл наказания не последовало, и, возможно, за предыдущие выполненные цели вознаграждения тоже не было, значит правила игры либо не поставлены правильно, либо относятся к их выполнению халатно. Вы взяли новичка в команду, вы увидели его навыки на интервью.\nПример с повышением зарплаты так же дан утрировано, однако Егор считает, что менеджеру нужно спросить новичка \u0026ldquo;А что тебе нужно дать, чтобы ты не провалил третий дэдлайн? Может тебе чего-то не хватает?\u0026rdquo;. Может быть разработчику нужны бонусы или зарплата повыше. Увольнение - тоже не самый хороший способ. Увольняя людей, вы не научитесь сами и не научите команду правилам игры. Более того, Егор считает, что\n увольняя людей, менеджер расписывается в собственной профнепригодности.\n Ведь менеджер нанимал этого человека, общался с ним, доносил установленные правила игры до него. И если по итогу работы в течение некоторого периода менеджер вынужден увольнять человека, значит либо правила игры не были построены верно, либо они не соблюдаются. Когда новичок уходит сам, то это прекрасно, считает Егор. Разработчик, придя в команду, увидел установленные законы, попробовал поработать в их рамках, но спустя время понял, что ему они не подходят. Разработчик сам видит, что не вписывается в ваши правила и уходит. Егор считает, что это - признак факта, что правила игры достаточно строгие, чтобы удерживать лучших сотрудников под текущие условия (не худших или лучших, а наиболее подходящих, считает Егор).\nКонкретный разработчик, ушедший от вас, может отлично вписаться в другие правила игры, равно как ваши лучшие ребята могут плохо показать проявить себя в них. Ваша задача как менеджера - выстроить правила игры такие, которые подходят лучше поставленным целям бизнеса.\nПервый вариант - замый ужасный, так как бессмысленно сокращать время периода репортов, ведь проблему это не исправит и вынудит новичка работать не над проектом, а над отчетами для вас. Мотивация человека просто умрет в таком случае.\n5. Вы заметили, что ваш программист делает некоторую задачу, которую он получил у другого менеджера. Ваши действия:  Попросить ее перестать делать это немедленно Поразмыслить, что именно она делает и может ли это помочь вашей команде Попросить того Проджект-менеджера научить вас менеджменту  Двуначалие категорически не приветствуется. Егор считает, что правилами должно быть установлено, что брать задачи от других команд нельзя. Егор не верит в flat-организации, где якобы нет начальников и где каждый \u0026ldquo;просит\u0026rdquo; другого что-то доя него сделать. У каждого сотрудника должен быть один начальник, считает Егор. Начальник может меняться, но источником информации, что нужно делать сотруднику, и правил игры должен быть один менеджер для него.\nЕсли вы как менеджер видите, что ваш сотрудник делает что-то для другого менеджера, значит вы - плохой менеджер, и вам следует попросить того самого менеджера научить вас ремеслу. Вы не сумели поставить четко правила игры в этой сфере. Правилами должно быть обозначено, что если к сотруднику подходит кто-то и просит сделать нечто для их проекта, то сотрудник должен перенаправить его на своего менеджера.\nПервый вариант - это классический менеджемнт. Любые приказные директивы - это микроменеджмент. Второй вариант - средний вариант на пути к микроменеджменту. Причин взятия задачи от других команду могут быть разные: может быть сервер на проде упал. Можно начинать разбираться в ситуации, но главное - прийти к дописыванию правил игры, а не к наказанию сотрудника.\n6. DevOps-ер жалуется, что его зарплата меньше, чем зарплата разработчика. Ваши действия:  Пообещать ему повышение Дать ему повышение Предложить ему стать разработчиком  Если в команде хорошо определены правила игры, если мы знаем квалификации других членов команды и знаем систему вознаграждения и наказания, а также знаем объем задач у других участников команды, то Егор считает, что вполне можно открыть заработанные деньги участниками. Если девопсер видит, что получает меньше, то вы как менеджер должны сказать ему, что в текущий момент на проекте нет настолько большой необходимости в девопсере, чтобы платить ему не меньше, чем разработчику. Таковы правила игры. Если девопсера не устраивает это, значит ему следует либо сменить команду, где правилами игры определены более высокие зарплаты девопсерам, либо сменить профессию и стать разработчиком. В наших правилах игры задано так, что разработчик получает больше.\nЕсли у людей разные квалификации и разные задачи, значит и вопроса \u0026ldquo;почему товарищ получает больше\u0026rdquo; возникать не должно. Если же он возникает, то это - вина менеджера. Для сотрудников непрозрачна система мотивации и зарплат, и именно отсюда и возникает вопрос о компенсациях.\nПервый вариант - манипулятивный, так как вы просто оттягиваете момент принятия решения. Лучше всего сразу либо отказать человеку, либо дать повышение, если считаете это приемлемым.\nВопросы из зала Ведущий дал комментарий, что его подчиненные в закрытых чатах пообещали срывать дэдлайны и просить повышения после прослушивания доклада Егора. Егор же упомянул, что построение такой системы правил требует сильного навыка менеджмента. Если же менеджер слабый и боится своих сотрудников, то у него врядли что-то получится. Доклад для тех, кто готов бороться и кто твердо стоит на своих принципах.\n Хороший тимлид \u0026ldquo;борется\u0026rdquo; со своими сотрудниками. Если тимлид слабый, то его будут использовать. Если тимлид микроменеджер, то на нем будут ездить, смотреть ютьюб, срывать дэдлайны и при этом все равно получать зарплаты.\n \u0026ldquo;Если я менеджер, то я отвечаю за результат. И когда ко мне придет мой менеджер и спросит, почему я провалил проект, то что мне ему ответить?\u0026rdquo; Микроменеджмент может пронизывать все слои структуры организации. Нельзя стать \u0026ldquo;немикроменеджмером\u0026rdquo;, когда над вами есть выше менеджер, который спрашивать \u0026ldquo;а чем вы там занимаетесь?\u0026rdquo;. Но если над вами нормальный менеджер, который вам задал правила игры, бюджет, сроки и систему мотивации и наказания, а вы не справились, то вы вполне справедливо получите свое.\nВ каких условиях или ситуациях микроменеджмент оправдан? Есть такие ситуации, например6 когда упал продакшн-сервер, и у вас есть три минуты, чтобы его поднять. Тогда-то и нужно забыть все о том, о чем Егор говорил в докладе, и сказать кому-то из разработчиков \u0026ldquo;ты, сел сюда, включил компьютер и поднял этот сервер, а ты - сядь рядом и посмотри, как первый это сделает\u0026rdquo;. И они оба сделать должны это здесь и сейчас7 Это - экстремальный режим, считает Егор, и включаться он должен редко и только в критических ситуациях. Вы просто используете своих людей для решения своих задач. Однако чем больше таких критических ситуаций, тем вы хуже менеджер.\nКакими полномочиями менеджер должен обладать, чтобы работать по таким правилам? Менеджер должен обладать максимальными полномочиями. Егор считает, что выснить, обладаете ли вы теми самыми максимальными полномочиями, можно вопросом:\n \u0026ldquo;А могу ли я завтра уволить всех и нанять новых?\u0026rdquo;. Если в ответ вы слышите \u0026ldquo;нет\u0026rdquo;, то вы - не менеджер. Вы координатор, надсмотрщик, да кто угодно, но не менеджер.\n Если нет власти уволить человека без согласования, то вы - не менеджер, у вас нет достаточных полномочий.\nКогда возникает крупная задача, то некоторые команды просят исполнителя написать некоторый план реализации, чтобы пройти дизайн-ревью. Считаешь ли ты это микроменеджемнтом? Это не микроменеджмент, считает Егор. Человеку дана свобода выбора плана, и никто не говорит ему как делать этот план. План может быть подкорректирован.\nКак надо наказывать? Зависит от формы оплаты и многих факторов. Многие привыкли, что есть только позитивная обратная связь, и наказанием может быть недостаток фидбека. Однако такое наказание, которое пришло неожиданно и не вызвано было какими-то известными заранее правилами - наиболее деструктивное наказание, разрушающее психику человека. Егор предлагает изначально убрать помесячную оплату и заменить ее оплатой за закрытые задачи. Тогда наказанием в такой системе может быть ситуация, когда мы сотруднику просто не даем задач, и, следовательно, он не получает денег.\nМожно внести систему поинтов, на основе которой вы можете лишить человека премии. Лучший мотиватор для человека и самый объективный - деньги. Человек уже сам решит, что делать с этими деньгами: в отпуск ему поехать или пиво выпить с друзьями. Когда компании мотивируют отпусками или бесплатными обедами или иными нематериальными бонусами, то это значит, что компания не умеет распоряжаться деньгами.\n Дайте сотруднику эти деньги, и он сам решит, что с ними нужно сделать, то ли в кино сходить, то ли новый айфон купить.\n Как быть в условиях ограничений? Иногда руководство не позволит дать плюшки выше, так как есть рамки проекта. Значит руководство не поддерживает ваш принцип менеджмента. Значит руководство считает, что они будут платить среднюю зарплату и не более. Это частоая история, говорит Егор. Менеджмент просто не хочет слушать идеи о дополнительных мотивациях. В таких условиях вы как менеджер можете геймифицировать процесс. Часто людям важнее увидеть асбтрактные 5 звездочек на открытой доске на стене, когда все имеют 4, чем получить премию, хотя Егор считает это странным. Но, тем не менее, он работает.\nКакое соотношение между мужчинами и женщинами в вашем проекте? Егор не знает, так как работает только с аккаунтами на гитхабе. Он прицнипально не хочет знать, кто там за аккаунтом. Егор считает, что правила игры вообще не должны зависеть от состава сотрудников по половому признаку.\nБывает так, что нужно работать на проекте в интеграции нескольких команд. И вроде как команды закрывают свои задачи вовремя, а общая цель двигается медленно и тяжело. Почему? Значит перед командами неверно поставлены цели проекта. Нужно именно интеграцию поставить целью сотрудников команд, и тогда правила игры будут работать на менеджера. Если предложить футболистам и баскетболистам вместе начать сажать деревья, то можно долго упрашивать их, говорить воодушевляющие речи о том, как это здорово - заботиться об экологии. Работа при такой системе мотивации врядли сдвинется с места, ибо футболистам и баскетболистам больше хочется продолжить играть в свои игры. Однако если предложить платить за каждое посаженное дерево по 10$, то обе команды бросят свои игры и начнут сажать деревья с радостью. Вы меняете правила игры и даете им иную систему мотивации, которая работает.\nВоодушевляющие речи могут работать на джунах, которые могут начать что-то делать только лишь потому что \u0026ldquo;так менеджер сказал\u0026rdquo;. Однако, когда вы имеете дело с программистами с десятилетним стажем, врядли такой подход сработает, ведь эти программисты видели уже десять таких менеджеров, как вы, с правилами и воодушевляющими речами как у вас. И им все равно на эти речи, ведь они планируют через год сменить компанию в очередной раз, и на деревья им наплевать, у каждого есть своя личная цель.\n Чем ближе вы свяжете личные цели сотрудников с целями компании, тем более эффективных сотрудников вы получите.\n Связать - это искусство, это тяжело. Хороший менеджер это умеет.\nЕсли взять макроменеджмент. Все люди делают свою работу, и ты вроде как и не нужен. Что вы об этом думаете? Это идеально. Идеальный менеджер - это тот, которого не видно. Когда менеджер нарисовал правила игры, объяснил их, повесил на стену, и теперь его сотрудники знают что делать, к какому сроку сделать и где взять деньги, они поняли в какой момент их уволят и за что - это Егор считает идеальным менеддментом. Кто написал эти правила, как эта машина работает, откуда деньги берутся - сотруднику все равно. Он не хочет этого знать, не хочет личных встреч с менеджером, не хочет его видеть.\nСамый худший менеджер для сотрудника - тот, который сидит рядом за столом. Такой менеджер видит, что делает сотрудник, как он это делает, в каких пропорциях работает и отдыхает.\nЧто делать такому менеджеру - работать над правилами игры. Идеального варианта никогда не будет, и менеджер смотрит на обстановку, экспериментирует, меняет правила, если это необходимо.\n Работать нужно не с людьми, а с правилами, описывающими их жизнь, и тогда люди будут счастливы и вам благодарны.\n ","permalink":"https://maximgorbatyuk.github.io/blog/management/2020-01-08-dont-you-do-micromanagement/","summary":"Эта статья - конспект видео-доклада Егора Бугаенко. Доклад доступен на youtube по ссылке.\n Проверим, а не микроменеджер ли вы. Егор предлагает публике ответить на несколько вопросов, чтобы проверить себя, и на выбор дает по три варианта ответа. Каждый в зале должен был выбрать наиболее близкий вариант к его ответу. Вопросы и варианты:\n  Один из худших программистов спрашивает \u0026ldquo;Могу ли я поработать сегодня из дому?\u0026rdquo;. Ваш ответ:\n Конечно нет!","title":"Вы уверены, что вы не микроменеджер? Егор Бугаенко"},{"content":"Источник: Видео-доклад\n Егор считает, что разработчики должны думать в первую очередь о скорости, а не о качестве кода.\n Mistakes must be forgivable, not enough code - not\n А как же качество написанного? Многие считают, что качество кода низкое в целом. Но кто виноват в этом? Егор считает, что сами программисты и виновны. Можно ли его улучшить? Возможно. Есть устойчивое мнение, что хороший программист отличается от плохого тем, что он пишет код без багов.\n A good programmer will produce fault-free code, while bad programmer will produce code that fault-ridden.\n Егор же считает, что это мнение неверное.\nЕсть также мнение насчет и багов в системе. В некоторых книгах баги сравнивают с бомбами замедленного действия. Такое сравнение Егор также считает неверным, потому что оно порождает так называемое Fear Driven Development - разработчики начинают \u0026ldquo;бояться\u0026rdquo; допустить ошибку в коде. Этот термин считается негативным, потому что если разработчик боится сделать изменения, то он будет писать как можно меньше кода, а это негативно скажется на скорости разработки продукта в целом.\n Fear makes you a worse programmer (c) Julia Evans\n К чему ведет страх разработчика:  Застоявшиеся ветки - ветки, в которых разработчик долго коммитит изменения и которые в итоге будут переписаны вследствие изменений в мастер-ветке, сделанных после создания застоявшийся ветки. Технический долг. Боимся рефакторить, боимся вносить архитектурные изменения, отсюда и накопление технического долга. Скука. Скучно разрабатывать, если нет возможности экспериментировать в коде. Разработчиков постоянно ругают за сломанный продакшн, за баги в коде, и разработчики перестают экспериментировать в проекте. Хорошие разработчики уходят из таких команд Стресс. Страх не отпускает после 6 часов, в итоге этот стресс сидит в голове вечером, ночью и утром.  Чтобы улучшить качество кода и устранить негативные последствия выше, нужно менять не людей, а процессы:\n Fix the Process, not people\n Нужно делать так процессы, чтобы почти любой разработчик мог экспериментировать без боязни сломать систему. Нужно построить blame-free среду для разработчиков, чтобы никто не боялся обвинений.\nРекомендации по улучшению кода 1. Reject it! Стройте процесс пайплайна таким образом, чтобы написанный код встречал на своем пути до продакшна как можно больше препятствий. Нельзя \u0026ldquo;экономить\u0026rdquo; силы, вложенные в создание этих самых препятствий. Если код дает хотя бы намек на \u0026ldquo;некачественность\u0026rdquo; свою - пайплайн должен его отбросить. Процессы должны быть автоматизированы.\nКакие инструменты нам тут полезны. CI/CD, rultor.com\n2. Quality Wall Как пайплайн агрессивен к написанному коду, так и сам репозиторий должен быть агрессивен к коду, который разработчик коммитит в него. Чем больше усилий прикладывает разработчик для коммита своего кода, тем лучше. Не менеджер нас ругает за закоммиченные ошибки и не коллега-программист, а сам репозиторий, с которым не поспоришь. А если кому-то из коллег не нравится код, который понравился репозиторию, то они должны винить сам репозиторий, а не разработчика. Ведь репозиторий принял этот код. И вследствие этого репозиторий и нужно менять, если он пропустил некачественный коммит.\nНа этом этапе контроллируются классы, методы, переменные и т.д. На этом этапе невозможно обнаружить функциональные ошибки. Что нам поможет для построения Quality Wall:\n Checkstyle tools PMD FindBugs (for Java) Unittests JaCoCo (Coverage controll) Mutation coverage Anti-duplicate check Code-review.  Иными словами, если у нас написан код не по стилю, либо покрытие кода тестами сократилось, то разработчик просто не сможет залить свой код в основную ветку (develop). А тимлид, в свою очередь, сможет \u0026ldquo;отпустить\u0026rdquo; на некоторое время проект спокойно, потому что он настроил процессы так, что качество кода проекта не будет падать заметно.\nКод-ревью также является одним из пунктов Quality Wall. Причем Егор советует делать ревью в два этапа: сначала peer-review коллегой, а затем ревью от архитектора проекта.\nОтношение к варнингам у Егора тоже критическое: варнинг - это такая же ошибка компиляции, значит и обрабатывать компилятор их должен соответствующе - блокировать компиляцию.\n3. Testers, not approvers Многие проекты смотрят на QA-команду как на аппруверов кода, которые и выносят вердикт, что код готов к деплою на продакшн. Егор с этим тоже не согласен. Тестеры должны работать параллельно с разработчиками и ломают систему и репорят баги проектному менеджеру и/или деливери-менеджеру. А уже деливери-менеджер решает на основе имеющихся багов релиза, релизим ли мы продукт или нет.\n4. Crash fast Егор говорит о конечных пользователей как о тестерах нашего продукта. Он поддерживает идею Crash fast - программа при получении некорректных данных должна не только крашиться, но и предоставить конечному юзеру наиболее удобный из всех возможных способов отправить баг-репорт. Тут речь не о показе стэк-трейса, конечно же, но об этом Егор и сам говорит - способа пока нет, и его еще нужно придумать.\n5. Encourage bugs Нужно построить атмосферу в команде разработки так, чтобы и девелоперы, и архитекторы, и тестеры, и вообще любой член команды хотел репортить баги, и чем этих багов больше, тем лучше. Репорт ошибки должен быть позитивным, и каждый должен хотеть сделать это. Тогда и уйдет Fear Driven Development.\nЕсли в вашем проекте мало баг-репортов, то в проекте идет что-то не так: люди боятся репортить баги или они фиксят баги мимо баг-трекер-системы. Если вы считаете, что у вас мало багов вследствие хорошей разработки, то Егор советует прикрутить инструменты из предыдущих рекомендаций и пересмотреть требования к качеству кода.\nНачать можно очень легко, даже если у вас легсаи-проект с многолетней кодовой базой. Возьмите чекстайл и включите несколько правил из сотен, которые в нем прописаны. Зафиксив эти правила в быстрые сроки, вы уже улучшаете качество продукта. Дальше можно включать правила с установленной периодичностью и рефакторить свой проект.\n6. Educate Money People Мы должны убедить заказчика проекта, что все эти проверки и процессы важны для дальнейшего качества. Обычно заказчики соглашаются с этим, однако, по словам Егора, они не могут согласиться с тезисом, что \u0026ldquo;много багов = хорошо\u0026rdquo;. Они в это не верят и сомневаются в подходе. Крайне сложно убедить money-people в том, что если вчера было 100 багов, а сегодня уже 200, то это очень хорошо, а не плохо. Что если код упал в продакшене, то виноват не автор кода, а пайплайн и система контроля качества. Егор считает, что\u0026hellip;\n It\u0026rsquo;s impossible\n А так как это невозможно, то Егор предлагает просто не сообщать им об этом. Это внутренняя кухня разработки, и заказчику не стоит об этом знать. Им стоит сообщать о высокоуровневых багах, число которых должно сокращаться при правильно построенных процессах.\n","permalink":"https://maximgorbatyuk.github.io/blog/development/2019-10-27-think-about-speed-not-quality/","summary":"Источник: Видео-доклад\n Егор считает, что разработчики должны думать в первую очередь о скорости, а не о качестве кода.\n Mistakes must be forgivable, not enough code - not\n А как же качество написанного? Многие считают, что качество кода низкое в целом. Но кто виноват в этом? Егор считает, что сами программисты и виновны. Можно ли его улучшить? Возможно. Есть устойчивое мнение, что хороший программист отличается от плохого тем, что он пишет код без багов.","title":"Не думайте о качестве, думайте о скорости. Конспект доклада Егора Бугаенко"},{"content":"Источник: Видео на youtube\nЭта статья - конспект видеодоклада Максима Дорофеева. Скриншоты сделаны из ютьюб-записи.\n В чем проблема Прокрастинация - вещь опасная. Можно увлечься совершенно неважными, но понятными мозгу, делами. А затем приходит осознание:\nНам всегда кажется, что мы делаем недостаточно. И когда наступает окончание года и приходит время личной ретроспективы, человек обычно чувствует нечто подобное:\nДжедайские техники следуют вероятностной теории мира:\n В нашем мире не всё, везде и всегда, а кое-что, иногда и местами.\n Нет ни одного гарантированного способа добиться успеха, но зато есть гарантированные способы облажаться.\nТараканы. На пути к личной эффективности нас подстерегают три таракана.\nА вдруг там что-то срочное Беда нашего восприятия в том, что мы не видим мир таким, какой он на самом деле есть. И сделать такой вывод мы можем из следующих факторов:\n мы не видим весь спектр волн, а только лишь небольшую его часть. наш мозг \u0026ldquo;научился\u0026rdquo; фильтровать и ненужную информацию, даже если она попадает в наши глаза. Так он делает, потому что ресурс обработки данных ограничен, и его нужно \u0026ldquo;экономить\u0026rdquo;. наш мозг при отсутствии \u0026ldquo;кусочков\u0026rdquo; данных учится додумывать и заполнять пробелы.  Все эти эффекты мозга приводят к тому, что когда к нам \u0026ldquo;прилетает\u0026rdquo; уведомление о новой задаче, то она кажется нам \u0026ldquo;очень важной\u0026rdquo;, потому что:\n Ничто в жизни не важно настолько, насколько вам кажется, когда вы об этом думаете. Д. Канеман\n Иначе говоря, мы отвлекаемся не на срочные задачи, а на те задачи, которые нам кажутся срочными. Этот эффект приводит к появлению амплификации истерики:\nЭто не срочно, значит - потом [Начало видео] (https://youtu.be/Uj44oXX8VMY?t=1368)\nЕсть разного рода задачи, которые человек делает в течение своей жизни: и рабочие, и личные. И их можно модели на два типа:\n   Тип задачи Не сделано Сделано кое-как Сделано хорошо     Красная (чтобы не \u0026hellip;) Ж*па Ну-у-у, ок \u0026hellip; Ну ок   Зеленая (чтобы да \u0026hellip;) Ну ок, Может завтра\u0026hellip; Ух-ты! Хорошо Круто! Класс!    Красная задача не приблизит нас к награде, она лишь делает так, чтобы не было плохо. Зеленая же приносит нам ощутимый результат, и их необходимо делать.\n Зеленые задачи позволяют нам вырасти. Красные задачи не дают нам упасть.\n Обычно люди, получая задачи \u0026ldquo;красного\u0026rdquo; и \u0026ldquo;зеленого\u0026rdquo; типов, начинают делать сразу же красную, потому что если ее не делать, то будет \u0026ldquo;плохо\u0026rdquo;. Когда красная задача сделана кое-как, то часто человек продолжает ее делать, переводя на следующий уровень. И сил на зеленую не остается. Этот подход приводит к тому, что человек почти все время занимается красными задачами, а удовлетворения от работы не чувствует, потому что не сделал зеленые. А вот если бы тот же человек оставил красную задачу на уровне \u0026ldquo;кое-как\u0026rdquo;, то он мог бы перевести и зеленую задачу на тот же уровень, и это дало бы моральное удовлетворение.\nВ первом случае усилия потрачены на красную задачу, а суммарный эффект - \u0026ldquo;Ну-у-у, ок\u0026rdquo;. Во втором же случае те же усилия дали результат \u0026ldquo;Ну-у-у, ок \u0026hellip;\u0026rdquo; и \u0026ldquo;Ух-ты! Хорошо\u0026rdquo;. Это можно назвать\n Принцип разумного рукожопия (с) М. Дорофеев.\n Сейчас только с мелочью разберусь Начало видео\nРазобраться с мелкими задачами перед выполнением крупных - это неплохая стратегия, однако есть беда: минута утром не равна минуте вечером в силу моральных сил. И при этом люди говорят, что им \u0026ldquo;не хватает времени\u0026rdquo;. И тут хочется вспомнить слова кота Матроскина.\nВозьмем, к примеру, распланированный день так, что времени хватает на четыре крупных задачи:\nЕсть большие сомнения, что физически человек будет способен эффективно поиграть в волейбол и с детьми в \u0026ldquo;Веселые старты\u0026rdquo; после марафона так же эффективно, как и на свежие силы. Один изнемногих вариантов, как все успеть сделать при таком распорядке дня - сделать всё \u0026ldquo;не очень хорошо\u0026rdquo;.\nЕсли все так, то почему многие планируют себе такой день на работе:\nЕсли работать в таком темпе долгое время, то руки обычно начинают опережать мышление. Этот принцип следует из теории \u0026ldquo;быстрого\u0026rdquo; и \u0026ldquo;медленного\u0026rdquo; мышлений (Джедайские техники). Мозг, как следует из этой теории, работает бОльшую часть времени \u0026ldquo;на автомате\u0026rdquo; и думает редко, потому что думать - энергозатратно. Следовательно, когда ресурса думать становится очень мало, человек делает почти все на автомате.\nВыводы Описанные тараканы необходимо побеждать для личной эффективности. \u0026ldquo;А вдруг там что-то срочное\u0026rdquo; работало бы, если бы нам казались срочными задачи именно те задачи, которые действительно срочные. \u0026ldquo;Это не срочно, значит - потом\u0026rdquo; работало бы, если бы мы могли \u0026ldquo;на автомате\u0026rdquo; определять действительно важные задачи срочными и приступали к их выполнению. \u0026ldquo;Сейчас только с мелочью разберусь\u0026rdquo; работало бы, если бы у нас был неисчерпаемый запас мыслетоплива в течение дня.\n","permalink":"https://maximgorbatyuk.github.io/blog/different/2019-10-05-dorofeev-3-bugs-on-way-to-future/","summary":"Источник: Видео на youtube\nЭта статья - конспект видеодоклада Максима Дорофеева. Скриншоты сделаны из ютьюб-записи.\n В чем проблема Прокрастинация - вещь опасная. Можно увлечься совершенно неважными, но понятными мозгу, делами. А затем приходит осознание:\nНам всегда кажется, что мы делаем недостаточно. И когда наступает окончание года и приходит время личной ретроспективы, человек обычно чувствует нечто подобное:\nДжедайские техники следуют вероятностной теории мира:\n В нашем мире не всё, везде и всегда, а кое-что, иногда и местами.","title":"Три маленьких таракана на пути к большому будущему. Максим Дорофеев"},{"content":"Каждый раз, когда говорят, что \u0026ldquo;в советском союзе было самое лучшее образование в мире\u0026rdquo;, я в это несильно верю.\nРазница подходов образования Я не могу судить о западном школьном образовании, потому что я сам не учился в американской школе, однако могу сделать некоторые предположения на основе общеизвестной \u0026ldquo;болонской\u0026rdquo; системе образования в университетах и образовательных документальных видео американского производства.\nЗападное образование строится на желании самого обучающегося. Американскому школьнику не дают знания в том объеме, в котором их дают советсткому. Неужели американские учителя глупее советских? А если так, то почему США в 2019ом году еще существует, а СССР распался еще в начале девяностых?\nМне кажется, что американская система образования побуждает школьников самостоятельно постигать интересующие их области знаний и, соответственно, не грузит неинтересующими их. При этом американская система не только \u0026ldquo;зачитывает\u0026rdquo; о законах физики, химии и исторических фактах, но и рассказывает их предысторию. Рассказ о том, каким образом ученый в прошлом сделал свое открытие, не менее интересен, чем само открытие. Приведу в пример открытие инфракрасного излучения Уильямом Гершелем в 1800 году. Он хотел понять, какой спектр света из расщепленного пучка излучает больше энергии. В темной комнате он расположил 7 термометров так, что каждый из них лежал под своим цветом расщепленной радуги. Также он положил восьмой термометр в темную часть комнаты рядом, чтобы получить контрольный показатель. Спустя время он вернулся в комнату и обнаружил, что термометр в темной части комнаты, лежащий рядом с красной частью пучка света, показал наибольшую температуру.\nТакие рассказы об открытиях показывают школьникам, что возможности \u0026ldquo;подстерегают\u0026rdquo; на каждом шагу. Главное - найти их и воспользоваться. Так складывается предпринимательский ум, я полагаю. При этом американское образование дает больше свободного времени школьникам как раз на самостоятельное обучение. Конечно, это свободное время школьник может потратить и на хулиганство, но тогда он вряд ли достигнет высот в карьере.\nВ советском союзе же детям преподавали факты из науки в отрыве от истории их открытия. Видимо, утверждающие школьную программу считали, что людям не нужно знать это, ведь после школы подросток пойдет в университет или ПТУ, а дальше станет \u0026ldquo;винтиком\u0026rdquo; на заводе. А на заводах и в колхозах, к слову, тоже уже поставлен такой план, что выполнять \u0026ldquo;пятилетки в три года\u0026rdquo; можно хоть каждый раз и получать за это бонусы от партии. Иначе говоря, за школьника уже всё решили, и заботиться ему почти не о чем.\nРебенок, получивший настолько большой объем информации в течение дня в школе уже не хочет изучать что-то еще дома. То есть знания-то получены в большом объеме, но как их применить в жизни школьник не знает и что самое плохое - знать не стремится в силу информационного перегруза. Тут мне вспоминается картинка из интернета, где два бомжа обсуждают и расписывают мелом какую-то теорему из математики, а третий удивленно на них смотрит.\nОтсутствие релевантных исследований Как можно вообще провести исследование, чтобы выяснить \u0026ldquo;лучшую\u0026rdquo; систему образования в мире? Чтобы подтвердить некую теорию, исследователи проводят опыт на двух репрезентативных выборках, одна из которых - контрольная, к которой никакие эксперименты не применяются. Так исследователи могут понять, а есть ли влияние исследуемого предмета на выборку.\nДопустим, мы хотим сравнить образование в СССР с какой-нибудь системой из западного мира. Для примера возьмем США. В случае изучения образований нам бы понадобилось 4 группы репрезентативных людей: две группы обучались бы сначала в рамках одной системы, затем они же должны быть \u0026ldquo;подвержены\u0026rdquo; другой системе образования. Другие две группы являются контрольными и лишь обучаются по одной системе.\nЯ вижу здесь несколько проблем, которые и делают это исследование почти невыполнимым.\nПроблема #1. Как подвергнуть людей повторному образованию \u0026quot; с чистого листа\u0026quot;? Невозможно обучить группу людей сначала по одной системе, а затем по другой, ведь они будут уже обучены некоторым знаниям, и контрольные тесты гипотетически будут лучше, чем в первый раз при другой системе. Значит мы должны каким-то образом стереть память, чтобы они \u0026ldquo;вошли\u0026rdquo; в новую системы с чистым умом. Пока что нет стабильного способа стереть память человеку, и вряд ли он появится в обозримом будущем.\nПроблема #2. Как учесть влияние возрастных изменений подростков? Для чистоты эксперимента мы должны будем откатить возраст участников на начало школьной жизни, чтобы учесть и гормональные эффекты взросления на качество получения знаний. Средство омоложения - мечта человечества, но пока что успехов в этой области немного, поэтому мы вынуждены ждать его выпуска для проведения нашего эксперимента.\nПроблема #3. Семья и генетика Чтобы определить именно влияние образование на результирующий интеллект человека, мы должны исключить влияние семьи на испытуемого. Мало кто из людей в здравом уме согласится отдать свое чадо в изолированное сообщество ради эксперимента, актуальность которого невелика, по-моему.\nГенетика и заложенные природой интеллектуальные способности тоже необходимо учитывать, однако этот момент мы уже решили самим фактом репрезентативной выборки - мы отобрали людей из разных слоев населения. Тем не менее, мы должны взять для эксперимента людей с очень близкими показателями исходного эксперимента, чтобы выяснить именно качество образования разных стран, а не способность это образование получать.\nПроблема #4. Бытие определяет сознание Школьник живет в социуме, и из этого следует, что он получает знания не только в школе, но и из телевизора и книг, к которым имеет беспрепятственный доступ. Интернет мы не рассматриваем, потому что во время существования советсткого союза интернет в понимании 2019 года не существовал. Получается, что чтобы исключить это влияние, мы должны ограничить испытуемых от него.\nС другой стороны, влияющее общество на испытуемого так же было подвержено образованию, которое мы исследуем. Получается, что оно так же является одним из исследуемых факторов образования. Однако перед исследователями стоит задача отфильтровать те нешкольные ресурсы, которые были сами произведены без влияния других школ.\nА зачем нужен сейчас такой эксперимент? С одной стороны, результаты нашего эксперимента нужны для окончательного решения диллемы, которая волнует умы людей не одно поколение. Однако учитывая сложности проведения этого эксперимента, успокоение споров отдельно взятых слоев населения, на мой взгляд, не стоит того. Невозможно организовать сейчас из-за отсутствия технологий омоложения и стирания памяти, слишком дорого и неэтично по отношению к испытуемым.\nВ заключение Мне кажется, что довод \u0026ldquo;зато образование в СССР было лучшим\u0026rdquo; звучит тогда, когда и так небольшой список преимуществ коммунистического строя и СССР относительно капитализма и капиталистических стран подходит к концу. Это своего рода попытка хоть что-то найти хорошее. На деле же аргумент об образовании не подкреплен почти ничем.\nБолее того, не стоит забывать, что банки перед телевизором, чтобы их зарядил Кашпировский, ставили именно те люди, которые получали \u0026ldquo;лучшее в мире\u0026rdquo; советское образование.\nСсылки по теме:  Причина развала СССР. Мнение инженера Remarks of senator John F. Kennedy About Soviet Union education system on Quora Here’s why education in the USSR was among the best in the world  ","permalink":"https://maximgorbatyuk.github.io/blog/different/2019-09-29-was-ussr-education-really-good/","summary":"Каждый раз, когда говорят, что \u0026ldquo;в советском союзе было самое лучшее образование в мире\u0026rdquo;, я в это несильно верю.\nРазница подходов образования Я не могу судить о западном школьном образовании, потому что я сам не учился в американской школе, однако могу сделать некоторые предположения на основе общеизвестной \u0026ldquo;болонской\u0026rdquo; системе образования в университетах и образовательных документальных видео американского производства.\nЗападное образование строится на желании самого обучающегося. Американскому школьнику не дают знания в том объеме, в котором их дают советсткому.","title":"Действительно ли образование в СССР было \"лучшим в мире\"?"},{"content":"Источник: https://brianflove.com\n Зачем Когда ты реализуешь свой компонент с участием подписок на Subject, то ты должен написать и отмену подписки, иначе будут утечеки памяти.\nДаже если зайти в описание метода ngOnDestroy, то мы увидим рекомендацию для этого:\n ngOnDestroy(): Cleanup just before Angular destroys the directive/component. Unsubscribe observables and detach event handlers to avoid memory leaks.\n В общем, ответ на вопрос \u0026ldquo;Когда нам лучше всего отписываться\u0026rdquo; у нас есть: мы пишем код отмены подписок в реализацию метода ngOnDestroy, чтобы она была запущена перед уничтожением компонента.\nКак отменить подписки Для начала определим код компонента и подписки:\nexport class MyComponent implements OnDestroy { private subscription: ISubscription; constructor() { // awesome initialization goes here  } ngOnDestroy() { // awesome code goes here  } this.counter = new Observable\u0026lt;number\u0026gt;(observer =\u0026gt; { console.log(\u0026#39;Subscribed\u0026#39;); let index = -1; const interval = setInterval(() =\u0026gt; { index++; console.log(`next: ${index}`); observer.next(index); }, 1000); // teardown  return () =\u0026gt; { console.log(\u0026#39;Teardown\u0026#39;); clearInterval(interval); } } Есть три способа:\n1. unsubscribe() Нужно сохранить подписку в компоненте и вызвать метод unsubscribe()\nngOnInit(): { const subscription = this.counter.subscribe(value =\u0026gt; console.log(value)); this.subscription.add(subscription); } ngOnDestroy() { this.subscription.unsubscribe(); } 2. takeWhile() Можно передать в этот метод некое булево свойство, и пока она true, подписка будет сохранена в памяти.\nthis.alive = true; this.counter .pipe(takeWhile(() =\u0026gt; this.alive)) .subscribe( (value) =\u0026gt; this.count = value, (error) =\u0026gt; console.error(error), () =\u0026gt; console.log(\u0026#39;[takeWhile] complete\u0026#39;) ); ngOnDestroy() { this.alive = false; } С этим оператором есть определенные проблема - вызов takeWhile() и проверка необходимости отписки происходит непосредственно сторонним событием. Получается, что если подписка отправляет некоторые данные \u0026ldquo;раз в час\u0026rdquo;, то после уничтожения компонента есть вероятно, что эта подписка \u0026ldquo;провисит\u0026rdquo; в памяти этот самый час, пока не будет вызвана проверка условия отмены подписки.\n3. takeUntil() takeUntil() более предпочтителен, так как отмена подписки базируется на другой подписке, которой управляем уже мы. Мы создаем специальный subject в нашем компоненте и передаем его в серверную подписку как триггер отписки.\nprivate unsubscribe: Subject\u0026lt;void\u0026gt; = new Subject(); this.counter .pipe(takeUntil(this.unsubscribe)) .subscribe( (value) =\u0026gt; this.count = value, (error) =\u0026gt; console.error(error), () =\u0026gt; console.log(\u0026#39;[takeWhile] complete\u0026#39;) ); ngOnDestroy() { this.unsubscribe.next(); this.unsubscribe.complete(); } ","permalink":"https://maximgorbatyuk.github.io/blog/technologies/2019-09-29-you-shoul-destroy-subsribtions-in-angular/","summary":"Источник: https://brianflove.com\n Зачем Когда ты реализуешь свой компонент с участием подписок на Subject, то ты должен написать и отмену подписки, иначе будут утечеки памяти.\nДаже если зайти в описание метода ngOnDestroy, то мы увидим рекомендацию для этого:\n ngOnDestroy(): Cleanup just before Angular destroys the directive/component. Unsubscribe observables and detach event handlers to avoid memory leaks.\n В общем, ответ на вопрос \u0026ldquo;Когда нам лучше всего отписываться\u0026rdquo; у нас есть: мы пишем код отмены подписок в реализацию метода ngOnDestroy, чтобы она была запущена перед уничтожением компонента.","title":"Не забудьте отписаться. Subject Subscribtions в Angular и RxJS"},{"content":"В комментариях к одному видео некто задал интересный вопрос:\n А должны ли программисты изучать бизнес-сферу проекта, где работают?\n Автор видео не успел ответить, а я же посчитал, что меня забыли спросить и что я должен ответить на этот вопрос.\nПочему не сотоит слепо доверять прописанным требованиям Некоторые разработчики могут подумать, что они приходят в компанию писать код и разрабатывать архитектуру, а не вдаваться в подробности бизнеса компании. Что, мол, бизнес-аналитики должны прорабатывать все нюансы проекта и сценарии взаимодействия (Use Case - UML). И это значит, по мнению этих разработчиков, что можно не о чем не волноваться, читать требования и воплощать их в жизнь так, как прописаны аналитиком. С одной стороны, такое мнение имеет право на жизнь, однако есть пара проблем:\n бизнес-аналитик может быть недостаточно квалифицированным; бизнес-аналитик может быть уставшим; бизнес-аналитик может не знать технических нюансов и возможностей; у бизнес-аналитика может быть \u0026ldquo;замыт глаз\u0026rdquo; подставь свой вариант, который опишет еще одну вероятность ошибиться на этапе проработки требований.  Как это может повлиять на программиста? А вроде бы и никак, ведь его задача была реализовать функционал по требованиям, и если требования ошибочны, то и вина лежит на бизнес-аналитике, а не на разработчике. Мне кажется, что такое мышление деструктивно и не приводит к успеху. И вот почему.\nЭффективная работа с требованиями задачи На то, чтобы разработчик вникал в бизнес-сферу, есть две причины.\nВо-первых, разработчик должен вникать в бизнес-требования не только потому, что ему претворять их в жизнь, но и для того, чтобы оценить их критическим взглядом \u0026ldquo;со стороны\u0026rdquo;. Если разработчик задаст вопросы \u0026ldquo;а почему так, а не иначе\u0026rdquo;, то бизнес-аналитик расскажет больше контекста и, возможно, поделится будущими плананми на запрашиваемый сейчас функционал. Так разработчик, во-первых, будет в курсе развития проекта, а во-вторых, сможет учесть эти планы в проработке архитектуры сейчас. Как бонус, бизнес-аналитик может иначе взглянуть на запрашиваемый функционал и, вероятно, упомянуть важные аспекты, которые он забыл внести в основную задачу.\nВо-вторых, чем лучше разработчик погружен в бизнес-контекст, тем больше улучшений он может предложить заказчику и аналитикам и тем менее он будет зависим от решения вопросов, которые совсем незначительны и не влияют на изначальные требования. Например, во время реализации задачи разработчик наталкивается на дилемму, описания которой нет в задаче. И тут у него есть три сценария:\n Задать вопрос аналитику и/или продакту (Product Owner) и ждать четких инструкций. Продумать и предложить на выбор несколько сценариев решения дилеммы, которые по мнению разработчика будут наиболее эффективны, и ждать решения. Сделать то же самое, что и в пункте 2, а затем начать реализовывать тот вариант, который, по мнению разработчика, лучше всего подойдет продукту и ляжет красиво на текущую программную архитектуру.  В первом случае разработчик ведет себя лишь как исполнитель четкой инструкции. И тут нет ничего плохого, однако большую ценность и незаменимость в таком разработчике заказчик врядли увидит. Такому разработчику легко найти замену, и даже вероятно, что замена будет стоить дешевле. А когда разработчик захочет повышения, то вероятность, что заказчик пойдет навстречу ему, крайне мала.\nВо втором случае ценность разработчика немного выше. Заказчик уже не должен вникать в контекст, а может отталкиваться от предложенных вариантов и описания их последствий. Таким образом, решение дилеммы будет придумано быстрее с большой долей вероятности. Чем чаще такие случаи будут происходить, тем легче будет разработчику учесть опыт прошлых предожений и делать предложения ценнее для бизнеса и точнее. В свою очередь разработчик делает себя более ценным для заказчика, и на удержание его на проекте пойдут охотнее. Иначе говоря, просить повышения будет легче.\nТретий случай немного отличается от второго тем, что разработчик идет на риск, что подход, который он сам выбрал для реализации, не будет выбран заказчиком. Однако я не вижу в этом большой проблемы, ведь, во-первых, полученный опыт можно учесть в реализации утвержденного сценария, а во вторых, вопрос врядли был глобальным, что разные варианты его решения приводили к кардинально разным архитектурным решениям.\nЧитатель может подумать, разработчик потратил некоторое оплаченное заказчиком время впустую, однако это не так, и вот почему:\n разработчик не виноват, что после этапа аналитики остались вопросы, требующие согласования владельцем продукта; разработчик погрузился больше в проблему бизнеса, чтобы предожить варианты решения, и это точно не может характеризоваться как трата времени разработчик вырос как самостоятельный и инициативный специалист в глазах заказчика.  В результате этой ситуации разработчик заработал себе очки в карму, и когда он захочет повышения на текущем проекте, бизнес вряд ли откажется от дальнейшего сотрудничества с таким специалистом и примет участия в переговорах о новой зарплате.\nЕще одна причина, почему разработчику нужно интересоваться бизнесом Если бы от разработчиков и не ждали погружения в контекст, а только лишь исполнение четких инструкций от бизнес-аналитиков, то такого разработчика почти ничто не отличает от обычного компьютера. Иначе говоря, разработчик становится механическим переводчиком бизнес-требований, написанных на английском человеческом языке, на язык программный. Правда, еще этот разработчик стоит гораздо дороже компьютера, иногда жалуется на \u0026ldquo;плохие\u0026rdquo; условия и периодически требует повышения. А еще может проявлять свой непростой характер. И зачем такой разработчик нужен бизнесу, если можно разработать и использовать специальный инструмент, который бы делал то же самое?\nК слову, попыток сделать инструмент, который позволил бы непрограммистам программировать продукт, было много, однако Microsoft, Uber, Google, Yandex и прочие IT-компании продолжают упорно хантить самых лучших разработчиков со всего мира. Не думаю, что они там у себя плачут, колятся, но продолжают есть кактус.\nЕсли разработчику не интересна бизнес-сфера проекта Такое тоже может быть, и тут могу сказать следующее. Если разработчик не готов проявлять заинтересованность и инииативу, то пусть будет готов, что однажды с ним расстанутся, так как нашли более дешевую замену. Иначе говоря, ваша осведомленность в бизнес-сфере - это ваше конкурентное преимущество.\nТак что же теперь делать? Навыки, полученные во время обсуждений требований, будут полезны разработчику в любом случае. Умение продавать технические улучшения никогда не были лишними, да и от дополнительные знаний бизнеса еще не один разработчик сильно не пострадал. И даже если не интересен текущий проект, то стоит прокачивать вышеописанные навыки для будущего проекта и/или работодателя.\n","permalink":"https://maximgorbatyuk.github.io/blog/management/2019-09-25-do-programmers-should-know-business-sphere/","summary":"В комментариях к одному видео некто задал интересный вопрос:\n А должны ли программисты изучать бизнес-сферу проекта, где работают?\n Автор видео не успел ответить, а я же посчитал, что меня забыли спросить и что я должен ответить на этот вопрос.\nПочему не сотоит слепо доверять прописанным требованиям Некоторые разработчики могут подумать, что они приходят в компанию писать код и разрабатывать архитектуру, а не вдаваться в подробности бизнеса компании. Что, мол, бизнес-аналитики должны прорабатывать все нюансы проекта и сценарии взаимодействия (Use Case - UML).","title":"Должны ли программисты изучать бизнес-сферу проекта"},{"content":"Disclamer Источник: https://www.joelonsoftware.com. Эта статья - вольный перевод без претензии на достоверность.\nВ переводе не стремился сохранить формулировки автора, а использовал перефразирования, которые использую в своей речи сам.\n Тест содержит 12 быстрых вопросов, и каждый ответ \u0026ldquo;Да\u0026rdquo; дает один балл. Градация результата такова: 12 баллов - идеально, 11 - это приемлемо, 10 и меньше - у команды есть проблемы. Ну а если команда набрала только лишь 2-3, то у нее действительно серьезные проблемы.\nДаже если эта команда разрабатывает самый классый продукт, она не должна забывать о качестве и процессах. Если команда стремится к тому, чтобы набирать 12 баллов в тесте Джоела, то она сможет доставлять фичи на прод и онбордить новичков гораздо быстрее, влияние человеческого фактора и шанс появления серьезных багов будет меньше.\nТест Джоела 1. Используете ли систему контроля версий? Даже можно не обсуждать этот вопрос. Если не используют, то можно поинтересоваться, какой постфикс в имени zip-архива с исходным кодом на данный момент.\nСтоит спросить про GitFlow, который команда применяет. Если она не применяет установленный какой-то, то стоит расспросить подробно, ведь команда может и не знать, что пользуется одним из них.\n2. Можете ли вы сделать билд (в прод) в один шаг? Если не могут, то во сколько шагов? Что мешает автоматизировать процесс до нажатия одной кнопки / запуска одного скрипта.\n3. Делаете ли ежедневные билды? Иными словами, используют ли CI-инструменты. Если нет, то почему нет.\n4. Ведете ли систему баг-трекинга? Софт пишут люди, и люди ошибаются. Это значит, что в софте были, есть и будут \u0026ldquo;таиться\u0026rdquo; баги, какие бы классные спецы его ни писали.\nхорошая система баг-трекинга хранит следующее:\n Шаги для воспроизведения Ожидаемое поведение Наблюдаемое поведение (которое отличается от ожидаемого) На кого назначен баг (кто над ним работает) Будет ли баг пофикшен или нет  5. Фиксите ли вы баги перед тем, как начать писать новый код? В идеальном мире разработчики фиксят баги до того, как эти баги попадают в продакшн. Однако мир не идеален, и разработчики чинят не всё и не всегда. Спроси, кто в команде решает, какие баги нужно фиксить и какие остаются техническим долгом.\nЕсли команда не заморачивается над багами, то что можно сказать о такой команде?\n6. Есть ли у вас план работ? Разработчики должны знать, куда движется проект. Ведь только так они смогут проработать такую архитектуру сейчас, чтобы в нее \u0026ldquo;безболезненно\u0026rdquo; вписались любые будущие изменения. При этом важно находить баланс и не программировать будущую функциональность.\nТакже стоит заметить, что этот вопрос не только о планах развития продукта, но и о сроках выполнения. Поставленные сроки дисциплинируют разработчиков, если, конечно же, они запланировали эти сроки.\n7. Есть ли документация? Странная вещь - эта документация: все согласны, что она нужна и полезна, но никто ее не пишет.\nРазработчики предпочитают писать такой код, чтобы он сам \u0026ldquo;говорил за себя ясно и понятно\u0026rdquo;. При это степень \u0026ldquo;ясности и понятности\u0026rdquo; может быть такой, что только одному автору и понятен код, и то здесь и сейчас. Ведь через полгода вполне вероятно, что автор сам забудет написанную им логику.\nЧеловеко-понятные комментарии к коду нужны, и главное - отразить в них скорее не поведение кода, а объяснение причин такого поведения. Ссылки на тикет тоже будут полезны.\nВедение документации в Вики/Конфлюенсе также полезно, особенно когда разработчики внедряют что-то совершенно новое: новую архитектуру, сторонний модуль или интеграцию с внутренними или внешними сервисами. Любая мысль, написанная \u0026ldquo;на бумаге\u0026rdquo;, лучше, чем ничего.\n8. Работают ли разработчики в тишине? Вхождение в поток - очень важно. Не одна статья об этом написана. Состояние потока тяжело поймать и легко потерять, когда вокруг шумно. Поэтому стоит поинтересоваться у будущей команды, в каких условиях они работают.\nПрерывания потока обходятся \u0026ldquo;дорого\u0026rdquo;, поэтому небольшие комнаты на ограниченное количество человек предпочтительнее, по-моему, чем опэнспейс на 100 человек.\n9. Используете ли вы наилучшие из имеющихся инструментов? Если сборка проекта \u0026ldquo;тормозится\u0026rdquo; мощностями компьютера, то лучше стоит апгрейднуть этот компьютер. Разработка GUI с двумя мониторами гораздо эффективней, чем с одним и постоянными сменами активного окна.\nТот же самый принцип актуален и для софта. Если есть решение, где нужный функционал предоставлен \u0026ldquo;из коробки\u0026rdquo;, но он стоит N денег, то лучше выбрать его, чем брать не совсем подходящий, требующий доработки напильником, но бесплатный. Ведь в любом случае вы заплатите за использование этого бесплатного инструмента временем настройки разработчиком.\n \u0026ldquo;Top notch development teams don’t torture their programmers (Лучшие команды разработчиков не мучают своих програмистов) (с) Joel Spolsky\u0026rdquo;\n 10. У вас есть тестировщики? В целом стоит узнать, как команда подходит к тестированию своего продукта. Есть ли юниттесты, интеграционные, ручные и/или автотесты?\n11. Пишут ли код кандидаты на позицию во время интервью? Ты и так узнаешь ответ на этот вопрос, ведь обычно сессия вопросов кандидата команде идет как раз в конце собеседования. Если кодинга не было, то стоит задать вопрос \u0026ldquo;почему\u0026rdquo;.\nТы врядли наймешь кондитера для выпечки торта для своей свадьбы без пробы, так и нанимать программиста без проверки его навыков кодирования не стоит.\n12. Используете ли вы \u0026ldquo;коридорное (hallway)\u0026rdquo; тестирование? Коридорное тестирование - это когда ты берешь случайного пользователя (как будто в коридоре) и просишь его протестировать новую фичу. Так ты увидишь в реальной жизни, как незнающий продукт человек взаимодействует с ним.\n","permalink":"https://maximgorbatyuk.github.io/blog/employment/2019-09-22-what-should-i-ask-from-future-team/","summary":"Disclamer Источник: https://www.joelonsoftware.com. Эта статья - вольный перевод без претензии на достоверность.\nВ переводе не стремился сохранить формулировки автора, а использовал перефразирования, которые использую в своей речи сам.\n Тест содержит 12 быстрых вопросов, и каждый ответ \u0026ldquo;Да\u0026rdquo; дает один балл. Градация результата такова: 12 баллов - идеально, 11 - это приемлемо, 10 и меньше - у команды есть проблемы. Ну а если команда набрала только лишь 2-3, то у нее действительно серьезные проблемы.","title":"Что я должен спросить у своей будущей команды. The Joel test."},{"content":"1. Никогда не говори, что ты чего-то не можешь Каждый может все, и не нужно искать оправдания, почему ты не можешь заниматься той или иной деятельностью.\n2. Нет хайпу! Да - труду и самодисциплине \u0026ldquo;Легко срубить бабла\u0026rdquo; практически невозможно, всегда нужно трудиться. Нужно любить свое дело и погружаться в него с головой, чтобы чего-то достигнуть в нем.\n3. Чем хуже, тем лучше \u0026ldquo;Что нас не убивает, делает нас сильнее\u0026rdquo;. Добиваются успеха те люди, которые не боятся трудностей.\n4. Кокон раскрывается на время Часто бывает, что какие-то возможности открываются лишь на время, и тут главное - не упустить свой шанс. Ежели упустил, то этим шансом больше не воспользуешься.\n5. Самое темное время - перед рассветом Если кажется, что хуже уже быть не может, то в равной степени может случиться либо еще хуже, либо все станет прекрасно. Порой встряска, которая выпадает нам, открывает в нас силы для свершения новых, принципиально отличающихся дел.\n6. Никто не хочет, чтобы у тебя получилось \u0026ldquo;Если вас никто не осуждает, если вам никто не завидует, если вас никто не критикует, если никто не становится вам поперек дороги, значит, вы не туда идете\u0026rdquo;.\n7. Прежде чем осуждать человека, надень его обувь Прежде чем судить человека за что-либо, нужно попробовать взглянуть на мир его глазами, хотя бы предположительно. И тогда многим поступкам человека найдутся объяснения, хотя бы придуманные тобой. При этом будь рад конструктивной критике.\n8. Никогда не слушай советы людей, на которых не хочешь быть похож Советы слушать лучше от тех, кто тебя вдохновляет, на кото ты равняешься. При этом не стоит слушать от тех, кто тебе неинтересен или кого ты не поддерживаешь никак.\n9. Не бывает побед без поражений Поражение - обязательный этап на пути к победе. Никогда нельзя сдаваться и останавливаться. Неприятности даны свыше, чтобы проверить тебя на прочность.\n10. Не бывает неприятностей и ошибок. Бывают только уроки Когда ты встречаешь ситуацию, которую точно нельзя охарактеризовать \u0026ldquo;хорошей\u0026rdquo;, задай себе вопрос: \u0026ldquo;чему меня это может научить\u0026rdquo;. И если тебя кинули на деньги, то говори \u0026ldquo;спасибо, что за урок взяли только деньгами\u0026rdquo;\n\u0026ldquo;.. вы никогда не сможете изменить прошлое, но в ваших силах изменить будущее. .. ошибки говорят о человеке больше, чем его достижения и успехи. Работайте над своими ошибками и не повторяйте их в дальнейшем\u0026rdquo;\n11. ППЖ - просто подними жопу Только попробовав все возможности, которые у тебя есть в конкретной негативной ситуации, сделал больше, чем все другие люди в подобной ситуации, ты имеешь право \u0026ldquo;ныть\u0026rdquo;. Иначе - иди и подними жопу, чтобы решить свои проблемы.\n12. Пенсии не будет. Рассчитывай только на себя Не стоит рассчитывать, что на пенсии кто-то будет о тебе заботиться. Нужно инвестировать в пассивные доходы либо не бросать свое любимое дело. А чтобы не бросать свое дело, нужно оставаться конкурентным специалистом даже в пенсионном возрасте.\n13. Копить нужно то, что невозможно отобрать Деньги и материальные ценности копятся всю жизнь, а потерять можно в миг. Нужно вкладывать средства и силы и в нематериальные вещи: опыт, навыки, знания. Возможно, нужно производить что-то дополнительно к основной работе. Чаще всего это - трансляция опыта на внешнюю аудиторию.\n14. То, чем ты сейчас занимаешься, и есть ты Не нужно относиться к своей работе, как к каторге \u0026ldquo;сдевятидошести\u0026rdquo;. Погружайся в свое дело с головой, думай о ней и думай как специалист в этом деле. Если же работа тебе не нравится - меняй, чего поделать.\n15. Твои результаты - это и есть ты сам Всегда можно найти причину, почему у тебя что-то не получилось или почему вокруг такое говно. Но такое мышление - перекладывание ответственности на других людей. Нужно спрашивать себя \u0026ldquo;что еще я могу сделать сегодня, чтобы завтра стало лучше\u0026rdquo;. Если конфликт, то \u0026ldquo;что я должен сделать, чтобы прекратить конфликт\u0026rdquo;.Всегда нужно думать через призму своей личности.\nЕсли ты говоришь \u0026ldquo;потому что\u0026rdquo;, то это предложение - оправдание. Нужно перефразировать такое предложение, чтобы оно содержало \u0026ldquo;для того чтобы\u0026rdquo;.\n16. Вознаграждай себя за дело Если ты достиг чего-то значимого в своем деле, да и в любой сфере, то не тяни с вознаграждением себя. Пусть это будет кусочек твоего любимого торта, если ты не ешь его каждый день, конечно же. Вознаграждением ты не только повышаешь себе настроение, но и делаешь рефлекторную мгновенную причинно-следственную связь помимо долгосрочной выгоды от совершенного поступка. Отпуск - тоже важное вознаграждение. Отдых важен, и в отпуске лучше всего перезагрузить свой мозг и не думать об операционных делах с работы.\n17. Меняй мир вокруг себя, насколько можешь Если видишь вокруг себя ситуации, которые тебе не нравятся, то вместо жалоб на них ты должен задуматься, что ты можешь сделать для исправления этой ситуации. Это относится и к двору, где ты живешь. Старайся улучшать обстановку вокруг себя и помни о \u0026ldquo;правиле бойскаута\u0026rdquo;\n18. Свои границы ты определяешь сам Многие возможности лежат за рамками наших привычек и стереотипов. Чтобы получать другие результаты. нужно пытаться делать вещи по-другому.\n19. Не планируй неудачу Нужно действовать и планировать, исходя из наихудшего варианта. И при этом ты планируешь именно успешный исход для себя\n20. Быстрый не тот, кто быстрее бежит, а тот, кто не останавливается \u0026ldquo;Не останавливайся на достигнутом. Есть либо развитие, либо деградация. Нет целей - не будет ничего хотеться. Нет устремления - не будет и движения. Нет движения - не будет и энергии. Нет энергии - не будет и жизни.\u0026rdquo;\n21. Бытие определяет сознание \u0026ldquo;Ты - среднее арифметическое пяти людей, составляющих твое ближайшее окружение\u0026rdquo;. Если хочешь вырасти - старайся общаться с людьми на уровень выше тебя. И жить нужно в том месте, в котором есть среда, меняющая твое сознание в нужную сторону. И работать в том коллективе, который будет тебя развивать. \u0026ldquo;Будь самым глупым человеком в комнате\u0026rdquo;.\n22. Инвестируй в свое развитие. Эти деньги всегда возвращаются 23. Деньги не портят человека Деньги обнажают сильные и слабые стороны человека. Часто бывает, что человека несет от \u0026ldquo;богатства\u0026rdquo;, но это обычно бывает только тогда, когда человек не заработал эти деньги, а получил их внезапно или нелегальным путем. Зарабатывающие своими руками и головой люди такого себе не позволяют.\n24. Нам не нужен мат, чтобы разговаривать Мат - придание эмоционального окраса произносимому. Если ты постоянно испытываешь эмоции до такой степени, что материшься, то это странно.\n25. Сначала успех, потом баланс Нужно сначала много работать, чтобы стать кем-то. Уже потом стоит задумываться о балансе личной и проф.жизни. О сроках: до 35-40 лет работай, потом уже пожинай плоды трудов вместе с семьей. При этом, когда работаешь, проводи каждую свободную минуту с семьей. Только так станешь выдающимся.\n26. Стань индусом \u0026ldquo;Гнев ослепляет, но, к сожалению, не парализует язык\u0026rdquo;. Главное - совладать с собой в любой ситуации и хранить спокойствие.\n27. Научись говорить \u0026ldquo;нет\u0026rdquo; Когда даешь в долг, то проверяешь за эту сумму, твои эти люди или не твои. Чем чаще соглашаешься помочь, тем больше начинают просить и садятся на шею. Безотказность - признак слабоволия, малодушия и непринятия себя и своих интересов. Нужно научиться говорить \u0026ldquo;нет\u0026rdquo;, особенно тем, кто не думает о тебе.\n28. Все начинается с утра Если утром сделал несколько значимых вещей, то внутри будет ощущение продуктивности, которое зарядит на весь оставшийся день.\n29. Что излучаешь, то и получаешь Жизнь - большое зеркало, которое отражает все то, что мы делаем для этой жизни и для своего окружения.\n30. Иногда надо заставлять себя делать то, чего не хочется Надо - не слово из советского союза. Надо - это про самодисциплину.\n31. Гигиена и внешний вид имеют значение Когда каждый день ты носишь чистое свежее белье о одежду, тогда чувствуешь себя увереннее. Зачастую это еще и конкурентное преимущество, если работаешь с людьми или собираешься на собес. Также есть психологический эффект. Человеку меньше поручают ответственных дел, если он не соблюдает гигиену, так как считают, что если он к гигиене безответственно относится, то что там говорить о серьезных делах.\n32. Любая аскеза полезна Отказ от привычных дел позволяет взглянуть на эти дела по-новому, переосмыслить их.\n33. Патриотизм - это действия, а не разговоры \u0026ldquo;Права или не права моя страна - это моя страна\u0026rdquo;. Тут речь не о слепом патриотизме и вере в государство, тут скорее о том, что каждый патриот должен думать, что он может дать своей стране, чтобы улучшить ее. Крик о сверхдержавах и \u0026ldquo;насвсебоятся\u0026rdquo; - это дешевый прием, нужно делать что-то полезное обществу.\n34. У всех разные идеальные картинки \u0026ldquo;Самый простой способ не разочароваться в человеке - ничего от него не ждать\u0026rdquo;. Часто бывает так, что ты стараешься для кого-то, делаешь многое, но человек этого не ценит. А ведь он и не обязан ценить, ведь не факт, что в его системе ценностей эти дела - хорошие. К тому же, он вас и не просил делать для него то самое \u0026ldquo;многое\u0026rdquo;, так что для него эта активность выглядит как навязывание себя. Нужно всегда помнить об этом и не испытывать разочарование, когда люди не оправдывают ваших ожиданий. Никто никому ничего не должен. При этом, если вы ждете что-то от человека, то просто поговорите с ним и обсудите ваши ожидания. Тогда вы оба будете честны друг перед другом и не будете питать иллюзии.\n35. Любить своих родителей - значит помнить о них Благодарность родителям заключается в проявлении внимания к ним. Высшей степенью проявления силы личности является умение подняться над любыми негативными эмоциями и ситуациями и найти то, за что вы искренне благодарны родителям. И выразить эту благодарность.\n36. Отпусти и прости Месть - дело стремное и достойно только тех, кому больше нечего делать и кто не может найти занятие поважнее, чем испортить жизнь другому человеку. Просто нужно задуматься, что даст исполненная месть тебе.\n37. Любой труд должен быть оплачен Речь идет не только о помощи знакомым и друзьям, но и о пиратстве. Если артист не будет получать свой гонорар, то он не будет замотивирован творить снова и снова. Ценится по-настоящему только то, во что ты вложил собственные деньги.\n38. Наполняй смыслом каждый момент своей жизни \u0026ldquo;Жизнь состоит всего лишь из моментов, и больше в ней ничего нет. Поэтому, если вы делаете каждый момент значимым, она вся наполняется смыслом\u0026rdquo;. Не доводите свою жизнь до фильма \u0026ldquo;День сурка\u0026rdquo;. Смакуй каждый кусочек дорогого обеда, который ты купил, впитай атмосферу места, где путешествуешь.\n39. Я живу, чтобы\u0026hellip; что? Тот, кто знает, к какой планке своего развития он идет сейчас, который видит свою следующую цель, который понимает свой новый образ будущего, будет сфокусирован на достижении этих целей и будет счастлив и на работе, и в жизни.\n Цель должна быть такой, чтобы сейчас было непонятно, как ее достигнуть. Цель должна вести к изменению образа жизни. Цель - это вызов всегда. При постановке целей нужно ориентироваться на живой пример. Нужно как можно четче представить себя достигшим цели  40. Кто закончил рождаться, начинает умирать Как только достигаешь чего-то, ты должен найти новую цель. Эта \u0026ldquo;татуировка\u0026rdquo; перекликается с предыдущей.\n41. Не бойся мечтать масштабно 42. Намерения минус действия равно ничего \u0026ldquo;Вы сможете реализовать свою стратегию только в том случае, если вложите в это свои ресурсы. Благих намерений недостаточно - у вас ничего не получится, если вы не потратите свое время, деньги и талант правильным образом\u0026rdquo;.\n43. Одинаково важно и то, что ты хочешь, и то, чего не хочешь Любую мотивацию можно усилить, когда ты не только знаешь, чего ты хочешь, но еще и знаешь, чего не хочешь. Морковка спереди - это классно, но морковка сзади мотивирует двигаться к цели гораздо больше.\n44. Оправдания убивают действия Немногие хотят видеть труд, дисциплину, бессонные ночи, жизнь по принципам, одержимость Делом и страсть. Гораздо больше людей, которые видят дар, врожденный талант, блат, харизму, вмешательство потусторонних сил и сверхъестественные способности. Зачем это людям? Чтобы ничего не делать. Как только у тебя появляется объяснение чужого успеха или своего неуспеха, можно снова сеть на диван, открыть инстраграм и ничего не делать.\nОправдания - создание собственного иллюзорного мира. Оправдания - отказ от ответственности и уход от принятия каких-либо решений.\n45. Наслаждайся каждый минутой жизни ","permalink":"https://maximgorbatyuk.github.io/blog/books/2019-09-19-45-tattoos-of-personality/","summary":"1. Никогда не говори, что ты чего-то не можешь Каждый может все, и не нужно искать оправдания, почему ты не можешь заниматься той или иной деятельностью.\n2. Нет хайпу! Да - труду и самодисциплине \u0026ldquo;Легко срубить бабла\u0026rdquo; практически невозможно, всегда нужно трудиться. Нужно любить свое дело и погружаться в него с головой, чтобы чего-то достигнуть в нем.\n3. Чем хуже, тем лучше \u0026ldquo;Что нас не убивает, делает нас сильнее\u0026rdquo;. Добиваются успеха те люди, которые не боятся трудностей.","title":"45 татуировок личности. Максим Батырев"},{"content":"  Основная характеристика - гибкость и адаптивность - позволяет реагировать на изменения в требованиях заказчика в кратчайшие сроки.\n  Планировать необходимо и полезно, но слепо следовать плану - глупо.\n  Не нужно задумываться о должностях - пусть вас знают за то, что вы делаете.\n  Сделать дело наполовину - все равно что не сделать ничего. Если работать сверхурочно, то это не значит, что успеешь больше. Слишком усердный труд приводит к усталости, которая в свою очередь приводит к браку, и его уже приходится устранять\n  Если для выполнения работы вам нужен герой, то вы делаете что-то неправильно. Героические усилия - признак ошибки при планировании.\n  Если вы не можете доверять своим людям, которых берете в дело, то вы явно берете не тех людей.\n  ","permalink":"https://maximgorbatyuk.github.io/blog/books/2019-09-19-scrum-j-sutherland/","summary":"Основная характеристика - гибкость и адаптивность - позволяет реагировать на изменения в требованиях заказчика в кратчайшие сроки.\n  Планировать необходимо и полезно, но слепо следовать плану - глупо.\n  Не нужно задумываться о должностях - пусть вас знают за то, что вы делаете.\n  Сделать дело наполовину - все равно что не сделать ничего. Если работать сверхурочно, то это не значит, что успеешь больше. Слишком усердный труд приводит к усталости, которая в свою очередь приводит к браку, и его уже приходится устранять","title":"SCRUM - революционный метод управления проектами. Джефф Сазерленд"},{"content":"Disclaimer: Данная статья — только мнение отдельно взятого разработчика о бизнес-процессах в отдельно взятой компании. Никаких неопровержимых доказательств здесь не приводят.\nЯ работаю в команде разработки раздела сайта в банке. Сайт внешний, содержит FAQ о продуктах банка. Посещаемость клиентами в стране около 587к в месяц. Хотя относительно остальных разделов сайта это небольшая цифра. Например, в разделе “Мой банк” — мобильное интернет-отделение — посещаемость гораздо выше, но точных цифр мне никто не дал. Да я и не просил. Веб-приложение работает с кучей внутренних сервисов, дизайн раздела должен строго соответствовать установленному на всем сайте. В общем, наша команда не автономна, всегда есть зависимости от других подразделений.\nРаботаем по скраму, по крайней мере пытаемся. Что-то не получается, довольно часто факапим спринты. На очередном дэйли у кого-то из команды возникла:\n А почему бы нам не переехать на канбан? Там нет спринтов, каждый берет задачи по мере освобождения, делает их так быстро, как может он. Не нужно планировать спринты, каждый подтягивает задачи себе и делает потихоньку. Крупные юзер-стори анализирует, делит на небольшие задачи, остальные могут подхватить их. После анализа озвучивает сроки продакту. Одни плюсы!\n С одной стороны, да, одни плюсы. Но что-то мне подсказывает, что мышление “мы факапим спринты — давайте откажемся от спринтов” не очень верное. Обсуждали мы этот переход в течение недели при любом удобном случае, но так и не пришли к единому мнению. В этой статье я хочу поразмышлять о том, подходит ли канбан нашей команде, есть ли у него минусы по сравнению со скрамом.\nКакова ситуация в банке Чтобы понять, почему участники команды начали высказывать мысли о переездах на новые методологии, нужно описать контекст. В течение последних пары месяцев наш отдел работал по текущим задачам без особой группировки по целям или направлениям. На нашем разделе сайта есть формы обращения клиентов, которые станут, по мнению нашего PO, заменой письменным обращениям клиентов в отделениях банка. Замысел неплохой — цифровизация-информатизация, digital и все такое.\nСразу скажу, что далее по тексту для обозначения бизнес-заказчика я буду использовать разные варианты: PO, Product Owner, продакт оунер, продакт, заказчик. Под этими названиями я имею в виду только одну определенную роль — product owner в Agile.\nОднако процесс этот нелегок. Нашему PO нужно принудить другие отделы, которые рассматривают эти обращения, изменить свои бизнес-процессы. А такова природа человека, что если боли особой нет, то и менять нечего. Например, один отдел вел свою базу данных в простом EXCEL-файле, который шарил на сетевом диске. “Доступ к базе одновременно? Зачем, мы ж можем попросить других не трогать файл, пока работаю я”. Предложили внедрить свое подобие CRM-системы — нехотя согласились, а спустя полгода разработки уже требуют новые фичи, чтобы были написаны еще вчера. В общем, процесс ввода форм на сайте затянулся. Продакт в течение спринта накидывал новые требования по блокам, полям ввода и прочим штукам, на которые юристы компании указывали.\nФактически, все разработчики работали над задачами, условия которых менялись по несколько раз в спринт. Получается, что и спринт как таковой потерял важность и стал лишь формальным триггером к тому, чтобы проводить периодические встречи скрама. Планирование мы проводили тоже формально, потому что не было смысла задавать какие-то вопросы заказчику — все равно они могут измениться в течение спринта. Скрам-покер тоже перестали проводить — зачем нам оценивать задачу сейчас, если все равно придут правки. А не брать задачу в спринт нельзя, потому что на это есть два фактора: • Заказчик хочет наконец-то внедрить эти формы в обращение, ему психологически легче, если он видит, что задача формально “в работе”;• Часть задачи все же понятна — можем потихоньку клепать верстку фронта и делать другие низкоуровневые вещи интеграции с другими внутренними сервисами.\nКак мы должны были поступить по скраму. В идеальном мире по скраму разработчики не должны брать в спринт юзер-стори, пока сам продакт оунер не знает, что нужно делать по ней. Уже не вспомнить, из какой книги или статьи я сделал такой вывод, но мне кажется, что\n если нашему Product owner’у нужно согласование от третьего лица, значит это третье лицо и есть истинный Product owner.\n Читатель может мой вывод перевернуть с ног на голову и сказать, что все несут ответственность перед СЕО компании и никакие стратегические вопросы не должны принимать без его ведома и/или согласия. Значит СЕО — продакт для всех команд. Это отчасти верно, но у СЕО может пупок развязаться от такой нагрузки. Для того СЕО и назначает ответственных за продукты и направления, делегируя им право принятия решений, если они не противоречат общей философии компании.\nНа планирование заказчик приходит с уже определенным и согласованным бизнес-видением юзер-стори (User story). Разработчики должны задавать спонтанно возникающие вопросы на планировании, а продакт — на них отвечать. Разработчики наполняют каждую юзер-стори минимальным набором требований, с которыми можно начинать работу по ним. Иначе в планировании пропадает смысл.\nПроблемы нашего скрама. Мне кажется, что все проблемы нашего скрама исходят из неверного начала спринта — планирования. Само мероприятие превращается в назначение задач людям, которые должны будут отслеживать телодвижения по задачам, если появится какая-то зависимость от третих лиц. Задачи часто переводятся автоматом в колонку “Ожидание”, а исполнитель ждет некоего триггера, чтобы начать хоть что-то делать. Параллельно, чтоб не пить кофе все 8 часов рабочего времени, в спринт берутся операционные задачи или задачи из техдолга.\nЧерез две недели видим одну из двух ситуаций:• В спринт накиданы еще задачи с бэклога, потому что разработчик закончил свою текучку до окончания спринта, а триггер по бизнесовым задачам так и не появился.• В спринте осталась куча текущих задач в колонке “Сделать”, потому что триггер по бизнесовым наступил рано. Еще хуже, если некоторые задачи остались в колонке “в ожидании”. Разработчик большую часть спринта занимался бизнесовой задачей, не начиная текучку или бросив на полпути. Ведь бизнес-задача более приоритетна, не так ли?\nСкрам не просто так призывает не назначать продакт-оунером прямого руководителя программистов. Продакт на планировании презентует юзер-стори, пытается вдохновить разработчиков, заинтересовать. Разработчики в свою очередь стремятся выяснить больше о задаче сразу на планировании, чтобы на начало спринта они понимали, с чего начать. Если бы продакт был в иерархии властвования над отделом разработки, то о какой презентации задач может идти речь? Продакт может просто сказать “надо взять, там выясните требования”, а программисты не могут не подчиниться. Идеальный “водопад”.\nНемного о канбане и его сути Канбан — это еще один фреймворк аджайла. Изначально его сформировали в производстве на заводе Toyota. Но смекалистые программисты увидели, что этот принцип можно применять и в разработке ПО. Суть канбана в том, что управляющие проектом акцентируют свое внимание на скорости завершения отдельно взятой задачи. Иначе говоря, на скорость потока задач и проходимость потока. В скраме же основное внимание обращают на производительность команды — количество реализованных задач в единицу итерации.\nКанбан — это об ограничениях. Канбан позволяет определить бутылочные горлышки процесса разработки, так как вводит ограничения на количество задач в той или иной колонке: • В “работе” не должно быть больше задач, чем количество разработчиков в отделе. • В “ожидании/код-ревью/тестировании” не должно быть больше, чем N задач, где N — утвержденное число всеми участниками процесса.\nЕсли мы видим, что на тестировании скапливается много задач, то это — повод пересмотреть правила и процессы тестирования. А разработчик не может перевести свою задачу на тестирование, пока там не появится место для нее. Что делать в данном случае? Я считаю, что пока не нанят еще один тестировщик, то сам разработчик берет другие задачи на тестирование, чтобы освободить место для своей.\nРуководители могут сказать, что это слишком дорого: час разработчика стоит дороже, чем час тестировщика, который тестирует вручную. Все верно — время разработчика стоит дорого. Но нужно платить, пока проблема медленного тестирования не решена. Получается, что необходимо либо расширять штат тестировщиков, либо внедрять системы автотестирования интерфейса. Можно придумать и другие варианты решения проблемы. Ну а канбан выполнил свою роль — он выявил проблему в цепочке поставки продукта.\nАналогично будет и с задачами в ожидании: разработчик не может перевести задачу “в ожидание”, если там нет места. А если место занято на 100%, то это повод разобраться с факторами, мешающим работе над этими задачами.\nДругой отдел не может согласовать свои требования в нашей совместной интеграции? Предлагаем свои варианты и/или пишем урезанные “туповатые” возможности этой самой интеграции, создавая задачу типа “доделать урезанную функциональность фичи А”. Ждем дизайна от ответственного подразделения? Предлагаем нашему продакту написать интерфейс, не противоречащий общему гайдлайну, пока дизайн не утвердили. Продакт не соглашается? Значит зря взяли вообще в работу, если знаем, что дизайн в этой задаче очень важен и отдход от него может стоит репутации компании. Ну а конкретный разработчик работает над внутренними делами отдела: техдолг, рефакторинг, внедрение typescript в проект. А то уже стыдно в 2к18 году только лишь jquery на фронте пользоваться. Что, что? Продакт против работы над typescript? Ну а что вы хотели, не нужно давать в работу задачи, где есть зависимость от третьих подразделений и она еще не решена.\nПочему канбан не решит наши проблемы Каждый заказчик желает знать, когда его фича будет в продакшене. И очень желает, чтобы программисты выдерживали сроки, которые называют. Короткие итерации в скраме были придуманы для того, чтобы подстегнуть разработчиков делить задачи. Небольшие задачи легче прогнозировать. И очень желательно, если прямо на планировании относительно крупная юзер-стори и будет поделена.\nКанбан не отменяет планирование, заказчик все также должен презентовать юзер-стори и их значимость для проекта, а разработчики — задавать спонтанно возникающие вопросы. Все также разработчики должны давать оценки небольшим задачам в 2–5 дней, а большие задачи — брать на анализ, чтобы понять возможность поделить на небольшие. По моему мнению, задачу не должны брать в спринт, пока ее реализация занимает больше чем 10 рабочих дней одного программиста. Если продакту она нужна “вчера”, то разработчики должны делить ее. А вдруг не все требования юзер-стори нужны сейчас, некоторые могут и потерпеть до следующего спринта? А вдруг есть возможность параллельно делать задачу? А вдруг можно наговнокодить с обязательным выпилом говнокода в следующем спринте? Есть много вариантов.\nУтверждать, что нельзя поделить задачи на небольшие, в 99% случаев неправильные — любую задачу в вебе можно поделить пополам: два человека могут работать параллельно над красотой на фронте и подкапотной логикой в бэкенде. Если разработчики не умеют делить задачи пополам, то должны учиться. Некоторые могут возразить, что деление задачи для ее параллельного выполнения накладывает дополнительные расходы: время, чтобы определить границы деления, время на мердж в мастер и все такое. Я считаю, что это небольшая плата за следующее:• Что разработчики в команде лучше будут понимать проект;• Научатся делить задачи на небольшие кусочки и сдавать их в срок;• Чаще будут общаться в отделе, что еще больше сплотит группу людей в команду.\nПланировать и выдерживать периоды планирования нужно, потому что продакт хочет понимать, когда он получит ту или иную фичу в продакшене. Можно сообщить ему, что фича А будет готова через 20 дней, фича Б — 14 дней, а фичи В-К — мелкие, что можно раскидать их за две недели.Тогда продакт оунер должен держать в голове пачку юзер-стори и примерную дату их выполнения в голове и/или в блокноте. А может прямо на доске скрама — вот же и есть тот самый список задач, которые будут накачены на бой спустя две недели.\nПроблемы сроков При скраме, если кто-то не успевает свои задачи закончить, остальные должны стремиться ему помочь. Иначе зачем на каждом дэйли нам задают вопрос “есть ли что-то такое, что мешает закончить спринт вовремя?” В канбане перестроиться на выполнение тяжелее, ведь у каждого есть своя задача в работе, которую человек обязался сдать к определенному сроку. Я думаю, что ответ очевиден, что выберет человек: помочь другому закрыть его задачу или закрыть свою в срок.\nВ скраме все понятно: команда не сделала задачи за спринт — виновата команда. Нужно теперь понять на ретроспективе, почему зафакапили спринт, сделать выводы и работать над ними. В канбане за срыв сроков отдельно взятой задачи несет ответственность её исполнитель. И если он помогал другим с их задачами, то он зафакапил свою задачу по объективной причине. Но объяснить это заказчику становится тяжелее, значит каждому придется вести себе специальный дневник и записывать туда записи типа “потратил полтора часа, чтобы помочь человеку M. закончить его задачу” и “делал ревью человеку П. в течение двух часов”. Потом же нужно будет подсчитывать все эти записи, чтобы понять, равно ли общее время штрафному, на сколько зафакапил задачу. И да поможет тебе бог, если не будет тождества между ними.\nРазработчики должны думать прежде всего о задаче, над которой они работают. Точной статистики нет, но я считаю, что программист думает 60–70% над задачей и только остальное время пишет код. Если он будет думать еще и над тем, не забыл ли он внести запись для оправданий в будущем, то о какой эффективности идет речь?\nЧто же теперь делать? Уж точно не затевать переезды на канбан, если не сумели работать по скраму. Канбан, как и скрам, не отменяет ограничения сверху, и нельзя потихоньку работать над задачей, пока заваривается чаёк. Заказчик будет давить на разработчиков, чтобы быстрее делали задачи. В скраме вся команда ответственная за набор задач, и продакту нужно давить на пятерых людей.\nФича А из примера выше занимает 20 дней? Давайте делить! Нельзя делить на планировании потому что можем не успеть поделить в течение двух часов? Пусть один из разработчиков возьмет ее на анализ на пару дней, определит способы разделения. Можем с заказчиком договориться, что поделенные задачи возьмем тут же в спринте, если вся юзер-стори срочная, а можем отложить на следующий спринт. Можем делать урезанные фичи в спринте, чтоб потом доделать в последующих.\nЯ считаю, что можно и нужно играть именно содержанием задачи, чтобы она умещалась в спринт. Увеличение сроков спринта или отказ от них вообще уж точно не решит проблему факапов спринта. Ну а если сейчас лето и период отпусков у всех, в том числе и заказчиков и людей во всех связанных интеграциями подразделениях, то давайте признаем это и просто не будем планировать большие юзер-стори на летний период, а займемся своими внутренними задачами или фиксом давно известных багов, до которых так и не доходят руки.\nP.S. Если читателю показалось, что он видит совпадения с реальными людьми и компаниями, то это — только совпадения и они случайны.\n","permalink":"https://maximgorbatyuk.github.io/blog/opinion/2019-09-19-kanban-for-development-in-bank/","summary":"Disclaimer: Данная статья — только мнение отдельно взятого разработчика о бизнес-процессах в отдельно взятой компании. Никаких неопровержимых доказательств здесь не приводят.\nЯ работаю в команде разработки раздела сайта в банке. Сайт внешний, содержит FAQ о продуктах банка. Посещаемость клиентами в стране около 587к в месяц. Хотя относительно остальных разделов сайта это небольшая цифра. Например, в разделе “Мой банк” — мобильное интернет-отделение — посещаемость гораздо выше, но точных цифр мне никто не дал.","title":"Scrum vs Kanban для разработки в банке"},{"content":"Часто во время интервью спрашивают нас о чем-то, но это ведь собеседование, значит и кандидат на позицию тоже выбирает из компаний. Необходимо задавать вопросы на собеседованиях, и чем они провокационней, тем лучше.\nВопросы Как часто проводятся груминги, дэйли и другие митинги Agile? Необходимо понаблюдать за реакцией собеседника: устало он отвечает или бодро. Вряд ли отсутствие энтузиазма в голосе будет при отличных и продуктивных митингах.\nКак часто происходят пожары? Пожар - это когда какой-то сотрудник остается в офисе допоздна и тушит его. Если пожары постоянны, то на тебя будут смотреть как на дезертира, когда ты встанешь в условные 5 часов вечера и пойдешь домой.\nКак обстоят дела с конференциями? Если ты выступаешь, то странно, когда компания заставляет тебя отрабатывать это на выходных. Ведь ты своим выступлением приносишь пользу пиаром компании. Даже если ты не будешь выступать, то все равно ответ покажет многое о компании.\nНасколько строгие дэдлайны? Нужно узнать, как часто тебя будут просить сделать задачу N за Y дней. Именно такие команды верят в миф, что тесты замедляют разработку, а вон тот \u0026ldquo;грязный\u0026rdquo; класс исправят на следующей неделе. Профессионал не нарушает принципы качественного кода, ведь его для этого и наняли - делать качественный продукт.\nКакие плюсы и минусы у вашей компании? Вопрос стоит задавать в конце собеседования. Он покажет суть компании. При вопросе о плюсах если собеседник говорит о технике и виде из окна, то это важный звонок, ведь он не вспомнил о тех самых крутых технологиях и сотне микросервисов.\nА если человек не вспоминает о минусах, то он или лжет, или ему все равно. А такое происходит тогда, когда минусы становятся чем-то обыденным. Это ведет к перегоранию.\nСтоит уточнить о переработках. Не стоит продавать свою мотивацию за коэффициент к зарплате и работе в выходные и поздние часы.\nА можете сделать код-ревью моего кода? Необходимо принести небольшую заготовку и попросить оценить. Это реальный рабочий момент, с которым ты будешь иметь дело каждый день.\nКакая будет моя первая задача? Какая она, моя первая таска? Пусть расскажут в деталях, что тебе предстоит делать в первые дни в компании. Ответ на вопрос покажет, какой есть бэклог в команде и как коллеги умеют объяснять.\nПроводите ли ретроспективу? Если говорят, что да, то попросите назвать две основные проблемы, которые поднимались прошлый раз. И какие же они действия собираются предпринять? Так ты узнаешь, какие проблемы есть в команде и что они делают с ними. Если говорят, что проблем нет, то это точно говорит об обратном.\nЗачем это мне вообще нужно? Интервьюеры обычно не ожидают вопросы подобного характера. Нужно рассказать, что ты ответственно подходишь к выбору рабочего места, что тебе важна команда, где ты будешь работать, что ты нацелен на долгосрочное сотрудничество. Ведь именно это и в интересах компании.\nЕще важно попросить показать рабочее место. Оцени мебель и технику.\nСписок более точечных вопросов.  Чем я буду заниматься? Только узкими обязанностями или еще и смежными? Какой стек на моём проекте? Есть ли легаси? Что с тестированием? Есть ли CI/CD и девопс инженер? Будет ли единый ПМ и четко заданный жизненный цикл таски? Есть ли Бизнес Аналитика? Системы мониторинга, сборщик логов? Переработки бывают? Оплата? Системы трекинга времени и руткиты на рабочем компе? Отпуска: дробление отпуска, включены или нет выходные, за сколько нужно предупреждать, отказы? За что и как часто получаются премии? Кто определяет их размер? Есть ли СБ? Какие требования у СБ? Почему открыта вакансия? Если не новая, то куда ушел предыдущий разработчик? Аналогично про гибкий график, карьерный рост. Что это значит и в чем выражается. Ретроспектива. Код ревью в компании: кто, как долго, что если пожар.  Источники  Вопросы будущему работодателю - habr.com Собеседуем работодателя, или как не уволиться в первый месяц - habr.com  ","permalink":"https://maximgorbatyuk.github.io/blog/employment/2019-09-19-questions-for-future-employer/","summary":"Часто во время интервью спрашивают нас о чем-то, но это ведь собеседование, значит и кандидат на позицию тоже выбирает из компаний. Необходимо задавать вопросы на собеседованиях, и чем они провокационней, тем лучше.\nВопросы Как часто проводятся груминги, дэйли и другие митинги Agile? Необходимо понаблюдать за реакцией собеседника: устало он отвечает или бодро. Вряд ли отсутствие энтузиазма в голосе будет при отличных и продуктивных митингах.\nКак часто происходят пожары? Пожар - это когда какой-то сотрудник остается в офисе допоздна и тушит его.","title":"Вопросы будущему работодателю"},{"content":"Источник: habr.com, но ссылку утерял, а поиск по гуглу ничего не дал\n Работа и дружба Что способствует дружеским отношениям внутри вашей команды? Большинство людей не признают, что члены их команды не близки друг другу или им не хватает командной работы. Спрашивая о том, чем связана команда, вы получите четкое представление о том, насколько все дружелюбны и сплочены. Члены одной команды посещают конференции вместе, а члены другой были друзьями еще до того, как присоединиться к компании. Возможно, вы узнаете о совместных социальных активностях и переработках.\nВо время обеда обсуждаются рабочие темы или более личные? Если ваш интервьюер не знает, как ответить на этот вопрос, спросите его/ее, предпочитают ли люди обедать за своими столами или ходят в кафе. Не стесняйтесь задавать разным людям один и тот же вопрос, чтобы вы могли нарисовать полную картину. Вопрос о разговорах во время обеда дают представление об отношениях внутри команды. В некоторых компаниях проводится четкая граница между профессиональным и личным, в то время как других этой границы нет.\nКарьерный рост По какой причине инженеры чаще всего увольняются из компании? Четкие ответы на этот вопрос дают четкую картину. «У нас нет текучки за последние 18 месяцев» или «Последние 5 человек, которые ушли, начали создавать свои собственные компании». Но чаще звучат менее четкие ответы, поскольку интервьюеры редко говорят прямо, что люди уходят из-за нездоровой рабочей атмосферы или постоянных переработок. Поэтому вам нужно будет определить, как ваш интервьюер отвечает на эти вопросы в дополнение к тому, что он на самом деле говорит. Да. Вы проводите собеседование с вашим интервьюером.\nПочему на эту должность вы ищете внешних кандидатов? (Для менеджеров или ведущих ролей) Вы должны выяснить, они не могут закрыть вакансию кем-то из членов команды. Вы можете узнать, что повышения редко практикуются в этой компании или что существует серьезный пробел в знаниях или опыте, за восстановление которого вы будете ответственны.\nНачинал ли кто-нибудь из старших инженеров работать в этой компании с позиции младшего инженера? Это особенно полезно для джуниоров. Если вы первый джуниор разработчик, то спросите, какие ожидания у команды от этой позиции и с к кому вы можете обращаться за помощью. Вы также узнаете, есть ли карьерный рост в компании. Здорово узнать, что другие младшие разработчики смогли вырасти в компании. Спросите, можете ли вы встретиться и поговорить с таким человеком, даже если это не тот человек, с которым вы будете работать напрямую.\nКаков процесс, например, перехода в другой проект или в другую команду? Хороший ответ будет включать примеры множества людей, которые сделали именно это. «Джесс просто перешла из команды разработчиков к команду инфраструктуры. Стивен начал работать инженером и теперь является менеджером проектов». Просто потому, что у компании есть установленная политика в отношении внутренней мобильности, это не означает, что она осуществляется. Узнайте, как легко попробовать разные вещи, и как устроен переход между проектами / командами на основе интереса и соответствия. Сможете ли вы сами быть инициатором для таких переходов? Как много времени это займет? Поддерживает ли компания эти изменения?\nПсихологическая обстановка Можете ли вы привести мне пример ошибки, которую вы допустили. Как она была обработана? В идеале ваш интервьюер будет честно отвечать. Если людям комфортно обсуждать большие неудачи, то это хороший знак. Это говорит о том, что компания создала безопасную среду для людей, чтобы пережить неудачу, и что эта среда открыта к рискам и экспериментам. Если люди закрыты в обсуждении неудач, это может указывать на культуру вины в компании.\nНасколько быстро реагируют люди на электронные письма / сообщения в Slack в выходные и после 6 вечера? Так вы сможете получить представление о реальных рабочих часах и о том, как члены команды общаются друг с другом. Не стоит задавать прямой вопрос о балансе работы / жизни в компании. Мало того, что некоторые интервьюеры могут интерпретировать это как нежелание работать, но так еще и наверняка дадут вам шаблонный ответ.\nБыли ли реорганизации команды и как они проходили? Затем спросите: «Что побудило реогранизацию и каковы были изменения?» Рассказы о реорганизациях позволяют узнать, как работает общий бизнес и куда он идет. Компании решаются на реструктуризацию по нескольким причинам: сбои в работе, смена клиентской базы, рост или сокращение численности персонала, контроль над менеджером или просто попытка исправить то, что не работает.\nВы полезно узнать, какие проблемы существуют, как они измеряются и насколько хорошо они рассматривают вовлеченных лиц при внесении этих изменений.\nРазработка Можете ли вы описать процесс разработки от постановки задачи до выпуска в продакшн? Здесь нет правильного или неправильного ответа. Вам нужно выяснить, разделяют ли в компании ваше видение развития. Если вы предпочитаете работать быстро и цените самостоятельность, вам вряд ли будет комфортно в команде, где 5 раз ревьюят код и перед его выпуском в продакшн ждут одобрения бизнес-команды.\nКакие инструменты вы используете для контроля версий? Хорошие команды используют хорошие инструменты. Если вы не хотите попасть в команду, которая пользуется устаревшие инструменты, то разумно спросить, какую систему контроля версий они используют.\nКак ваша команда перешла к использованию нынешнего фрейворка? Если вы просто спросите: «Почему вы решили использовать X?», то инженеры могут включить защитную реакцию. Вопросы с «почему» могут быть восприняты как атака. Поскольку вы хуже знакомы с их технологическим стеком и бизнесом, чем они, то лучше спросить, как они пришли к решению использовать те или иные технологии, рассматривали ли они другие варианты, как они оценивали компромиссы между ними? Вы узнаете, кто имеет право принимать решения, когда речь заходит о технологиях, и где компания находятся с позиции технологий.\nКомандные ценности Кто в компании для вас самый мотивирующий пример и почему? Так вы узнаете больше о том, кто здесь работает и какие качества уважают в компании. Кроме того, попросите своего/ю интервьюера пригласить члена команды, которым он гордится/вдохновляется. Если ему/ей сложно выбрать только одного человека, это хороший знак. Если вам назовут людей со всей компании, то это тоже хороший знак.\nНа каком проекте я буду работать и какие показатели будут определять успех? Каждый должен спросить о том, над чем он будет работать, как только он присоединится. Конечно, это должно быть чем-то интересным и сложным для вас, но вы также должны выяснить, есть ли четкие показатели для оценки вашей производительности. Если ваш интервьюер избегает второй половины вопроса, вы можете спросить конкретно, будете ли вы отвечать за улучшение скорости и доступности сервисов, монетизации или удержания пользователей. Вы не только получите представление о том, что вы будете делать, но также как компания управляет данными.\nКак происходит управление продуктом? Важно понять, какую роль играют инженеры в компании и будете ли вы принимать участие в разработке идей и концепций или будете делегировать такую работу, кто имеет полномочия принимать решения.\nУточняющими вопросами могут быть: Как вы распределяете обязанности сотрудников? Насколько много говорят инженеры о том, что построено и как оно построено?\n","permalink":"https://maximgorbatyuk.github.io/blog/employment/2019-09-19-questions-for-company/","summary":"Источник: habr.com, но ссылку утерял, а поиск по гуглу ничего не дал\n Работа и дружба Что способствует дружеским отношениям внутри вашей команды? Большинство людей не признают, что члены их команды не близки друг другу или им не хватает командной работы. Спрашивая о том, чем связана команда, вы получите четкое представление о том, насколько все дружелюбны и сплочены. Члены одной команды посещают конференции вместе, а члены другой были друзьями еще до того, как присоединиться к компании.","title":"Вопросы компании при собеседованиях"},{"content":"Источник: https://habr.com/ru/post/424051/\n Данная статья является конспектом книги \u0026ldquo;Чистый Код\u0026rdquo; Роберта Мартина и моим пониманием того, каким Чистый Код должен быть. Тут нет разделов о тестировании, TDD, о том какая должна быть архитектура и т.д. Здесь все только о том, каким должен быть Чистый Код. Да, возможно, тема Чистого Кода уже заезженна, но тем не менее еще не все с ним знакомы и, тем более, я не встретил аналогов контента, который содержится в моей статье.\nОбщее Нет истинного пути и решения. Есть тот, который лучше всего подходит для решения конкретной задачи. При решении задачи попытайся воспроизвести абсолютно все кейсы, которые могут затрагивать эту задачу и реализуй задачу с учетом абсолютно всех кейсов. Также при решении задачи попробуй пойти от обратного. Пойми какие результаты в итоге ты хочешь получить и составь на этом основании алгоритм, по которому будет выполняться задача.\nПеред тем, как отправить задачу в релиз — проверь правильно ли она работает. Нет ли в ней ошибок. Это касается даже тех коммитов, которые отправляются в твою ветку. Самый идеальный сценарий — тот, в котором никто не смог найти ошибки в функционале, который ты разрабатывал.\nВсегда задумывайся о том как можно сделать твой код проще, чище и читабельнее.\n Какие кейсы могут быть у задачи? Все ли я учел? Что может пойти не так? Что можно объединить? Есть ли похожий функционал? Что тут лишнее? Как сделать проще? Как сделать читабельнее? Как сделать понятнее?  Чистый Код Как писать чистый и хороший код? Это похоже на написание книги. Сначала ты делаешь черновик и потом причесываешь его до того состояния, в котором тебе было бы приятно его читать. Всегда помни, что твой код должен рассказывать историю происходящего, чтобы читатель мог ее понять.\nПод сущностью понимается — интерфейс, класс, метод, переменная, объект и т.д.\n Чистый код простой, выразительный и направлен на конкретную задачу. Чистый код читается легко, как проза. Если это не так, то его стоит рефакторить. Чистый код легко изменять. Он не должен быть жестко завязан на куче сущностей. Любую сущность можно легко изменить. Чистый код намного лучше проходит ревью. Если ревью проходит с огромным количеством комментариев, то он не чистый и его надо рефакторить. Чистый код всегда выглядит так, словно над ним очень долго трудились. Какие бы пути для его улучшения ты не искал, ты все равно придешь к тому, что этот код лучший. Соответственно, чистый код — продуманный до всех мелочей. Правило бойскаута: Оставь место стоянки чище, чем оно было до тебя. Это легко перекладывается и на программирование. Видишь грязный код? Сделай его чище, пока решаешь свою задачу. Не стоит увлекаться этим и если грязный код очень грязный, то стоит выделить отдельную задачу и время для его очистки. Не бойся делать изменений. Если ты хочешь их сделать, то значит у тебя есть на то причины, а значит ты сделаешь код лучше и чище. Тем более тесты покажут нет ли ошибок в твоем коде (при условии, что они вообще есть). Любая сущность должна отвечать за один функционал и только за него. И она должна выполнять его хорошо. Single Responsibility. Если сущность отвечает сразу за два и более действий, то её функционал нужно разделять. Код должен читаться сверху вниз. В хорошей и грамотной архитектуре внесение изменений обходится без значительных затрат и усилий. Удаляй мертвый код. Мертвый код это код, который не будет вызван ни при каких условиях или код, который нигде не используется.  Наименования и разделения  Используй понятные и удобнопроизносимые имена для любых сущностей. Они должны описывать почему эта сущность существует, что она делает и как используется. Не бойся тратить время на выбор лучшего и понятного имени. Ты выиграешь в будущем при работе или чтении этого кода. Если название сущности не соответствует еë функционалу или по названию не понятно, что сущность делает, то еë надо переименовать в самое понятное название. Если этого сделать невозможно, то значит с еë функционалом что-то не так и еë надо рефакторить. Сущность, которая имеет в названии \u0026ldquo;And\u0026rdquo;, \u0026ldquo;With\u0026rdquo; — нарушает Single Responsibility. Функционал такой сущности стоит разделять. Но этим правилом стоит иногда пренебрегать. Непонятные тексты, строки стоит выносить в переменные и давать им понятные названия. Названия методов должны содержать глагол, который описывает, что этот метод делает и ключевое слово с которым работает данный метод. Если в названии метода нет глагола, то эта сущность не должна быть методом или ему нужно дать правильное название. Нужно избегать одинаковых наименований для двух разных целей. Если сущность имеет схожее с другой сущностью название, то скорее всего их функционал очень сильно похож и их нужно объединить? Если нет, то их названия нужно менять так, чтобы они не были похожими. Если ты мысленно переименовываешь сущность, когда читаешь код, чтобы тебе было понятнее понимать её функционал, то переименуй её в это мысленное название. Выбери одно слово для одной концепции. Сложно будет понимать функционал, когда у тебя есть fetch, retrieve и get в названиях. Пусть лучше везде будет get. Длинное и понятное имя лучше, чем короткое, но непонятное.  Функции  Функции должны быть короткими и компактными. Функции должны быть очень короткими и очень компактными. Приблизительный максимум 20 строк и 150 символов в одной строке, если не влезает, то нужно разделять. Функция должна выполнять только одну операцию.  Она должна выполнять её хорошо и ничего другого она делать не должна. Если функция выполняет только те действия, которые находятся на одном уровне абстракции, то функция выполняет одну операцию. Чтобы определить выполняет ли функция более одной операции, попробуй извлечь из нее другую функцию, которая не будет являться простой переформулировкой реализации.   Любые условные операторы с длинными выборами через switch-case, if-else должны разделяться или объединяться без дублирования, возможно на классы с реализациями, а выбор реализации передать базовому классу, фабрике или еще кому-то. If, else, while и т.д. должны содержать вызов одной функции. Так будет читабельнее, понятнее и проще. Идеальное количество входных аргументов для функции = 0. Если входных аргументов больше трех, то стоит задуматься каким образом лучше от них избавиться, например, создать класс для этих аргументов. Чем больше входных аргументов, тем тяжелее понимается функция. Функция в которую передается аргумент-флаг, от которого зависит работа функции говорит о том, что функция выполняет более одной операции. Такие функции следует разбить на две и вызывать их уровнем выше. Функция, которая изменяет входной аргумент, должна отдавать ссылку на измененный объект, а не просто изменять без возврата. String transform(String text) Если функция, должна изменять входной аргумент, то пусть она изменяет состояние своего объекта-владельца. Если входной аргумент функции не должен меняться (и используется дальше в коде), то следует скопировать значение аргумента и внутри функции работать с копией. Вместо return null лучше использовать пустой объект — Collection.empty() или null-объект -EmptyObject(). Всегда старайся использовать нестатические функции. Если это невозможно, то используй статические. Если есть код, который должен следовать один за другим, то передавай результаты первой функции во вторую, чтобы кто-нибудь не изменил последовательность вызовов. Используй полиморфизм вместо if/else или switch/case или when. Избегай отрицательных условий.  Комментарии  Не используй комментарии, если ты можешь использовать функцию или переменную вместо этого. Не комментируй плохой код — перепиши его. Не стоит объяснять, что происходит в плохом коде, лучше сделать его явным и понятным. Комментарии можно использовать для передачи какой-то информации, предупреждения о последствиях, но не для объяснения того, как работает код. Используй TODO и FIXME в тех случаях, когда нужно пометить, что код нуждается в доработке, но сейчас нет ресурсов на это. Используй //region REGIONNAME //endregion REGIONNAME, а если используешь, то подумай можно ли разделить region на сущности. Документируй код, который является сложным, но чистым. Не оставляй старый закомментированный код. Ты можешь найти его в истории коммитов, если необходимо. Комментарии должны быть краткими и понятными. В комментариях с информацией не должно быть много информации. Все должно быть кратко и по делу.  Форматирование и правила  Соблюдай codestyle, принятый на проекте. Соблюдай правила, принятые в команде. При соблюдении форматирования и codestyle код будет читаться проще и лучше. Ведь не зря книгу отдают на редакцию, перед тем, как её издавать. Нужно иметь автоматические средства, которые будут форматировать код за тебя. Файл с исходным кодом должен быть как газетная статья. Есть заголовок, краткое описание в виде параметров и содержание в виде функций. Если это не так, то стоит изменить форматирование. Сущности, связанные друг с другом, должны находиться рядом, например, в одном package, чтобы было проще навигировать по коду. Переменные(поля) класса должны находиться вверху класса. Переменные методов должны находиться ближе к своему месту использования. Функции должны находиться в порядке вызова. Если одна вызывает другую, то вызывающая функция должна находиться над вызываемой. C другой стороны, приватные функции более низкого уровня могут находиться внизу файла и не мешать пониманию кода высокого уровня. Но я предпочитаю первый способ.  Объекты и структуры данных  Ты должен работать с абстракциями, чтобы реализацию можно было легко изменить. Ты должен работать с абстракциями, потому что клиент, использующий функционал, не должен знать о деталях реализации, он должен знать какую реализацию в каком случае использовать. Ты должен предоставлять API, с которым стоит работать и скрывать детали реализации, структуру. Так будет проще работать с такими сущностями и добавлять новые виды поведений, функционала и реализаций. DTO — Data Transfer Object. Класс, который содержит только данные и никакого функционала. Нужен для того, чтобы передавать какие-то данные. Объект такого класса должен быть неизменяемым.  Классы  Классы должны быть компактными. Классы должны быть еще компактнее. Имя класса должно описывать его ответственности. Отсюда можно и вычислить размер класса. Функционал класса должен четко соответствовать и вписываться в название класса. Разделяй связанность на маленькие классы. Жесткой и обильной связанности не должно быть — это усложняет поддержку и развитие проекта. Помни о Single Responsibility. Сущность должна иметь одну и только одну причину для изменения. Соблюдай инкапсуляцию. Ослабление инкапсуляции всегда должно быть последней мерой. Обычно мы объявляем переменные и вспомогательные функции приватными, но иногда их нужно объявлять protected и иметь возможность обратиться к ней из теста. Если группа функций относится к определенному функционалу, то эту группу функций можно и нужно выделить в отдельный класс и использовать его экземпляр.  Обработка ошибок  Используй Exceptions вместо возвращения кодов ошибок. Обработка ошибок — это одна операция. Если в функции есть ключевое слово try, то после блоков catch/finally ничего другого в функции быть не должно. Если у тебя есть enum, который перечисляет ошибки, то от него лучше избавиться и вместо него использовать исключения. Используй unchecked exceptions, чтобы явно указать на место в котором есть проблемы. Такие ошибки не нужно отлавливать, вместо этого нужно написать код так, чтобы этой ошибки никогда не было. Передавай достаточное количество информации вместе с выбросом исключения, чтобы потом пользователи твоего кода могли понять, что же действительно произошло. Вместо условных операторов с обработкой ошибок лучше выбрасывать исключения и обрабатывать их. Не передавай null куда-либо. Старайся этого максимально избежать. Обработка ошибок — это отдельная задача и не относится к основной логике программы.  Границы  Мы всегда используем какие-либо библиотеки, которые чаще всего дают нам слишком широкий, слишком маленький функционал или конфликтуют с ожидаемым функционалом, что делает код грязнее в его конечном использовании. Избежать этого можно просто применив паттерны типа Decorator, Adapter, Facade или другие. Бывают ситуации, когда тебе нужно работать с функционалом, который находится в разработке или пока что не адаптирован для использования в продакшен коде. В этом случае стоит представить чего ты ждешь от библиотеки/этого функционала и написать свой интерфейс или создать сущность с которыми ты будешь работать в своем проекте так, как тебе нужно. Когда библиотека доделается и станет стабильной, ты адаптируешь её под свои готовые структуры и использовать уже готовый функционал.  Послесловие В данной статье представлены лишь рекомендации к написанию Чистого Кода. Разумеется, ими можно пренебрегать. Вам лишь стоит понять, что у любого вашего решения должны быть аргументы в пользу него.\n","permalink":"https://maximgorbatyuk.github.io/blog/books/2019-09-19-clean-code/","summary":"Источник: https://habr.com/ru/post/424051/\n Данная статья является конспектом книги \u0026ldquo;Чистый Код\u0026rdquo; Роберта Мартина и моим пониманием того, каким Чистый Код должен быть. Тут нет разделов о тестировании, TDD, о том какая должна быть архитектура и т.д. Здесь все только о том, каким должен быть Чистый Код. Да, возможно, тема Чистого Кода уже заезженна, но тем не менее еще не все с ним знакомы и, тем более, я не встретил аналогов контента, который содержится в моей статье.","title":"Манифест Чистого Программиста, или краткий конспект книги «Чистый Код» Роберта Мартина"},{"content":"В целом книга очень похожа на книгу «Идеальный программист» Р. Мартина. Прослеживаются общие мысли: нужно быть заметным, заявлять о себе, не замыкаться. Ну все такое. Книга построена в виде набора советов, сгруппированных по общим тематикам.\nЧасть 1. Найди свой рынок. Твои навыки — это твой продукт. Нужно вкладывать в него: учиться новым технологиям и другим скифам, которые позволят решать проблемы работодателя.\nСовет 1. Будь впереди или погибнешь?\nЕсть множество путей вложения. Банк дает стабильный, но низкий доход. Инвестиция в стартап дает возможность вернуть кратный доход, но это рискованно. Нужно постоянно оценивать риски, а для этого «смотреть по сторонам». Технологии — это тоже инвестиции твоего времени в их изучение. Нужно внимательно смотреть на развивающиеся технологии, ведь пока на них есть высокий спрос и низкое предложение, то твоя зарплата может быть очень высокой. Нужно уметь быстро переключаться с умирающей технологии на новые, иначе останешься никому не нужный.\nСовет 2. Предложение и спрос. На наиболее востребованные сферы IT со временем быстро появляется масса дешевой рабочей силы, ведь технология популярна. Средняя оплата труда снижается, но затем повышается, т.к. появляется больше проектов на новой технологии, соответственно, нужны люди со знанием этой технологии. Таким образом рынок стабилизируется. Конкурировать в таких условиях тяжело, ведь все, что остается тебе — снижать свою цену или искать знакомства. Альтернатива: нестабильные технологии, интерес к которым может возрасти в любой момент. Соответственно и спрос, а там и оплата.\nСовет 3. Умения писать код мало. Технический специалист должен понимать бизнес, проект в котором он пишет. Одного умения программировать мало. Обычно бизнесмены хотят работать с теми, кто понимает их и способен объяснить некоторые аспекты IT. Поэтому тебе важно не только осваивать тех.матчасть, но и деловой язык. Нужно суметь рассказать о проекте и программных подходах людям из бизнеса, равно как нужно уметь понимать людей из бизнеса, чтобы делать то, что им нужно.\nСовет 4. Будь худшим. В какой бы ты группе ни был, всегда будь худшим. Окружай себя специалистами умнее себя. Тогда сам станешь подтягивать себя до их уровня. Окружающие сильно влияют на тебя, поэтому нужно выбирать свой коллектив тщательно.\nСовет 5. Инвестируй в интеллект. Мало знать профессионально только один язык/технологию. Важно изучить кардинально другой язык, чтобы понять недостатки и преимущества первого. К тому же, мало кому нужен специалист только лишь с одним направлением развития навыков. Который не сможет понять и реализовать решения, которые требуют навыков смежных технологий. Изучай другие языки, старайся написать простейшие приложения на каждом.\nСовет 6. Не слушай родителей. Родители хотят, чтобы с ребенком было все в порядке. Однако блистательные карьеры и связанные с этим риски никак не вписываются в эту стратегию. В большинстве своем их советы звучат как «обойтись без потерь», но без риска не будет и успеха. Победители рискуют, а не пытаются «прикрыть тылы». Также программисты часто меняют проекты и рабочие места, и это нормально в IT, однако может быть дикостью для старшего поколения. Построение карьеры в одной компании замедляет твое развитие как разработчика. «Разве твоя судьба до конца дней работать в компания_нейм? Нет, черт возьми!». Нужно стремиться быть «разработчиком технология_нейм», а не «разработчик в компания_нейм». В вопросах карьеры нужно идти на обдуманный риск, не позволяй страху завладеть тобой. Если не получаешь удовльствия на своей работе, то не достигнешь в ней совершенства.\nСовет 7. Будь универсалом. Многие компании строят процесс разработки как конвейер: аналитики анализируют, проектировщики проектируют, кодеры программируют. Каждый участник процесса является специалистом, но он вредил получает действительно обширный опыт разработки. Он ведь только выполняет свою часть работы, а полный цикл программы он может не понимать. Но бизнесу нужны люди, которые смогут решить проблемы. Особенно такие, которые никто не предвидел. А это нельзя сделать, не понимая всего процесса разработки. Если сервер упал, то бизнес будет рад колеру, который сумеет его поднять, не дожидаясь серверных специалистов. Нужны быть как можно более полезным в больших областях, и тогда ты не станешь первым в списке на увольнение. Универсалы встречаются редко, и поэтому их ценят. Навыки не должны ограничиваться одной платформой или стеком.\nСовет 8. Будь специалистом. Нужно понимать, как работает язык, на котором ты пишешь. Мало использовать его высокоуровневые инструкции — нужно знать, как работает компилятор, его особенности. Если не знаешь, то не сможешь учитывать их преимущество и недостатки в своем коде. Иначе ты не можешь называть себя специалистом.\nСовет 9. Не клади все свои яйца в чужую корзину. Ты пишешь на языке, изобретенным не тобой, используешь библиотеки, которые написал не ты. Не нужно стремиться стать «разработчиком .NET» или «разработчиком SharePoint». Эти технологии/языки придуманы не тобой, поэтому не ставь на них свою жизнь. В идеале нужно постараться начать свой проект и вести его, развивать и поддерживать.\nСовет 10. Полюби или уходи. Е ли хочешь достичь высот на работе, то ты должен полюбить ее. Если тебе все равно на нее, то это быстро станет заметно. Важен энтузиазм в разработке ПО. Без него очень сложно достичь успеха. Здесь я вспоминаю идею Анны Обуховой из ScrumTrek, которая говорила: «если разработчики не получили мотивации и вдохновения на задачу, то эту задачу они сделают на силе воли. А силы воли у них уже нет, они ее растратили на поездку до работы». Можно избежать посредственности, если найти работу, которая влечет. Ты просто не можешь не работать.\n Часть 2. Инвестируй в свой продукт. Когда легко получается что-то, то это в каком-т осмысляя опьяняет — ты не желаешь развиваться дальше, уделять время на оттачивание навыков. Однако необходимо преодолеть это нежелание, и тогда ты получишь отличный продукт - твой профессионализм. Чтобы твой продукт чего-то стоил, необходимо полить его кровью, потом, слезами и деньгами.\nСовет 11. Учимся ловить рыбу. Ты — разработчик. Тебе могут помогать специалисты по настройке сервера, бизнес-аналитики и другие. Но разве ты стоишь многого, если твои навыки зависят от целой группы специалистов? Прежде всего, стоит изучить инструменты, с которыми ты работаешь чаще всего. Затем платформу. А дальше — вспомогательные инструменты и бизнес-аспекты. Все знать необязательно, но ходить за заказчиком и дергать его по мелочам — не дело специалиста. Но при этом важно не забывать принцип «Не жди, пока тебе расскажут. Спрашивай сам». Нужно постоянно себя спрашивать «как и почему?». Почему и как это работает? Как IIS передает запросы страницам в контроллеры ASP.NET? Все эти вещи должны тебя интересовать.\nСовет 12. Разберись, как работает бизнес. В основе любой предпринимательской деятельности лежит бизнес. Основы финансирования. Нужно изучать основы. Ты не сможешь помогать бизнесу творчески, если не знаешь, как он устроен. Творческий подход отличает специалистов от посредственных разработчиков. Необходимо понимать, является ли твой отдел центров затрат или генерирует прибыль. Понимание финансовых стимулов компании дает возможность действовать осмысленно, а не «блуждать в темноте», принимая интуитивные решения, которые не всегда правильны.\nСовет 13. Найди наставника. Всегда должен быть тот, на кого ты будешь равняться. Это тот человек, кто внушает доверие и авторитет своими знаниями и опытом.В зависимости от другого человека нет ничего плохого, главное, чтобы это был правильный человек. Мнение наставника могут быть отрезвляющими в некоторых случаях: ты можешь считать, что ты вполне неплохо освоил что-то, однако твой наставник-профессионал покажет тебе, что на самом деле значит «знать это». Наставник может получать удовольствие от того, что кто-то интересуется его мнением, он видит, как вкладывает силы в твой успех. С другой стороны, наличие наставника способствует развитию нетворкинга: наставник в силу своего опыта знает многих и многие знают его. Это даст тебе возможность обзавестись связями, которые могут быть полезными. Более того, твой наставник может даже не знать, что он — твой наставник.\nМожно воспитать себя самого. Необходимо представить себе человека, на которого ты хочешь равняться. Образец для подражания. Нужно определить его ключевые качества и развивать их.\nСовет 14. Стань наставником. Чтобы понять, на самом ли деле ты хорошо разбираешься в теме, попробуй объяснить эту тему кому-то еще. Мы учимся, обучая. Этот процесс позволяет выявить белые пятна в собственных знаниях. Наставничество способствует развитию социальной связи, а это, в свою очередь, дает уст к совместным проектам и поиску работы. Помогать людям приятно. Помощь другим — это работа, откуда никогда не уволят и платят за нее валютой, которая никогда не обесценится с инфляцией. Необязательно изучать что-то досконально и всецело, чтобы обучать. Скорее всего, ты мог сделать что-то необычное для себя, в итоге у тебя есть опыт практический. И ты можешь им поделиться. Всегда найдутся те, кому интересно. Как правило, наставники не попадают под сокращение. Просто начинай помогать людям, а остальное получится естественным образом.\nСовет 15. Практика, практика и еще раз практика. Следует инвестировать свое время в свое ремесло. Как музыканты разыгрываются и оттачивают навыки, издавая самые ужаснейшие звуки, так и разработчики должны практиковаться без зазрения совести на качество работы. Ибо практика — не цель, а средство для достижения Скилла писать хорошо и чисто. Нужно тренироваться на пределе своих возможностей. Можно отнестись к изучению своих инструментов как к физическим упражнениям, которые нужно делать постоянно. Можно применять технику «с чистого листа»: пробуй писать программу сразу как на чистовик. Есть множество разных способов практики, но главное: чтобы писать хороший код, нужно сначала научиться писать тонны плохого.\nСовет 16. Подход к работе. Разработка ПО — это не вещь, а процесс создания некоторой вещи. Есть множество методик по организации этого процесса. Может показаться, что ты не можешь и не должен влиять на процесс, ведь ты — всего лишь разработчик/тестировщик. Но это не так. Ты — часть процесса, и вполне имеешь право влиять на него. Необходимо анализировать процесс, выявлять слабые и узкие места его, чтобы понять, как можно его улучшить. Если ты хочешь хороший процесс, то принимай участие в его внедрении или формировании. Обсуждай с другими разработчиками компании процессы и практики, формализуй их, представь своему руководству. Даже если процессы спускаются сверху, то ты вполне можешь рассказать своему руководству, как можно интерпретировать указания сверху на конкретно ваш отдел. Понимание процессов и умение объяснить их очень ценится: кодеров много, но тех, кто может организовать работу кодеров, мало. Сведения о принципах организации и бизнес-процессах пойдет тебе только в плюс.\nСовет 17. На плечах гигантов. Изучение работ мастеров является неотъемлемой частью становления нового мастера. Чтобы проникнуть в суть разработки, нужно изучать и анализировать чужой код. Чужой код не только позволяет найти ответы на конкретные вопросы, но и своеобразное увеличительное стекло, через которое ты можешь рассмотреть собственный стиль и способности. Постепенно выработается собственный стиль. Если ты практикуешь изучение чужого кода, то когда получишь какое-то новое для себя задание, ты вполне можешь вспомнить, что такое-то ПО решало схожую задачу таким-то образом. В итоге ты быстрее сможешь выполнить свою задачу. «Если я видел дальше других, то лишь потому, что стоял на плечах гигантов» — И. Ньютон.\nСовет 18. Автоматизация задач. Самый дешевый разработчик не всегда гарантирует низкие затраты на разработку ПО. Многие руководители проектов считают, что если они хотят увеличить производительность, то им нужно просто нанять больше человек. Практика показывает, что это зачастую не так. Упор стоит делать на автоматизацию. Рутинные нудные задачи часто демотивируют и отнимают полезное время у разработчиков. Чтобы устранить это, стоит уделить время на автоматизацию рутинных задач. Делаешь накаты по инструкции вручную? Запрограммируй это! А еще лучше сделай систему CI/CD.\n Часть 3. Исполнение. Ты можешь быть супер-молодцом. Ты умен и инвестируешь в правильные технологии свое время. Навыки растут, компетенции расширяются. Но теперь нужно сделать что-то действительно полезное другим. Компания, где ты работаешь, зарабатывает деньги. Твоя задача — делать что-то, что способствует этому. Ты можешь думать, что ты, например, разработчик .NET, и не такое большое значение имеет для тебя, в какой компании ты работаешь — навыки программирования на .NET от этого мало изменятся. Но то же самое можно подумать и про архитектора зданий — ведь не важно, для кого он проектирует, он так и остается архитектором. А вот и нет! Грош цена тому архитектору, который сделал неподходящее клиенту здание, не отвечающее или даже мешающее его потребностям. На одних способностях далеко не уедешь, ведь бизнесу нужны лучшие — те, кто умеет доводить дело до конца. Как только ты ощутишь огонь воодушевления, останавливаться уже не захочешь. Так давай зажжем этот огонь.\nСовет 19. Прямо сейчас. Соревнования способствуют ускорению процессов. Ты можешь неделями делать системы для клиента, но если тебе дадут возможность участие в конкурсе — сделать прототип такой же системы за два дня — ты, скорее всего, справишься. Соревновательный дух подстегивает. Если ты будешь делать задачи быстро, то ты будешь успевать их заканчивать до того, как они тебе надоедят. Всегда спрашивай себя: «а что ты моешь сделать прямо сейчас?» Создавай движение, не расслабляйся. Становись тем, кто толкает процесс вперед.\nСовет 20. Читай чужие мысли. Заказчиков радует, когда ты делаешь что-то еще до того, как они это попросят. Для этого необходимо научиться предугадывать мысли окружающих. Это не телепатия, но умение услышать из обычного разговора то, что хочет человек. Иначе говоря, слушай человека, пытайся предугадать его мысли и идеи в будущем. Заказчики оценят это. Не стоит сразу делать то, что, как тебе может показаться, они говорят в обычном обсуждении. Но стоит пытаться услышать их намерения и обсуждать с ними их. Ведь они могут даже не спросить о реализации какой-то идеи, посчитав, что это сделать-то и невозможно. Умение предугадать мысли — хороший способ заставить окружающих от тебя зависеть. А это положительно сказывается на твоей карьере.\nСовет 21. Ежедневные победы. Каждый из нас иногда превозмогает свои усилия на работе, однако спустя какое-то время просто забывает. Чет Фаулер рекомендует записывать себе в блокнот «хиты дня» — маленькие ежедневные победы. Они могут быть незначительными, однако когда их накопится достаточно, можно вернуться назад и проанализировать. Фиксация хитов поможет тебе переосмыслить ценность заданий и свое поведение. Уже нельзя будет говорить, что ты тратишь две недели на совершенствование, когда ты обязан кажд день делать что-то такое, что необходимо зафиксировать. С чего можно начать? Нужно сесть на 30 минут и выписать всё, что бы ты поменял в текущем процессе разработки. На что тратишь время, что можно было бы автоматизировать. Спустя какое-то время будет что показать на очередном пересмотре зарплат. Чем ты был полезен работодателю?\nСовет 22. Помни, на кого ты работаешь. В идеальном мире все сотрудники понимают, как компания зарабатывает деньги. Однако со своих позиций каждый может не видеть всей картины. В том числе и разработчики. Каждый должен согласовывать свои рабочие цели с целями компании, в которой он работает, однако это не всегда легко осуществить. Но зато ты можешь посмотреть, какие проблемы испытывает твой непосредственный руководитель. Ты можешь видеть проблемы своей группы. Проанализируй проблемы группы и реши их, и тогда ты решишь проблемы своего начальника. Возможно, решив проблему начальника, ты решишь проблему его начальника, и так вверх до генерального директора. Делая свою небольшую часть работы, ты делаешь вклад в прибыль фирмы. Это делает работу осмысленной. Однако не стоит думать: «не буду делать работу своего начальника, он припишет мои заслуги себе». Ну да, опосредованно припишет. Но он ведь для того и сидит на свое месте, чтобы организовать твой труд в том числе. И его успех зависит от твоего успеха. И успех твоего начальника — твой успех тоже. Начальство же и формирует тебе зарплату.\nСовет 23. Будь на своем месте. Многих раздражает сотрудник на низкой ступени, который уже метит на следующую ступень карьеры и говорит об этом постоянно при каждом удобном случае. Он использует офисные сплетни и искренне считает, что его начальство некомпетентно и он сделал бы лучше. Такие люди тщательно выбирают задачи для выполнения и считают ниже своего достоинства брать некоторые из них. Как правило, они и с теми, что выбрали, справляются не очень хорошо, ведь мысленно они уже на другой должности. Таких людей можно понять: плох тот рядовой, что не мечтает стать генералом. Ты должен идти на свою нелюбимую работу, где тебя раздражают указания твоего начальника, ведь ты считаешь, что сделал бы лучше. Ты строишь карьеру здесь и сейчас, забывая об отдыхе. Ты считаешь, что потом «заживешь», когда достигнешь желаемой должности. Но печаль в том, что «блаженства» никогда не наступит, ты всегда будешь видеть себя на должности выше.\nПарадокс в том, что нужно, как буддисты, забыть о желании преуспеть и работать здесь и сейчас над текущими задачами. Ты будешь концентрироваться на настоящей работе, а не на мыслях о будущем. Тогда ты преуспеешь, атмосфера вокруг тебя изменится в лучшую сторону. Будь там, где ты есть. Не забывай о честолюбии, но не демонстрируй его много.\nСовет 24. Великолепная задача на сегодня. Часто только в стрессовых ситуациях мы проявляемся с наилучшей стороны. Многие готовы просидеть полночи над задачей, забыв обо всем. Экстренные условия мобилизуют, они дают чувство восторга. Нужно уметь достигать этого же чувства при выполнении текущих задач, пусть даже и не очень интересных. Обычно интересно там, где разработчик может проявить свою фантазию. Соответственно, скучными задачами кажутся рутинные обязанности, которые не бросают вызов твоим способностям. Чтобы рутинные обязанности показались интересными, стоит попробовать делать их идеально. Не любишь юниттестирование — сделай пачку самых идеальных тестов, которые покрывают едва ли не 100% кода трестируемого модуля. К каждой нудной задачи подходи с мыслью, как можно сделать так, чтобы большее ее не делать вручную. Тогда такие задачи покажутся интересными.\nСовет 25. Сколько ты стоишь? Мало кто задумывается, сколько он стоит фирме, где работает, и сколько приносит денег. Для простоты рассветов ты можешь смело умножать свою зарплату на 2 — столько компания в общей массе соц.отчислений тратит на тебя. А приносишь ли ты хотя бы столько же прибыли ей? Выгодная ли ты инвестиция для своей компании? Како твой вклад в годовой доход фирмы? Пробуй думать в этом ключе и анализируй свой труд, приносит ли он деньги или сокращает ли расходы. Попробуй задать эти вопросы своему руководству, узнай, как еще ты можешь помочь компании. Один факт, что ты интересуешься этим, заставит руководство по другому взглянуть на тебя. Компания руководствуется таким понятием, как «минимальная планка уровня доходности инвестиции». Попробуй узнать ее и посчитай, являешься ли ты сам выгодной инвестицией?\nСовет 26. Камешек в ведре воды. Мало что изменится, если ты завтра положишь на стол начальнику заявление на стол. Но люди уходят постоянно, но фирмы стоят, как бы ни считали уходящие. Мысль «посмотрим, как они без такого ценного работника как я проживут» паразитная. Убери ее из своей головы. Убери камешек из ведра воды — и уровень понизится настолько, что даже и не заметишь. Другой важный совет, который дает автор: «Никогда не чувствуй себя в безопасности, всегда думай, что сегодня может быть твой последний рабочий день в этой компании». Как ты его будешь проводить с такой мыслью в голове? Собственный успех ослепляет, а мнение, что тебя могут уволить в любой момент — отрезвляет и заставлять смотреть на свой труд по-другому. Ты обдумываешь каждый свой шаг, осмотрителен и внимателен. Чем больше ты считаешь себя незаменимым, тем меньше ты таким являешься. Если ты знаешь что-то в проекте лучше всех или даже единственный такой член группы, то в самое ближайшее время задокументируй все свои знания. Такой подход руководство оценит.\nСовет 27. Возлюби поддержку. Поддержка написанного продукта может показаться многим самым скучным делом в жизни. Легаси код, плохая архитектура, вот это вот все. Техническое сопровождение в традиционном понимании мало способствует проявлению творчества. Однако это заблуждение. Ты можешь начать измерять показатели сопровождаемого тобой продукта и предлагать улучшения. Рефакторинг код модуля, пиши модульные тесты. Старайся сделать так, чтобы этот проект становился более отказоустойчивым. Заказчики оценят такой подход и могут даже начать накидывать новые задачи по расширению функционала проекта. В итоге поддержка проекта может перейти в активную фазу разработки и совершенствование продукта. Поддержка может стать платформой для того, чтобы ты проявил себя и как разработчик, и как тестировщик, и как архитектор и дизайнер даже.\nСовет 28. Восьмичасовое пламя. Работать все должны не более 40 часов в неделю. Это и практично, и закреплено законом. Роб Мартин предложил относиться к рабочему дню как к восьмичасовому пламени: человек должен работать настолько интенсивно, что он просто не сможет работать больше восьми часов. Уставший человек не может работать так же хорошо, как и отдохнувший. Поэтому задержки на работе не приводят к ощутимому приросту производительности. Если каждый день задерживаться на работе, то ценность каждого часа рабочего дня падает. Ты не чувствуешь ограничения сверху и подсознательно не подстегиваешь себя к выкладыванию на 100% в течение 8 часов. Работа обычно не дает пока, когда ее в течение дня спускают на тормозах. Она идет с тобой домой и не дает расслабиться. Но если ты интенсивно работаешь в течение 8 часов, то у тебя просто не остается сил тащить рабочие проблемы домой. Работай меньше, чтобы все успевать. И тогда она принесет тебе больше удовольствия.\nСовет 29. Научись проигрывать. Чем раньше будут выявлены ошибки, тем более качественным будет продукт. Юниттесты позволяют выявить проблемы на самых ранних стадиях. Совершать ошибки полезно, чтобы учиться на них, но ошибки должны возникать как можно раньше. Ошибка — попытка кода донести до тебя информацию. Однако это не уберегает нас от синих экранов смерти. Музыканты могут часто играть фальшивые ноты, но профессионалы учатся обыгрывать эти ситуации так, что слушатели могут даже не заметить ошибки. Так же должны вести себя и программисты. Каждый совершает ошибки, и стоит давать право на это каждому. Не суди слишком строго за оплошности, ведь важно только то, как человек исправляет свою ошибку. Нужно озвучивать проблемы как можно раньше. Если ты виноват, то так и говори, не ищи виноватых. Предлагай решение или план по поиску этого решения. Давай сроки по исправлению проблем и соблюдай их, чего бы это ни стоило. Только такой подход восстанавливает доверие. Твое поведение в ситуациях, когда обнаружены ошибка, способно весомо повлиять на уровень доверия заказчиков к тебе, как в лучшую, так и в худшую сторону.\nСовет 30. Умей говорить «Нет». Самый быстрый путь к невыполнению обязательств — непосильные обязательства. Не стоит говорить «Да» только лишь ради того, чтобы не разочаровать просящего. В том, чтобы услышать «нет», нет ничего плохого. Наоборот, многие понимают это и больше верят в будущем твоим ответам «да». Более того, в области IT мало кто нанимает людей, которые слепо исполняют требования. А если ты попал в такую компанию, то не стоит в ней задерживаться. Не стоит увлекаться отказами: исполнительность на работе в цене. Лучше всего на просьбы будет что-то вроде: «Я не обладаю достаточным опытом для этой задачи, но я с радость займусь, чтобы освоить это. По срокам сориентировать не смогу.» Такой ответ ценят больше, чем необдуманное «да».\nСовет 31. Не паникуй. Герои никогда не паникуют. Всякое в жизни может случиться, ни к чему не подготовишься на 100%. Однако те, кто может делать себя в руках и рассуждать холодно в любой ситуации, и выходят победителями. Когда паникуешь, то реагируешь на любые мелкие проблемы горячо. Это путь к извинениям в будущем и прочим необдуманным поступкам. Так уж устроен человек, что во время авралов или иных непредвиденных обстоятельств ему кажется любая входящая задача настолько важной и неотложной, что это еще более усугубляет паническое настроение. Нужно помнить об этом всегда и давать себе передышку, чтобы обдумать ситуацию на холодную голову.\nЧеловек паникует, когда теряет перспективу. Он не понимает, что происходит и что ему делать. Чет Фаулер предлагает такой способ выхода из паники: нужно представить себя на месте компьютерного чайника, который боится лишний клик на компьютере сделать. Тогда ты сможешь со стороны третьего человека посмотреть на себя, посмеяться немного и найти решение уже на более позитивной волне мышления.\nСовет 32. Скажи это, сделай это, покажи это. Планирование для большинства — не очень интересное мероприятие. Однако Чет настоятельно советует планировать, приводя в примеры стартапы и компании, которые вдохновлялись планами и достигали успеха. Чтобы преодолеть нежелание планировать свой день/неделю/месяц, нужно поощрять себя при выполнении пунктов плана. Завершил задачу — перевел торжественно ее в папку «ГОТОВО». Уже чувствуешь себя лучше. Чет дает совет планировать публично: нужно сообщать своему руководству свои планы на неделю вперед и, главное, отчитываться о любом результате реализации этих планов: и позитивные, и негативные результаты. Тогда к твоим словам со временем будут прислушиваться, тебя будут называть «человек дела».\nЕсли у тебя есть что-то, что тебе не нравится в текущих процессах на работе, то стоит о них говорить руководству. Однако просто лишь с критикой идти не стоит. Лучше всего придумать какой-нибудь план (а лучше несколько) по исправлению ситуации. Тогда рассматривающий твои претензии отнесется к ним более ответственно.\n Часть 4, Маркетинг не только для бизнесменов. Ты — самый крутой из разработчиков. Твой творческий потенциал становится источником потока элегантных решений. Твоя архитектура настолько гибкая, что приложение модернизируется в самые кратчайшие сроки.\nНу и что?\nМногие программисты заблуждаются, считая, что их супер-способности очевидны для всех. Некоторые считают демонстрацию своих способностей подхалимством. Однако Чет считают, что они опасаются, ведь в большинстве своем программисты — это ботаники. Они избегают социальных связей как можно больше. Понятное дело, что такие люди боятся критики, выставляя свои способности публично.\nКак руководство распределит рабочие силы на проекты, если не знают, кто какими квалификациями обладает? Более того, ты можешь делать самые фантастические вещи, но если об этом знаешь только ты один, то считай, что ты ничего и не делал. Ты можешь делать самый замечательный продукт на свете, но если о нем никто не знает, то его никто и не купит.\nСовет 33. Восприятие и репутация. Ты можешь долго играть в идеалиста, которому неважно, что о нем думают. Однако репутация — это реальность, тут нужно просто смириться. Есть старая мудрость: «Если дерево падает в лесу, где никого нет, производит ли оно шум?» Конечно производит, но если его некому услышать, то это совершенно не имеет значения.\nОценка деловых качеств никогда не бывает объективной. Каждый имеет свою систему норм и ценностей и оценивает исключительно со своей субъективной точки зрения остальных. Не существует объективной меры квалификации работника умственного труда. О тебе всегда будут судить, исходя из своего восприятия. Причем каждый коллега — по-своему: программист оценит твое умение писать чистый код, заказчик — коммуникативность и умение решать проблемы. Если ты не умеешь соблюдать обязательства и сроки, но при этом пишешь самый высококлассный код, то заказчик все равно будут тебя считать отвратительным специалистом. Печаль в том, что ты и правда отвратительный специалист в таком случае.\nНаша репутация имеет важное значение, и не стоит забывать о ней никогда. Она позволяет сделать карьеру и получить прибавку.\nСовет 34. Проводник в неведомое. Возможно, наиболее важным качеством, которое позволит тебе проявиться себя на работе, является способность к коммуникации. Попробуй взглянуть на себя глазами своего заказчика/начальника. Заказчик отвечает за продукт, но его реализацию вынужден доверить малоприятным типам вроде программистов. Ходят важные и слова им не скажи. Хочешь ли ты быть одним из таких? Заказчики всегда будут искать тех, кто поможет им не переживать по поводу их проекта. Неподкованные заказчики тебя побаиваются, ведь они совершенно не понимают. Ты — их проводник по суровым землям программной разработки. Ты обеспечиваешь их комфорт по неизведанным местам. Ты показываешь им достопримечательности и не пускаешь в малоприятные места этого «города». Заказчик тебе доверяет, так нужно постараться оправдать это доверие. Заказчик — это тот, кто моет помочь тебе выполнить твое задание разработать программу. Ты знаешь программирование, а заказчик — бизнес-контекст. Заказчик представляет потребности бизнеса, а тебе платят за удовлетворение этих потребностей. Не забывай об этом.\nСовет 35, Велик могучим русский языка (в оригинале, думаю, английский язык, но я не проверял). Если фирма хочет проблем с программистами, то она переводит их на другой континент и общается исключительно по электронной почте и телефону. Несмотря на то, что личное общение важно, электронная почта и прочие документы являются основным средством передачи информации и постановки задач. Так не нужно допускать орфографические ошибки в них, это выглядит глупо для взрослого человека. Но кроме этого необходимо учиться объяснять простым языком даже самые сложные вещи. Ты представляешь собой только то, что можешь объяснить. Если ты не можешь что-то объяснить на своем родном языке, то как моно ожидать от тебя чистого и простого кода?\nСовет 36. Будь рядом. У тебя есть возможность пообщаться с руководством или заказчиком? Не упускай ее. Присутствие — важная вещь. В личном общении имеют значение не только слова, но и выражение лица. Поэтому незнающим людям в IT гораздо легче вести разговор на темы разработки, если ты рядом — они по твоему лицу смогут понять, не глупость ли они говорят. При личном общении формируются тесные социальные связи. Дружба, контакты, нетворкинг. Многие решения принимаются во время деловых обедов и в неформальном общении. В письмах они лишь закрепляются. Будь на виду, не закрывайся в своем кабинете, стань неотъемлемой частью своего коллектива. Люди любят общаться с людьми в той или иной мере. Не нужно ограничиваться только лишь деловыми сообщениями и звонками. Когда будешь звонить своему коллеге в другом отделе, то не забудь поинтересоваться делами и перекинуться парой слов о возвышенном.\nСовет 37. Разговор с бизнесменом. Людям, не сведущим в информационных технологиях, малоинтересны цифры, гигагерцы, мегабайты и гигабиты. Детям пофигу на компьютерное железо, им интересно, потянет ли их компьютер новую игрушку на максималках. Так и бизнесу не интересно то, что под капотом. Им хочется, чтобы сайт работал быстро. Коммерция интересуется результатами своей деятельности и других. Поэтому демонстрировать свою работу в критериях, понятных бизнесу. Классно, что ты запилил классную архитектуру, но что именно ты сделал и зачем? Какой профит от этого? Нужно помнить, зачем ты делаешь задачи бизнеса, важно понимать их полезность.\nСовет 38. Меняй мир. Худшее, что могут спросить о тебе на работе — это «А чем он/она вообще занимается?» Это подразумевает, что люди понятия не имеют, что ты делаешь, каких результатов достигаешь. Мало кто задумывается о своих достижениях, многие просто приходят к восьми, делают задачи и уходят в пять. Они не задумываются о предназначении задач. Но чтобы быть разработчиком в странах первого мира, нужно иметь цель. Будь заметным в группе, предлагай новые идеи, пропагандируй изменения. Если видишь что-то, что коллеги делают неправильно, выноси на обсуждение, предлагай изменения. Не всем коллегам такое понравится, но не обращай внимание на них, ведь не стоит отказываться от изменений, если они могут задеть чьи-то чувства. Даже если коллеги выйдут из себя, пусть тебя утешит тот факт, что они точно никогда больше не спросят «А чем он вообще занимается?»\nСовет 39. Пусть твой голос услышат. Скучно только лишь заниматься задачами на работе. Карьера в твоей компании — это хорошо, однако нужно мыслить масштабнее. Воспринимай себя разработчиком технологична не программистом твоей фирмы. Не стремись работать в одной компании всю жизнь. Ты — творческая личность, художник. Всегда есть чем поделиться кроме твоей работы и твоих задач.\nКого бы ты нанял охотнее: программиста или программиста-автора статей и/или книг? А не круто ли нанять того, кто внес вклад в опенсорсную библиотеку, которую ты используешь в своем проекте? Подумай над этим. В компьютерной отрасли нет объективной системы рейтинга разработчиков, которая работала бы при найме на работу. Чем больше твоя социальная сеть, тем лучше для твоей карьеры. Сделай свое имя известным,. Заставь говорить о себе. Читай блоги и начни писать сам. Начни с малого — делись своим мнением о книгах, которые прочел. Отрабатывай навыки письменной речи. Дальше — доклады на презентациях. Начинай раньше, чем почувствуешь себя готовым к этому.\nСовет 40. Раскрути свой бренд. Раскрутка бренда состоит из двух частей: создания собственной узнаваемой марки и действий, направленных на формирование положительных ассоциаций с твоим именем. Признание и уважение. Твое имя — это твой бренд. Береги его и не порти необдуманными постами или иным поведением. Гугл не забывает ничего.\nСовет 41. Публикуй свой код. Открытый исходный код. Это даст возможность сказать когда-нибудь «Вы используете \u0026lt;библиотека_нейм\u0026gt;? Так пару моих пулреквестов туда заапрувили!» Вредил собеседование закончится фразой «мы вам перезвоним». Опенсорс развивается, и отличным шансом проявить себя будет участие в развитии его. Открытый код — это реклама себя. Много кто использует Rails, но мало кто может похвастаться своим вкладом в его развитие. А руководство проектом с открытым кодом — так вообще огромный плюс при собеседованиях. Если человек успевает все это делать в свое свободное время, то значит это специалист с большой буквы и широкого круга компетенций.\nСовет 42. Незаурядность. Традиционный комплекс маркетинга состоит из четырех P: Продукт, Цена (price), Продвижение (Promotion) и Распространение (Placement). Цель маркетинга — создать связь между потребителем и производителем. В последнее время все больше обращают внимание на вирулентный маркетинг — когда о товаре говорят в непринужденном общении. Такой маркетинг выгоден: люди охотнее верят своим друзьям, чем рекламе по радио. Сейчас, говорит Чет Фаулер, можно выделиться только если ты незауряден. О тебе должны говорить еще до того, как спросят. Надо быть самым умным и/или быстрым, нужно действовать. Выделяйся на фоне остальных: напиши книгу, генератор кода, который вынужден часто писать и т.д. Будь личностью и делай вещи, о которых не смогут не говорить.\nСовет 43. Заводи знакомства. Не бойся заводить знакомства с более опытными людьми, тем более с теми, кем восхищаешься. Люди в большинстве своем не поскупятся на общение с теми, кто ими восхищается, такова уж природа человека. Поделиться знаниями или советом? Да легко. Между нами и профессионалами стоит только страх. Общение с умными и опытными людьми дает возможность новых перспектив, ведь рекомендация от таких людей многого стоит.\n Часть 5. Сохраняя конкурентные преимущества. Многие звезды эстрады блистают в течение некоторого времени. Они примеряют образ, который вписывается именно в эту эпоху. Однако время идет, и если человек не меняется, то он просто «устаревает\u0026quot;. Он уже не делает рейтинги на ТВ, не собирает такие большие залы. С карьерой программиста может случиться то же самое. Не будь человеком, который лрбился успеха только один раз и на недолгое время.\nСовет 44. Ты уже устарел. В IT всегда есть что-то новое. И это новое нужно изучать. Это прекрасно, но и грустно одновременно. Твои знания уже устарели, как только ты их получил. Те, кто добивается успеха, начинает почивать на лаврах, у него замасливается глаз на новинки. Ты должен учить не только основы, но и быть в курсе трендов разработки и технологий. Успех порождает гордыню и самоуспокоенности. Начинай заранее изучать новинки, не останавливайся на тех популярных технологиях, которые сейчас у каждого на слуху. Иначе, когда эта самая технология устареет, устареешь и ты, а возраст уже будет не тот, чтобы быстро осваивать новые знания. Иди на риск, и в случае успеха ты останешься на передовой еще на некоторое время.\nСовет 45. Ты уже безработный. Работа, куда тебя наняли, уже не существует. И это несмотря на то, что ты получаешь зарплату и заказчики тобой довольны. Мир меняется, только в этом можно быть уверенным. Предприятия постоянно ищут способы адаптации.Перестань считать себя программистом. Цепляющийся за свою профессию человек создает опасный диссонанс, влияющий на его работу. Держи нос по ветру и помни, что если ты постоянно метишься в движущуюся цель, то ты никогда в нее не попадешь. Расширяй свои компетенции, ищи новые сферы, где сможешь проявить себя.\nСовет 46. Дорога в никуда. Концентрация только лишь на результате — это бич нашего общества. Стоит задуматься, ведь мы практически все время делаем что-то, а результата достигаем лишь ненадолго. Так может стоит сместить фокус? То же самое и с карьерой. Реальный смысл карьеры не в том, чтобы достичь какого-то состояния. Сам путь к цели имеет не меньшее значение. Концентрируйся на том, что делаешь, а не на том, что должно быть сделано. В разработке думай, как ты пишешь код. Если будешь концентрироваться на результате, то осознанно или не очень будешь корректировать рабочий процесс, и отнюдь не в лучшую сторону.\nСовет 47. Составь план. Помни, что если ты не меняешь свою остановку и свои процессы, то ты практически стоишь на месте. Обозначь себе ориентиры в будущем. Предлагай изменения заказчикам и руководителям, выявляй проблемы и составляй планы. Не будь специалистом одного направления, изучай смежные вещи. Однако составь план и определи, кем ты хочешь стать. Иначе ты можешь начать изучать совершенно несвязанные вещи между собой, и тогда твое резюме не будет единым целым.\nСовет 48. Отслеживай состояние рынка. Глупо тратить деньги на акции, цена которых постоянно меняется, и забыть об этом. Даже если ты осознанно выбрал область для инвестиций, это не значит, что можно успокоиться, ведь рынок нестабилен. Не обращаешь внимание на меняющиеся условия рынка — теряешь деньги, которые мог бы заработать. С инвестициями в знания ситуация та же самая.Будучи полностью довольным текущим своим состоянием, ты моешь упустить приход Новой Великой Вещи. Держи глаза и уши открытыми, следи за новостями и теми гиками, которые и формируют тренды в IT.\nСовет 49. Этот толстяк в зеркале. Когда человек теряет или набирает вес, он может этого долго не замечать, ведь он видит себя каждый день. Только тогда, когда одежда становится большой/тесной, тогда и замечаешь. С твоей карьерой происходит то же самое. В один день ты можешь начать ощущать дискомфорт, что твоя работа тебе не подходит, что пришло время расти. Шкалы оценки конкурентоспособности нет, ты не сможешь понять объективно, растешь ты дальше или проседаешь. Посему нужно разрабатывать собственную шкалу. Важен также взгляд со стороны. Ищи себе наставника или доверенное лицо. Интересуйся мнением других о себе, они могут подсказать, где стоит улучшиться и подтянуть себя. Если на работе твоей используют метод оценки «360» — используй его и извлекай выгоду. Фиксируй результаты. Делай часто ретроспективу своей карьеры.\nСовет 50. Ловушка для обезьян. Есть байка о том, что в Индии придумали интересную ловушку для обезьян. В ямку с узким глубоким проходом насыпали вкусняшки для обезьян. Ямка была размером с кулак обезьяны, а вот через проход он не проходил. Обезьяны хватали вкусности в ямке, но вытащить зажатую руку не могли. Глупой обезьяне стоит только разжать кулак, однако ее жажда зацепиться за еду пересиливает инстинкт самосохранения. В итоге смерть наступает раньше, чем до нее дойдет способ освободиться от ловушки. Ригидность ценности — это когда ты настолько уверен в ценности какой-то вещи, что ты не в состоянии подвергнуть ее сомнению. Сила же относится и религия.\nЛегко зациклиться на технологии, которая тебе нравится, что иногда это может стать поводом для шуток и недовольства на работе. Твоя технология устаревает, помни об этом. И когда у тебя появится шанс вступить в холивар, вспомни о ловушке для обезьян.\nСовет 51. Избегай каскадного планирования карьеры. В 2001 году придумали манифест гибкой разработки ПО. Ватерфолл приводил часто к тому, что разрабатываемый продукт в течение месяцев и лет становился никому не нужным, но вот гибкий подход позволил пересмотреть этот процесс в сторону постоянных ретроспектив и переоценки планов. Твоя карьера — это почти самое важное в твоей жизни, так будешь ли ты строить ее на основе ватерфолла со всеми его недостатками? Проводи переоценку ценностей, оглядывайся назад и решай, изменились ли твои приоритеты и цели. Если да, то не стоит об этом беспокоиться, ведь ты «повзрослел» и набрался мудрости. Карьерные изменения — это не строительство небоскреба: когда ты понимаешь, что двигаешься не туда, это не означает, что нудно выбрасывать весь накопленный опыт. Он тебе поможет, будь уверен.\nВ конечном счете нам всем нужен довольный заказчик, а не выполнение требований. И в планировании карьеры ты сам и есть заказчик.\nСовет 52. Лучше, чем вчера. Мы совершаем ошибки. Главное — умение их решать. Чем больше ошибок, тем сильнее ты фокусируешься на их решении, а не на их причине. Это можно наблюдать в большинстве областей жизни человека. Чтобы не погрязнуть в рутине, стоит каждый день себя спрашивать: «сегодня было лучше, чем вчера?» Если отвечаешь «да», означит двигаешься в нужную сторону. Копаешься в легаси-коде? Не бойся менять по чуть-чуть этот код, улучшай его постоянно, и тогда спустя время ты увидишь заметные улучшения. Получение быстрого результата, пусть и незначительного, мотивирует. Улучшения должны быть пусть и небольшими, но ежедневными. Разбивай большие задачи на маленькие этапы и закрывай их каждый день.\nСовет 53. Стань независимым. Работа в большой корпорации выгодна тем, кто иногда ленится. Тяжело винить себя за провалы, ведь ответственность размазывается по очень большому числу людей. Корпорация подходит тем, кто хочет быть «не как все» так же, как кондитерская тому, кто хочет похудеть. Будь независимым, и тогда некого будет винить в случае провала. Как минимум отнесись к своей работе именно так. Фрилансеры — это те, кто независим настолько, насколько возможно. Они продают свои услуги и не подконтрольны бюрократии, навязанной сверху. Это тяжелый путь, однако может быть прибыльным.\nПопробуй себя в роли фрилансера, удели несколько выходных и вечером, чтобы закрыть какой-нибудь проект. Будь любознательным и Лене засиживайся на одном комфортном месте.\n","permalink":"https://maximgorbatyuk.github.io/blog/books/2019-09-19-fanatic-programmer/","summary":"В целом книга очень похожа на книгу «Идеальный программист» Р. Мартина. Прослеживаются общие мысли: нужно быть заметным, заявлять о себе, не замыкаться. Ну все такое. Книга построена в виде набора советов, сгруппированных по общим тематикам.\nЧасть 1. Найди свой рынок. Твои навыки — это твой продукт. Нужно вкладывать в него: учиться новым технологиям и другим скифам, которые позволят решать проблемы работодателя.\nСовет 1. Будь впереди или погибнешь?\nЕсть множество путей вложения.","title":"Программист-фанатик. Чед Фаулер"},{"content":"Database  Интерактивный учебник по SQL Нормализация отношений. Шесть нормальных форм - habr.com Руководство по проектированию реляционных баз данных (14-15 часть из 15) SQL Joins Explained SQL Server Stored Procedures What is parameterized query? - SO answer   Multilayered architecture  What is N-Tier Architecture ASP.NET N-Layered Applications N-Tier Architecture. ASP.NET Example GRASP паттерны проектирования   ASP.NET MVC, Web api  Документация по ASP.NET ASP.NET MVC. Урок 0. Вступление Изучаем ASP.NET MVC 5 - professorweb.ru ASP.NET MVC Tutorial Построение RESTful Message Based веб-сервисов на WCF WCF RESTful Service REST vs SOAP. Часть 1. Почувствуйте разницу SOAP vs REST vs JSON comparison [2019]   Must have  GIT - https://try.github.io/ Unit-test – XUnit, MS Unit, NUnit - docs.microsoft and stackify.com Fake it easy MOQ Code style ReSharper VS Extensions MVC life cycle - docs.microsoft.com  ","permalink":"https://maximgorbatyuk.github.io/blog/development/2019-09-15-usefull-links-for-developers/","summary":"Database  Интерактивный учебник по SQL Нормализация отношений. Шесть нормальных форм - habr.com Руководство по проектированию реляционных баз данных (14-15 часть из 15) SQL Joins Explained SQL Server Stored Procedures What is parameterized query? - SO answer   Multilayered architecture  What is N-Tier Architecture ASP.NET N-Layered Applications N-Tier Architecture. ASP.NET Example GRASP паттерны проектирования   ASP.NET MVC, Web api  Документация по ASP.NET ASP.NET MVC. Урок 0. Вступление Изучаем ASP.","title":"Useful links for developers [2019]"},{"content":"Установка Прежде всего нужно следовать инструкции по установке на официальном сайте. Инструкция потребует от юзера установить Linux-подсистему, и уже в ней поставить ruby и jekyll.\nГемы (gem) я ставил через sudo, потому что без супер-юзера установка ругалась на отсутствие прав на запись в определенные директории. Надеюсь, что разрабы jekyll не подложили мне \u0026ldquo;свинью\u0026rdquo;, и супер-права им я давал не во вред себе.\nЗапуск Запуск сайта нужно осуществлять не с помощью стандартной для MacOs команды jekyll serve, а с помощью bundle exec jekyll serve. Да и вообще советуют именно через bundle exec \u0026lt;command\u0026gt; запускать команды.\n","permalink":"https://maximgorbatyuk.github.io/blog/technologies/2019-09-15-how-to-develop-with-jekyll-on-windows/","summary":"Установка Прежде всего нужно следовать инструкции по установке на официальном сайте. Инструкция потребует от юзера установить Linux-подсистему, и уже в ней поставить ruby и jekyll.\nГемы (gem) я ставил через sudo, потому что без супер-юзера установка ругалась на отсутствие прав на запись в определенные директории. Надеюсь, что разрабы jekyll не подложили мне \u0026ldquo;свинью\u0026rdquo;, и супер-права им я давал не во вред себе.\nЗапуск Запуск сайта нужно осуществлять не с помощью стандартной для MacOs команды jekyll serve, а с помощью bundle exec jekyll serve.","title":"Как разрабатывать сайт на jekyll на Windows 10"},{"content":"Источник: записи из моего блокнота. Возможно, на лекциях MBA рассказывали, а может и записал откуда-то.\n Руководитель - человек, распоряжающийся людскими ресурсами. Менеджер - работний, от принимаемых решений которого зависит в той или иной степени прибыль компании.\nПринципы восточного менеджмента 1. Все законы войны распространияются и на искусство ведения бизнеса Успех может ослепить менеджера, а поражение - заставить его думать, что виновы все и вся, но только не он.\n2. Если ты силен, то покажи слабость; если ты слаб - покажи силу. Если ты близко, то покажи, что ты далеко; если ты далеко - покажи, что близко. Действия и обстоятельства внутри фирмы должны быть скрыты от конкурентов, но при этом они должны думать, что все про нас знают.\n3. Приоритет самоанализу. Объективная оценка себя и конкурентов. Есои не уверены в качестве работы сотрудников, то нужно с этим что-то делать.\n4. Любой бизнес должен постоянно развиваться. Если недостаточно ресурсов, то можно перейти к обороне, но ненадолго.\n5. Не следует жестко противостоять трудностям. Можно временно \u0026ldquo;прогнуться\u0026rdquo;, чтобы набрать силы и скинуть груз. Не страшно отступить, страшно не продолжать борьбу.\n6. Не стоит бросаться на проблему в лоб. Нужно исследовать вопрос на наличие слабых мест. Не трать все силы на атаку в лоб.\n7. Ученость и умствование есть причина смуты в государстве. Мудрый правитель держит желудки рабочих сытыми, а головы - пустыми.\n8. В любой фирме должны быть передовики. На передовиках строится костяк фирмы. Факт принадлежности к такой группе дает работнику мотивации продолжать в том же темпе.\n","permalink":"https://maximgorbatyuk.github.io/blog/management/2019-09-08-eastern-management/","summary":"Источник: записи из моего блокнота. Возможно, на лекциях MBA рассказывали, а может и записал откуда-то.\n Руководитель - человек, распоряжающийся людскими ресурсами. Менеджер - работний, от принимаемых решений которого зависит в той или иной степени прибыль компании.\nПринципы восточного менеджмента 1. Все законы войны распространияются и на искусство ведения бизнеса Успех может ослепить менеджера, а поражение - заставить его думать, что виновы все и вся, но только не он.\n2. Если ты силен, то покажи слабость; если ты слаб - покажи силу.","title":"Восточный менеджмент"},{"content":"Оригинал\n Спринты вместо больших планов  Вместо планов на 20 лет вперед планируйте спринтами — ставьте 3 цели на 9 недель Убедитесь, что поставленных целей действительно стоит добиваться В конце 9-недельного спринта оцените результаты и наградите себя  Продуктивный день  Все входящие задачи сразу «выгружайте» из памяти в список дел Научитесь говорить «нет» второстепенным делам. Освобождайте время, силы и внимание для главного Посвятите первые три часа рабочего времени приоритетным задачам Помните, многозадачность приводит к потерям времени и качества работы Заранее планируйте качественный отдых В конце недели подводите итоги, определяйте приоритеты и планируйте следующую неделю  Борьба с прокрастинацией  Займитесь подготовкой к первому шагу, чтобы его было просто сделать Объедините полезные действия с чем-то, что приносит вам удовольствие Тренируйте фокус и внимание с помощью медитации, начните с трех вдохов и выдохов Накачивайте силу воли как мышцу. Каждое действие через не хочу — способ стать сильнее Возьмите на себя публичные обязательства Научитесь говорить «нет» сиюминутному «хочу» Не тратьте силу воли впустую. Берегите ее для важных решений Создайте продуктивное пространство, в котором легче делать правильный выбор  Привычки  Помните, любое повторяющееся действие приводит к перестройке нейронных связей и формирует наш мозг Вместо искоренения плохих привычек и создания с нуля новых попробуйте заменить одни другими Начните с простейших привычек, чтобы при всем желании было сложно придумать отмазку Определите четкие правила для каждой новой привычки Собирайте привычки в цепочки — утренние и вечерние ритуалы Отслеживайте прогресс и не забывайте праздновать достижения  Отдых и сон  Помните, цели и планы бесполезны, если у вас нет запаса сил на их реализацию Заботьтесь не только о длительности сна, но и его качестве Установите регулярный режим сна, одинаковый в выходные и будни Избегайте яркого света и светящихся экранов перед сном Создайте оптимальное пространство в спальне: полная темнота, тишина и прохлада Откажитесь от быстрых углеводов на ужин и кофе/чая после 14:00 Старайтесь вздремнуть 25–30 минут в обеденное время  Питание  Помните, калории мало о чем говорят, и считать их нет смысла Избегайте быстрых углеводов. Они влияют не только на талию и иммунитет, но и на продуктивность Замените сахар эритритом или стевией, пшеничную муку — миндальной Практикуйте интервальное голодание по 16 часов в день, чтобы организм занялся «клеточной уборкой» Не забывайте пить много чистой негазированной воды. Выпивайте стаканчик первым делом с утра!  Эмоции  Не игнорируйте свои эмоции. Эмоциональные травмы без лечения отнимают энергию Ведите дневник по утрам. Достаточно двух страниц от руки о чем угодно Перед тем как сокрушаться о проблеме, подумайте, будет ли она что-то значить через три года. Если нет — она того не стоит Приучайте себя видеть хорошее. Каждый вечер записывайте, чего вы добились и кому благодарны сегодня Научитесь жить вне телефонного кокона, наедине с собой и своими мыслями Избавьтесь от токсичного окружения, которое тянет вас в болото Прекратите читать новости. Они быстро разряжают вашу «батареечку» и не приносят никакой пользы Разберите по косточкам свои страхи, и они окажутся гораздо менее жуткими Помните, реагировать или не реагировать на негатив — это всегда ваш выбор Проговаривайте эмоции  ","permalink":"https://maximgorbatyuk.github.io/blog/books/2019-09-08-book-just-space/","summary":"Оригинал\n Спринты вместо больших планов  Вместо планов на 20 лет вперед планируйте спринтами — ставьте 3 цели на 9 недель Убедитесь, что поставленных целей действительно стоит добиваться В конце 9-недельного спринта оцените результаты и наградите себя  Продуктивный день  Все входящие задачи сразу «выгружайте» из памяти в список дел Научитесь говорить «нет» второстепенным делам. Освобождайте время, силы и внимание для главного Посвятите первые три часа рабочего времени приоритетным задачам Помните, многозадачность приводит к потерям времени и качества работы Заранее планируйте качественный отдых В конце недели подводите итоги, определяйте приоритеты и планируйте следующую неделю  Борьба с прокрастинацией  Займитесь подготовкой к первому шагу, чтобы его было просто сделать Объедините полезные действия с чем-то, что приносит вам удовольствие Тренируйте фокус и внимание с помощью медитации, начните с трех вдохов и выдохов Накачивайте силу воли как мышцу.","title":"Выжимка книги \"Просто космос\""},{"content":"Источник конспекта: Статья на Манн-Иванов-Федоров\n1. Взаимное недоверие Доверие — это фундамент любых отношений. Именно на доверии строится уверенность в том, что каждый участник команды руководствуется одними и теми же принципами. Это создаёт благоприятную атмосферу, в которой можно и нужно творить.\nИ только тогда, когда участники команды не боятся показаться слабыми и когда им не нужно скрывать свои недостатки и стесняться просьб о помощи, можно говорить о доверии. Именно в таких условиях сотрудники могут сконцентрироваться на профессиональной деятельности и не тратить свою энергию на интриги и сплетни.\nУпражнение на закрепление доверия.\nСамый простой способ сделать первый шаг к построению доверительных отношений внутри команды — это дать шанс каждому из её участников немного рассказать о себе. Соберитесь командой и позвольте сотрудникам поделиться своей историей.\nЭто может быть рассказ о хобби, история из личной жизни, подробности о детстве, первом месте работы… Благодаря таким историям люди узнают друг друга с новой стороны и начинают видеть вокруг себя союзников, а не конкурентов. Как правило, после таких собраний члены команды по-другому оценивают действия и поведение других.\n2. Уход от конфликтов В любых отношениях есть место конструктивному конфликту, благодаря которому эти отношения получают развитие и переходят на новый уровень. Однако во многих компаниях конфликт считается недопустимым, из-за чего рядовые сотрудники и руководители стараются избежать открытых обсуждений той или иной проблемы.\nВ результате атмосфера в команде накаляется, работники начинают действовать за спинами друг у друга и создавать интриги. Дух команды ослабевает.\nУпражнение для правильной работы с конфликтами Попробуйте сыграть в следующую игру-упражнение. Ваша команда должна выбрать одного человека «подрывника», который будет сообщать о скрытых разногласиях в вашем коллективе и призывать всех к обсуждению.\nЭто простое решение поможет вашей команде выработать привычку правильно работать с конфликтами, а следственно — находить новые решения и избегать проблем в будущем.\n3. Необязательность Ещё один порок команды — это необязательность. Как правило, этот порок проявляет себя, когда после собрания участники коллектива по-разному воспринимают полученную информацию и следуют разным целям или, что случаются чаще, вовсе не предпринимают никаких действий.\nТакже необязательность раскрывается, когда не все работники согласны с полученными в ходе обсуждения выводами, и саботируют работу и идеи своих коллег.\nУпражнения для борьбы с необязательностью Самый простой способ разобраться с необязательностью — выделить несколько минут в конце каждого совещания и предложить всей команде сформулировать итоги встречи. Коллектив должен подготовить и обсудить список задач, уточнить детали по реализации плана и приступить к его выполнению.\n4. Отсутствие требовательности к другим К сожалению, во многих командах отсутствует такое понятие, как требовательность к другим участникам. А ведь именно требовательность помогает добиваться внушительных результатов и исключить действия, которые наносят урон компании.\nА когда в команде не поощряется требовательность, то коллеги стесняются указать другим на их недочёты, из-за чего падает общий уровень качества организации. Такой подход ведёт к угасанию энергии команды.\nУпражнение для повышения требовательности в команде Один из наиболее радикальных и в то же время эффективных способов — отказ от вознаграждения за личные заслуги внутри команды. Вместо этого руководитель должен поощрять командные достижение. Благодаря этим действиям в коллективе постепенно появится культура взаимной требовательности, когда сотрудникам будет невыгодно просто наблюдать за низкой эффективностью кого-то из коллег, так как это лишит вознаграждения весь коллектив.\n5. Безразличие к общему результату Зачастую работники ставят личные цели выше командных. В этом случае сотрудники могут отлично справляться со своей работой и ладить с другими людьми, однако общий результат, который стремиться достигнуть команда, их почти не интересует.\nСнимок экрана 2016-07-07 в 21.23.10\nУчастники такого коллектива считают, что самое главное — это выполнить свою работу. Однако как мы прекрасно знаем, общие цели команды помогают добиваться ещё более внушительных результатов. Поэтому очень важно, чтобы в гонке за успехом участвовали все.\nУпражнение на преодоление безразличия к общему результату Эффективный способ победить безразличие — проинформировать всех о желаемых результатах. Как только вы сообщили всем, в том числе и конкурентам, о своём будущем успехе, вы устанавливаете дополнительную мотивацию для эффективной работы. И команды, которые внятно формулируют свою цель, автоматически повышают свои шансы на успех.\n","permalink":"https://maximgorbatyuk.github.io/blog/books/2019-09-08-5-vices-of-team/","summary":"Источник конспекта: Статья на Манн-Иванов-Федоров\n1. Взаимное недоверие Доверие — это фундамент любых отношений. Именно на доверии строится уверенность в том, что каждый участник команды руководствуется одними и теми же принципами. Это создаёт благоприятную атмосферу, в которой можно и нужно творить.\nИ только тогда, когда участники команды не боятся показаться слабыми и когда им не нужно скрывать свои недостатки и стесняться просьб о помощи, можно говорить о доверии. Именно в таких условиях сотрудники могут сконцентрироваться на профессиональной деятельности и не тратить свою энергию на интриги и сплетни.","title":"Книга \"5 пороков команды\""},{"content":"Situation Попроси рассказать кандидата о ситуации. Контекст, предпосылки и т.д.\nTask / Trouble Какую проблему увидел кандидат в ситуации, почему охарактеризовал ее проблемой.\nActions Какие действия он предпринял для решения проблемы. Почему именно такие. Нужно задавать больше вопросов с How, Why, Who, которые побуждают к рассказу.\nResults / Roadblocks Каких результатов кандидат достиг своими действиями.\nSelf-apprisal Как оцениает кандидат свои действия и результаты.Какие выводы он делает из сложившегося кейса. Что бы кандидат сделал сегодня иначе, если бы сделал.\nПримечания  нельзя задавать закрытые вопросы, на которые можно ответить только Да/Нет Избегай вопросов типа \u0026ldquo;Повел бы себя в той ситуации \u0026lt;описание поведения\u0026gt;\u0026hellip;?\u0026rdquo; или \u0026ldquo;У тебя хороший тайм-менеджмент?\u0026rdquo; Не спрашивай терминологию - в ответ получишь выжимки из википедии Задавай открытые вопросы и приводи примеры Попроси рассказать о reverse-enginering навыках  ","permalink":"https://maximgorbatyuk.github.io/blog/management/2019-09-08-starts-schema-interview/","summary":"Situation Попроси рассказать кандидата о ситуации. Контекст, предпосылки и т.д.\nTask / Trouble Какую проблему увидел кандидат в ситуации, почему охарактеризовал ее проблемой.\nActions Какие действия он предпринял для решения проблемы. Почему именно такие. Нужно задавать больше вопросов с How, Why, Who, которые побуждают к рассказу.\nResults / Roadblocks Каких результатов кандидат достиг своими действиями.\nSelf-apprisal Как оцениает кандидат свои действия и результаты.Какие выводы он делает из сложившегося кейса. Что бы кандидат сделал сегодня иначе, если бы сделал.","title":"Модель S.T.A.R.S. для оценки Soft-Skills"},{"content":"Из википелии:\n Тест Тьюринга — эмпирический тест, идея которого была предложена Аланом Тьюрингом в статье «Вычислительные машины и разум» (англ. Computing Machinery and Intelligence), опубликованной в 1950 году в философском журнале «Mind». Тьюринг задался целью определить, может ли машина мыслить.Стандартное звучание закона: «Если компьютер может работать так, что человек не в состоянии определить, с кем он общается — с другим человеком или с машиной, — считается, что он прошел тест Тьюринга»\n Цель теста Тьюринга - определить, может ли машина имитировать поведение человека настолько, что сам человек не поймет, машина перед ним или живой человек.\nЕсть прецедент, когда чат-бот смог пройти этот тест: в 2014 году разработали чат-бот, который \u0026ldquo;научился\u0026rdquo; диалогу на основе твиттер-сообщений. Испытуемые люди в большинстве своем поверили, что перед ними 13-летний подросток, а не машина.\nЗабавно, что тест Тьюринга, фактически, определяет, может ли машина выглядеть как человек, имитировать его поведение через разговор/диалог.\nПри этом Тьюринг был геем, и в 1953 году был осужден за мужеложество. В те времена в Британии гомосексуализм был законодательно запрещен. Тьюринг попал в неприятную ситуацию с юношей-вором, и в итоге вынужден был сознаться в полиции в своей ориентации. Вместо тюрьмы он выбрал химическую кастрацию, и год спустя его тело было найдено с отравлением цианидом. Был ли это суицид - достоверно неизвестно, ибо не нашли посмертной записки или чего-то подобного.\nЭто значит, что Тьюринг был вынужден скрывать свою гомосексуальность и вести себя на публике так, чтобы его приняли за гетеросексуального мужчину. А компьютер, по его тесту, должен был вести себя так, чтобы его приняли за человека. Довольно интересное совпадение.\n","permalink":"https://maximgorbatyuk.github.io/blog/opinion/2019-09-08-thoughts-about-test-of-turing/","summary":"Из википелии:\n Тест Тьюринга — эмпирический тест, идея которого была предложена Аланом Тьюрингом в статье «Вычислительные машины и разум» (англ. Computing Machinery and Intelligence), опубликованной в 1950 году в философском журнале «Mind». Тьюринг задался целью определить, может ли машина мыслить.Стандартное звучание закона: «Если компьютер может работать так, что человек не в состоянии определить, с кем он общается — с другим человеком или с машиной, — считается, что он прошел тест Тьюринга»","title":"Суть теста Тьюринга"},{"content":"Ссылка на видеозапись выступления про обратную связь в компании\n\n Презентация\n","permalink":"https://maximgorbatyuk.github.io/blog/videos/2019-09-08-video-conference-feedback-about/","summary":"Ссылка на видеозапись выступления про обратную связь в компании\n\n Презентация","title":"Этапы эволюции обратной связи в команде разработки"},{"content":"I am a software .net developer. Mostly doing web development.\nI try to understand the business domain and purposes of a project where I work. It helps me to understand better the essence of the product and continuously improve it.\nI pay much attention to the quality. I build reliable software solutions. Also, I like to share my knowledge and enjoy playing a mentor role.\nI can help you with \u0026hellip;  .NET ASP.NET Angular 2+ Clean code Elasticsearch SQL GitFlow Docker Setting up CI/CD  Where you can find me  LinkedIn Telegram channel Getmentor.dev profile Solvert.io profile GitHub GitLab  My CV Here you will find my CV, if you need it\nView CV\n","permalink":"https://maximgorbatyuk.github.io/about/","summary":"about","title":"About me"},{"content":"","permalink":"https://maximgorbatyuk.github.io/archive/","summary":"archive","title":"Archive"},{"content":"","permalink":"https://maximgorbatyuk.github.io/search/","summary":"search","title":"Search"}]