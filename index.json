[{"content":" Как вы догадались, я считаю, что разработчики всех мастей должны обращать внимание на правильное выполнение вещей больше, но обо всем по порядку.\nDisclaimer Опыт, которым я хочу поделиться, я наблюдал у других и в своих проектах. Когда я говорю обобщенно разработчики, я имею в виду всех, кто выполняет задачи: тестировщики, фронтендеры, бэкендеры, дизайнеры и так далее. Проект - это конфликт Проект - это здоровый конфликт интересов его участников:\nПродакт оунер хочет, чтобы time-to-market был минимален, а конверсия и воронка - прямыми, как труба. Проджект менеджер хочет уложиться в срок при минимальных затратах О качестве думают программисты, тестировщики и другие участники. При равном давлении со всех сторон продукт получается стабильным, качественным и доставленным настолько быстро, насколько это возможно. Если по одному из направлений идет просадка, то получается перекос: или долго релизим, или быстро, но потом ловим “детские” баги с прода.\nРазработчики - это единственные в проекте, кто будет топить за качество. “Да, конечно, давайте сделаем все по СОЛИДу и паттернам, пусть это займет три недели вместо двух дней”, - не скажет ни один ПМ в мире. Получается, что только от нас и зависит качество построенной системы.\nВажно помнить, что конфликт этот - рабочий, а не личный, поэтому даже если вас было слышно из переговорки во время планирования, это не должно вам мешать идти на обед дружно всем вместе. Более подробно о конфликтах в проекте я писал в другой статье.\nА зачем делать вещи правильно? Чтобы навыки росли, нужно время на чтение материалов, книг, изучение подкапотных вещей вашего языка программирования, а также практика. Не применив только что изученный паттерн в бою, не поймешь, правильно ли его сделал, стал ли код понятней. Чтобы это время у вас было, нужно, чтобы работа была понятна, предсказуемая, без авралов и пятничных починок багов до утра субботы.\nКогда процессы налажены, вы получаете больше свободы: меньше ненужных созвонов, больше времени углубиться в код, а может даже и закончить работу раньше, чем ждет продакт. Если вы показываете стабильный уровень перформанса, даете всегда реалистичные оценки, а ваши задачи редко возвращаются на доработку, то к вам как специалисту возникает больше доверия, а у вас - больше времени.\nЧем больше у вас свободы и автономности, тем легче вы сможете управлять своим графиком. Если у вас нет зависимостей от тиммейтов, а сроки и критерии приемки понятны, то и делать задачи вы можете тогда, когда вам удобно. Главное - сдавать их в срок.\nА причем здесь конфликт? Каждый конфликт на работе дает возможность повысить эффективность организации, наладить отношения с коллегами, вывести вас из тупика.\n(c) Клоук и Голдсмит, “Resolving conflicts at work”\nМеняя привычный уклад работы, вы неизбежно столкнетесь с конфликтами: ПМ по прежнему захочет дергать вас по статусам, коллега созвониться, а джун - не писать тесты. Люди стремятся сохранить статус кво. Тем не менее, важно твердо стоять на своем. В обсуждениях стремитесь найти решение Win-win, чтобы и вы, и коллега остались в выигрыше.\nА как делать правильно? Об этом мы сейчас и поговорим.\nJira development first Часто наблюдал в своей практике, когда продакт не утруждал себя подготовкой задач. В ней должны быть критерии приемки, какая-то дополнительная информация. Это же сложно, гораздо проще рассказать ртом разработчику, что делать нужно. Беда в том, что во время разговора Продакт может что-то забыть или упустить, а после - уже разработчик рискует сделать то же самое. В итоге задачи переделываем и спорим, обговорили ли тот или иной ее пункт.\nJira нам дана свыше для того, чтобы работа была прозрачна. При первом взгляде на нее должно быть понятно, кто чем занимается, что заблокировано и где у нас бутылочные горлышки.\nВопросы по задачам задаем через комментарии. Любой увидит историю переписки и поймет, почему вдруг стори-поинты поменяли и на какие критерии приемки стоит обратить внимание. Просите ставить задачи вам. Тестировщик пишет по поводу ошибки - попросите багрепорт с шагами воспроизведения. Бэкендер пишет вам, что параметры эндпоинта поменялись - попросите задачу с примером тела запроса. Нужна помощь девопса - ставьте задачу. Таким образом, ни вы, ни тиммейт не забудете о том, что нужно сделать, а ПМ оценит ваш вклад в прозрачность процессов. Обновляйте статусы задач. Закончили ревью - переведите в QA или Develop сами, переназначьте ответственного. Не ждите, что ПМ это сделает на дэйлике. Он скажет вам спасибо. Храните информацию в задаче и документацию там же. Тогда, если вам нужен внезапный дэйофф или срочный отпуск, то никто не будет вас дергать. Никто от вашего личного присутствия не зависит, вас никто не ждет, вы - свободны. Как убедить коллег? Не забывайте обновлять статусы задач. Не ждите, что кто-то другой обновит. Блокированы - ставьте задачу в блок и пишите комментарий почему. Поменяли ответственного - пишите комментарий почему. Задавайте вопросы только в Jira. Не читают? Присылайте ссылку на комментарий в слак. Обсудили что-то с коллегой - добавьте комментарий с резюме созвона, что обсудили и к чему пришли. Тегните ПМа, пусть он будет в курсе. Так вы убедитесь, что поняли с коллегой одно и то же. Written communication first Не просто так я упомянул, что вопросы нужно писать. В письменной коммуникации вы получаете некий контракт взаимодействия: кто что сказал, о чем договорились. Таким образом, вы всегда можете вернуться к тексту, если вдруг забудете что-то. Если вы интегрируетесь с другой командой, то пишите письма. Описывайте протокол взаимодействия, задавайте вопросы “а как тут сделать Х и У”. Письма - ваш контракт и подстраховка, если вдруг что-то пойдет не так.\nКогда нужно обсудить задачу с коллегой, то подготовьте вопрос, предложите варианты решений, объясните, почему не можете выбрать что-то одно. Не стоит задавать вопросы типа “не понимаю как сделать, помоги”. Не нужно никаких meta-вопросов и тем более не нужно писать “привет” и ждать. Так можно сидеть до понедельника.\nСозванивайтесь только в том случае, если другие варианты не подходят. Слишком долго обсуждаете интеграцию или способ воспроизвести ошибку очень сложный? Окей, это весомая причина для звонка, однако даже после таких встреч должен быть осязаемый результат: заметка-резюме в Jira или meeting notes.\nОчевидные вещи нужно проговаривать и прописывать. Используйте формулировки типа “Правильно ли я понимаю, что …”, “Мне нужно сделать так и так. Верно?”, “Насколько я понял из ответа, мне нужно то-то и то-то?”. Пусть собеседник или подтверждает ваши предположения, или дает корректировки. Так собеседнику легче дать вдумчивый ответ.\nКак убедить коллег? Бывает, что коллега попался такой, которого хлебом не корми, а дай созвониться. Мягко скажите ему, что если он напишет вопрос, то вы подготовите ответ лучше, чем в прямом эфире. Начинайте с себя - пишите подробные вопросы. Сначала будет тяжело, но чем больше практики, тем легче. Скажите коллегам, что асинхронное общение дает возможность заниматься другими задачами вместо ожидания созвона. Если и это не поможет, на ретро скажите, что звонки “на пять минут” редко умещаются в пять минут и выбивают из колеи, а текстовые сообщения напомнят о важном. Tutorials first Документация должна быть - это однозначно. Однако, документ документу рознь, и их тоже нужно уметь писать. Когда мне говорят, что у них нет времени на документацию, мне кажется, что просто кто-то не умеет ее писать.\nНежелание писать доку для легаси проектов я понимаю - сходу накатать тысячи страниц текста тяжело. Однако есть гораздо легче способ начать - это туториалы. Они очень эффективы. Вот тебе пошаговая инструкция, какую команду после которой выполнить, какой результат будет и что делать, если возникла ошибка с таким кодом. Даже если ты не знаком с библиотекой, ты быстро поймешь, как ее использовать.\nА когда твой результат совпадает с описанным, ты уверен, что делаешь все правильно. Так почему же не делать так же на проекте? При расследовании багов ты по истории коммитов можешь узнать номер тикета, а в нем увидишь свою же инструкцию по тестированию. Так ты получишь дополнительную информацию, где корень ошибки - неверная реализация или система настроена неверно.\nТуториалы должны быть понятны и просты. Очевидные вещи и тут нужно прописывать. В критичной ситуации, когда дедлайны горят и продакшн упал, вы скажете себе спасибо, что не нужно тратить усилия на то, чтобы вспомнить команды, так как не записали их, ведь это же было “очевидно”. Туториалы - это отличный способ передать знания коллеге, даже спустя время. Пока описываемый процесс не меняется, туториал актуален.\nКак убедить и внедрить? Нашел хак, как легче настроить инфраструктуру - напиши туториал. Закончил задачу - подскажи тестировщику, как пройтись по Happy path, какие эндпоинты после каких выполнить. Остальные пограничные кейсы он уже найдет сам. Туториалы - это емкий и эффективный ответ на вопрос, если коллеге нужна помощь. Code quality first Качественный код должен быть привычкой, написание тестов - тоже. Не стоит рассматривать качество как некую отдельную задачу. Напомню, что только разработчики фокусируются на качестве. Да, продакт тоже не хочет, чтобы баги с прода сыпались каждые пять минут, однако он не знает, что такое юниттесты, паттерны проектирования и состояния нормализации баз данных. На планировании мы вместе найдем баланс между time-to-market и качеством\nКачество само по себе не появится. Его нужно обеспечивать и контроллировать.\n(c) Егор Бугаенко, Code Ahead.\nМы должны понимать, что деньги на зарплаты берутся не из тумбочки, поэтому закапываться с идеальную архитектуру не нужно. Тем не менее, качество - это наша ответственность. Лучше написать меньше тестов для экономии времени, чем потом рефакторить изначально плохой код.\nУчите паттерны проектирования и архитектуры. KISS, DRY, SOLID не должны быть для вас пустым звуком. Паттерны банды четырех тоже будут полезны и выведут ваш навык кодинга на новый уровень\nКак доказать, что ваш код работает? Легко. Простестируйте его… Каждая написанная вами строка кода должна быть протестирована. Точка.\n(с) Р. Мартин\nЮниттесты - это must-have. Как иначе вы покажете, что ваш код работает? Начинайте с Happy path, дальше добавляйте пограничные кейсы, которые приходят вам в голову. Не рассматривайте время, которое нужно на тесты, как отдельную задачу. Сразу закладывайте их в оценку.\nНапомню, что, согласно статистике от Kolesa Zerttey 2022 и StackOverflow, только половина разработчиков пишет тесты. Умение тестировать код сделает вас более конкурентным специалистом.\nКак убедить и внедрить? Пишите тесты сами, не ожидая разрешения На ретро отмечайте, что только благодаря тестам задачу не нужно было дорабатывать, что много пограничных кейсов покрыто было в коде Не говорите ПМу, что без тестов сделаете задачу быстрее. Если ПМ настаивает на этом, то говорите, что риски ошибок возрастут и пусть ПМ идет на этот риск, а не вы. Interface first Всем нам нравится удобный интерфейс: когда функций именно столько, сколько надо, система не перегружена, но при этом дает возможность кастомизации.\nПримеры из реальной жизни. Слева вы видите сравнение приборок рандомного авто и смарта. Она простая, дает самый необходимый минимум. Нет, например, тахометра, а значит нет дополнительного потока информации и отвлекающего фактора.\nТочно так же сделан и пульт от Apple - только самые необходимые кнопки.\nКто нам запрещает делать то же самое в коде? Пишите классы, компоненты и модули системы так, чтобы другие видели только самое необходимое. Коллеги - это пользователи вашего кода. Не стоит слишком быстро отдавать задачу на ревью, уделите внимание улучшению кода. Следуйте правилу бойскаута - оставляйте место после себя лучше, чем оно было до вас.\nЧем больше ручек, рубильников, крутилок и показателей у вашего кода, тем сложнее его понять сходу. Тиммейты тратят больше усилий, чтобы разобраться в вашей архитектуре. А если сейчас прод горит, то ваш тиммейт вас возненавидит. Убирайте опциональные параметры и неиспользуемые публичные методы.\nПосле сессии кодинга встаньте на место тиммейта и оцените свой код, легко ли его понять. Если что-то показалось ненужным - упрощайте\nClarity first Уверен, что многие встречали такого коллегу, который на каждом дэйли-статусе про каждую свою задачу говорит “Work in progress”. А что именно происходит - пойди разбери. Для того, чтобы к вам было доверие, нужно быть открытым.\nClarity можно перевести как качество человека, когда он последователен, его действия и слова логичны и объяснимы. Быть последовательным - это когда коллеги знают, что ты следуешь установленным правилам, они знают, что от тебя ожидать.\nКогда что-то рассказываете коллеге или делитесь фидбеком, то говорите простыми формулировками. Двузначно трактовать ваши слова нельзя. Тут речь идет не о токсичности - вы говорите факт, а затем как бы вы поступили на месте человека и почему.\nКогда вы делитесь знаниями, вы объясняете простыми словами и аналогиями. Если чего-то не понимаете, то так и говорите - я этого не понимаю.\nС чего начать? Теперь, когда у вас есть информация, как должно быть правильно, с чего стоит начать? Я предлагаю попробовать сначала эти действия, а затем посмотрите, что из этого вышло.\nОбновляйте статусы в Jira. Избавьте вашего ПМа от необходимости спрашивать вас, какой статус там. Если есть изменения по задачам, то в комментариях поясняйте, что произошло и почему. Пишите туториалы для себя и коллег. Рассматривайте любой вопрос типа “а как сделать Х и Y” как возможность написать туториал. Пишите тесты, начните хотя бы с Happy path. Пишите подробные вопросы коллегам. Созванивайтесь только если это действительно необходимо. Учитесь писать понятные предложения, не думайте, что собеседник читает ваши мысли. Очевидные вещи надо проговаривать. Соблюдай правила Нарушай правила Создавай свои правила (с) цитата в интернете.\nВ одной из книг или статей я узнал о таком способе освоения ремесла: сначала ты следуешь правилам, пока они не станут частью тебя. Затем ты пробуешь нарушать правила, чтобы посмотреть, что сработает в твоем случае. А потом ты сумеешь создать свои собственные правила. Так ты станешь мастером своего дела. Для айти это тоже актуально.\nПопробуйте улучшать процессы вокруг себя. У вас станет свободнее график, будет меньше незапланированных митингов, пожаров, авралов, сорванных отпусков. Появится возможность развивать свои навыки. Доверие и уважение к вам как специалисту растет. Когда занимаетесь любимым делом и растете в нем, то и удовольствия от работы больше. Может быть хорошая работа не принесет много счастья, но плохая точно сделает вас несчастным.\n","permalink":"https://mgorbatyuk.dev/blog/management/2023-08-01-lets-do-stuff-right/","summary":"Как вы догадались, я считаю, что разработчики всех мастей должны обращать внимание на правильное выполнение вещей больше, но обо всем по порядку.\nDisclaimer Опыт, которым я хочу поделиться, я наблюдал у других и в своих проектах. Когда я говорю обобщенно разработчики, я имею в виду всех, кто выполняет задачи: тестировщики, фронтендеры, бэкендеры, дизайнеры и так далее. Проект - это конфликт Проект - это здоровый конфликт интересов его участников:\nПродакт оунер хочет, чтобы time-to-market был минимален, а конверсия и воронка - прямыми, как труба.","title":"Let's do stuff right!"},{"content":"О компании Компания Clever (далее просто компания или Clever) разрабатывает e-commerce платформу для бизнесов с 2005 года. Целевая аудитория - компании, которые продают лицензии программ. Под капотом интеграция платежных систем, репорты, отчеты по воронкам продаж, и все это в большом монолитном приложении. Если вы покупали Parallels для своего макбука в течение последних пары лет, то вы точно проходили через платежные страницы Clever.\nКомпания продуктовая, работает чуть больше ста человек. Из них больше половины - разработчики, организованные в команды по направлениям (юнитам). Большинство разработчиков - in-house, но за последний год активно шел найм аутстафферов - я как раз один из таких работников.\nНесмотя на то, что в Clever несколько команд, топ-менеджмент решил отказаться от роли тимлида. Чтобы этого достичь, сделан был упор на автоматизацию, прозрачность и высокую дисциплину разработки. Мне, как тимлиду с двухлетним стажем на момент перехода в Clever, стало интересно попработать в такой обстановке.\nКак они этого добились, какие процессы выстроили - обо всем этом я расскажу в статье.\nЧем занимается тимлид? Для начала стоит определить, какие роли чаще всего выполняют тимлиды. Тогда будет понятно, как Clever замещает эти функции.\nИследовательская организация DevCrownd провела в начале февраля 2023 опрос среди 570 тимлидов и руководителей разработки. Согласно результатам опроса, тимлиды чаще всего делают:\nСобеседования (92%) Развитие людей (91%) Перформанс ревью людей (85%) Декомпозиция и постановка задач (82%) Управление техдолгом (77%) Повышение качество продукта (72%) Кодинг и инженерная работа (67%) Код-ревью (64%) Выбор технологий в команде (63%) Управление зарплатами и грейдами (53%) В опросе принимали участине в основном тимлиды бэкенд-, фронтенд- и QA-команд. Судя по обязанностям, тимлиды занимаются чаще всего развитием людей и проработкой процессов разработки в команде. Написание кода отметили 67% респондентов. Большинство отметило, что только треть времени рабочего дня занимаются кодингом:\nИнтересна эта статистика тем, что кодинг - это то, что тимлиды делали раньше, будучи разработчиками и благодаря чему им нравится профессия. Став тимлидами, времени на код им не хватает, и тут некоторые тимлиды начинают грустить. А как иначе, если времени нет? Иначе говоря, тимлиды - это про работу с людьми в команде и про процессы: автоматиазция, правила, техдолг и тд.\nА как они работают без тимлидов? Функции тимлидов в Clever замещают другими людьми и даже группами людей. Компания ответственно подходит к процессам и правилам разработки, что задает жесткую дисциплину работы в командах. Сильный упор делают на прозрачность процессов, происходящих в Компании. Обсудим подходы организации, их процессы и то, как они влияют на работу компании.\nГруппы архитекторов и QA. В Clever есть две группы, в которые входя разработчики из разных команд: Architecture Ownership Group (AOG) и Quality Ownership Group (QOG).\nЗадачи AOG прорабатывают архитектуру приложения Компании, обсуждают апгрейд версий библиотек и серверов, продумывают стратегию миграции на новую микросервисную архитектуру, задают правила разработки для команд, определяют требования к качеству кода с помощью Stylecop и SonarQube. В группы вступить может стать любой желающий, у кого есть достаточная экспертиза и опыт. В AOG нет главы, все решают голосованием после дискуссий. Архитекторы обсуждают требования к качеству кода, которые отражены в конфигурации автоматической проверки кода Stylecop и SonarQube. Эти инструменты на основе конфигураций как раз подскажут, на достаточном ли уровне качество кода проекта, какие потенциальные ошибки в нем есть, как можно упростить тот или иной метод или класс. Все решения, которые были приняты AOG, спускаются в другие команды, и им неукоснительно следуют.\nФокус на качественное улучшение дает возможность воплотить свои идеи в жизнь, опробовать разные архитектурные паттерны на практике и увидеть спустя время, как они работают. Более того, когда обсуждаешь глобальное улучшение системы с другими разработчиками, то, во-первых, сам читаешь больше о проектировании систем, а во вторых - учишься отстаивать свою точку зрения.\nЗадачи QOG Если участники AOG занимаются правилами, то участники QOG следят за правильным выполнением этих правил в командах, а также:\nотслеживают по метрикам, на каком уровне качество кода сейчас, продумывают способы тестирования приложения, как можно упростить подходы, ищут и закрепляют подходы в автотестах API. На данный момент бОльшая часть кода в Clever - это огромный монолит, который год назад начали переписывать на микросервисную архитектуру. Из-за этого тестирование новых фич - дело непростое, и тут очень часто группа QOG выручает с советами, скриптами для БД и другими инструментами, упрощающими жизнь разработчиком.\nГруппы AOG и QOG - это возможность сеньорам в Clever не только передвигать задачи на доске из WIP в Done, но и повлиять на проект с архитектурной точки зрения. Таким образом, люди получают возможность отвлечься от повседневных задач, попробовать что-то новое и повысить свои навыки в архитектуре.\nКак AOG/QOG облегчат жизнь вашим тимлидам Организовав группы архитекторов и автоматизаторов из разных команд, вы получите два бонуса:\nу разработчиков появится новая опция карьерного роста, программисты получат возможность попробовать что-то новое, у тимлида освободится время, ведь он больше не думает в одиночку над архитектурой. В группу архитекторов люди могут вступать и выходить свободно. Такая группа для разработчика - это возможность проявить себя и получить новые навыки, не меняя компанию. Тимлид получает больше времени, которое он может уделить локальным техническим задачам, техдолгу или менторству команды.\nРегулярный Town hall для всех Раз в две недели Clever созывает митинг в Zoom для абсолютно всех сотрудников, где:\nделится новостями по кадрам: кто пришел, кто ушел, кто сменил проект. рассказывает о стратегических планах развития продукта. отчитывается о прогрессе выполнения целей на текущий квартал. Успеваем ли в срок, чего достигли. показывают роадмап продукта на ближайший год периодически, напоминая, куда компания движется и как квартальные цели помогают в достижении годовых целей. рассказывают о новостях в найме, планируют ли расширяться в ближайшее время и за счет чего: in-house или аутстафф. Сотрудники получают актуальную информацию регулярно, часто и из первых рук. Более того, после того, как руководство поделилось новостями, собрание разбивается на комнаты с каждым С-level менеджером, куда может зайти любой и задать вопросы напрямую. Встречи действительно регулярные, и даже если новостей особо нет, то так и говорят: \u0026ldquo;новостей нет\u0026rdquo;. Тем не менее, всегда есть о чем рассказать по поводу выполнения целей квартала - так разработчики, которые трудились последние две недели над своими задачами, видят результаты вклада в общий прогресс. Это возможность увидеть, что твоя команда кого-то блокирует, если по какой-то причине вы не успеваете выполнить свои задачи.\nОтчеты о достижении квартальных и годовых целей полезны разработчикам, так как они показывают, что деньги у компании берутся не из тумбочки. Иногда встречаешь таких коллег, которые заботятся о качестве кода настолько сильно, что забывают о сроках поставки. Регулярный Town hall напоминает, для чего мы пишем код.\nВозможность напрямую задать вопрос С-level менеджеру в присутствии других коллег и тут же получить или ответ, или обещание ответа - это хорошая возможность быстро получить информацию. Такая обстановка накладывает ответственность на менеджеров, которые теперь обязаны проработать вопрос сотрудника.\nКак Town hall облегчит жизнь вашим тимлидам Регулярные Town hall позволят держать в курсе событий всех сотрудников, и тогда тимлидам не нужно будет доносить решения бизнеса до своих команд. У подхода есть преимущества:\nесть риск, что донести тимлиды могут что-то некорректно, сотрудники получат возможность задавать вопросы напрямую руководству. Люди знают о квартальных целях, о годовых и без встреч 1-1 с тимлидом. Тимлид, в свою очередь, больше не думает о том, не забыл ли он оповестить о чем-то важном своих ребят, и может уделить больше внимания их развитию и менторству.\nЕсли что-то можно автоматизировать, то мы будем автоматизировать Clever следует лучшим практикам автоматизации процессов разработки:\nТестирование и деплой, CI/CD. Повышение качества через peer code review. Интеграция инструментов для отслеживания качества: SonarQube, Stylecop, etc. Эти подходы сокращают время на ревью кода и дисциплинируют разработчиков писать в одном стиле, что дает более быстрое погружение в проект или модуль. Проще понимать код, если он написан в одном стиле со всем остальным в проекте, даже если это монолит на несколько десятков тысяч файлов. О преимуществах CI/CD в интернете можно найти не одну сотню статей - от Gitlab, от RedHat, от SonarCloud - но если кратко, то основные преимущества - это:\nСтабильные сборки, Предсказуемые сборки. Мы знаем, какая версия будет отправлена на сервер, Автоматическая проверка тестов. Многие компании автоматизируют процессы, но в Clever этому уделено особое внимание. Все, что можно автоматизировать - стремятся автоматизировать. Особенно - автотестирование системы.\nКак автоматизация облегчит жизнь вашим тимлидам Про необходимость автоматизации, DevOps, CI/CD к 2023 году не сказал только ленивый. По оценке некоторых экспертов, рост производительности может достигать более 50%, если компания внедрит DevOps практики. Clever стремится автоматизировать действительно все, что возможно, а не только разработку.\nВаш тимлид будет рад, если вы поддержите его рвение к автоматизации и поможете с ресурсами. Еще громче он скажет спасибо, если автоматизация будет централизована и эта забота будет переложена с его плеч. И если вы организуете группу архитекторов, вам не только тимлид скажет \u0026ldquo;спасибо\u0026rdquo;, ведь вы часть его забот поручили другим, но и разработчики, так как у них появилась новая карьерная возможность.\nПравила кодинга и дисциплина разработки Архитекторы Clever проработали свод правил и рекомендаций, который можно назвать кодексом разработчика. В нем пишут:\nо ведении веток, принятая брэнч-стратегия, об именовании веток в Git в соответствии с номером задачи, о правилах смены статуса задачи в Jira: кто на каком этапе и что пишет в задачах. на что обращать внимание при разработке, что делать в случае найденной ошибки. Чтобы разработчики следовали требованиям, архитекторы ищут способы автоматизировать проверку соблюдения правил:\nПри коммите номер задачи должен быть в сообщении. Иначе - реджект коммита. Ветка в Git должна называться так же, как и номер задачи. Иначе - не запушишь ветку. Статус CI отражены в Jira. Ревьюер задачи видит, что тесты не прошли. В Jira в определенные статусы переводить могут люди с определенной ролью. Перевести в колонку Done задачу разработчик не может технически, а не только по процедурам. Правила обсуждают в AOG. Обсуждая, участники берут во внимание все плюсы и минусы подходов, причины возникших проблем, а затем принимают решение и закрепляют его в документации. Каждый разработчик понимает, чем обоснованы принятые требования, и соблюдает их и следит во время код-ревью, что коллеги тоже не забывают о них.\nКак кодекс разработчика облегчит жизнь вашим тимлидам Тимлидам только плюс от кодекса - правила были продуманы и установлены до них. Все тиммейты им следуют, не нужно объяснять кодекс сразу всем. Новичку в команде нужно лишь дать ссылку на документ и разъяснить детали. Освободившееся время тимлид может уделить тому, что нужно в данный момент больше: закрыть задачи спринта, менторство джунов или иное.\nТестируют тоже разработчики В Clever нет спецов manual QA. Автоматизаторы пишут тесты для API эндпоинтов. Ручным тестированием занимаются тоже разработчики. Когда один разработчик сдает задачу на ревью, его коллега сначала смотрит код, а потом проверяет, что багфикс или фича работают ожидаемо. Проверяют пограничные кейсы, ошибочные сценарии - все то, что обычно делают тестировщики manual QA. Такой подход оказался на практике очень полезным:\nНовички быстрее погружаются в код, делая ревью и тестирование другим. Конечно же, по советам и присмотром коллег. При поиске багов у других начинаешь писать так, чтобы в твоем коде было меньше подобных ошибок. Активнее пишешь интеграционные тесты, чтобы сократить ручное тестирование. Автотесты повышают надежность системы и сокращают ручной труд. На данный момент в проекте более 15 тысяч тестов - это очень много даже для большой монолитной системы. Багфиксы сопровождают тестами на найденную ошибку. Если разработчик говорит, что нужно больше времени на задачу, так как он пишет тесты, то менеджер только скажет \u0026ldquo;спасибо\u0026rdquo; за это. Руководство Clever понимает пользу от автотестов и крайне рекомендует своим разработчикам их писать.\nСогласно исследованиям Kolesa за 2022, лишь 54% разработчиков пишут тесты.\nПо данным исследования Stackoverflow.com за 2022 - 58% разработчиков из 34 тысяч опрошенных пишут автотесты. Несмотря на то, что уважаемые люди в книгах и со сцен конференций говорят о важности и пользе тестов, статистика гласит, что пока еще не все разработчики их пишут.\nКак доказать, что ваш код работает? Легко. Простестируйте его\u0026hellip; Каждая написанная вами строка кода должна быть протестирована. Точка.\n(с) Р. Мартин\nКоманды работают по канбану, где цель - сдвинуть как можно больше задач WIP в колонку Done, поэтому разработчики не игнорируют задачи на стадии тестирования. Да и продакт менеджер во время дэйлика все равно назначит на кого-нибудь свободную, так что не отвертеться.\nКак автотесты облегчат жизнь вашим тимлидам Когда разработчики занимаются тестированием задач от коллег, они стремятся сократить ручной труд и пишут автотесты сами. Чем больше тестов в проекте, тем реже падает продакшн и тем больше времени тимлид может уделить внутренним улучшениям. Пусть ваша компания примет правило \u0026ldquo;реджектим мердж-реквесты без тестов\u0026rdquo;.\nЕсли ваш тимлид хочет внедрить юнит-тесты в проект, то дайте ему нужные ресурсы и время. Пусть лучше тимлид горит идеей, чем выгорает от невозможности воплотить ее в жизнь. А если не горит - подскажите, что профи пишут тесты, а непрофи - не пишут.\nСамостоятельные команды из миддлов и сеньоров Так как в Clever много требований к процессам и дисциплинированности в работе, то и специалистов она нанимает с опытом. Команды время от времени берут джунов и людей без опыта, но случается это редко. Один из разработчиков, который давно работает в компании, рассказал, что нет никаких правил на этот счет и найм джунов - это ответственность самой команды. Команда решает, готова ли она взять неопытного специалиста. Если разработчики готовы уделять время джуну, значит будут нанимать джунов.\nКоманда обычно состоит из продакт менеджера, нескольких разработчиков и изредка - аналитика, который помогает продакту с ведением Jira. Clever так принято, что довольно много кадровых решений принимает сама команда:\nнужно ли расширяться, так как объем задач вырос, кого нанимать, кто сможет провести собеседование, финальное решение брать человека или нет - за продакт менеджером. Люди в команде понимают, что принятые решения потом им же и претворять в жизнь, поэтому с полной ответственностью относятся к дискуссиям. Такой подход повышает вовлеченность в процессы и развитие не только продукта, но и компании в целом - каждый понимает, что его голос имеет значение.\nКроме того, командам не нужен менеджер юнита, чтобы решать какие-то кадровые вопросы: отпуска, повышение, иные HR вопросы - команда коммуницирует напрямую с HR-отделом. Конечно, если команде нужна помощь менеджера, то он готов помочь. На регулярных встречах руководство компании рассказывает о целях на квартал и год, и команды могут сами решать, какие ресурсы ей нужны для достижения этих целей.\nНовичкам команда назначает buddy Когда в команду приходит новый человек, ему помогает адаптироваться специально назначенный человек - buddy. Ему можно задавать любые вопросы в процессе онбординга. Бадди назначают во время обсуждения при найме, но в целом все участники команды открыты новичку и готовы помочь, если к ним обратятся. Несмотря на то, что все в компании уже подготовлено - документация, открытая структура с именами, закрепленные правила - бадди будет тем, кто подскажет где что искать и как настроить рабочее окружение.\nКак высокий уровень сеньорности команды облегчит жизнь вашим тимлидам Чем выше средняя сеньорность команды, тем легче ей управлять. Можно даже сказать, что ей и управлять не нужно. Дай задачи, покажи роадмап, расскажи о о том, что можно делать в рамках правил разработки и что нельзя, и в результате люди спасибо только скажут, что их не пытаются менеджерить. Если ваша компания решит нанимать больше сеньоров, то это будет дороже, но качество продукта, которое команда выдаст, будет на высоте.\nКомпания пользуется аутстаффингом Outstaffing is a type of remote recruiting model in which a vendor provides a specialist or a group of professionals for a client\u0026rsquo;s project during the contract term. The client can administer and manage a “rented” team or specialist.\nАутстаффинг - это возможность быстро нанимать людей, быстро укомплектовывать команды недостающими компетенциями, а в случае ошибки выбора или ненадобности в работе - так же быстро отказываться от услуг конкретного специалиста. Согласно результатам опросов, 92% IT-компаний пользуются услугами аутсорсинга и аутстаффинга, и это позволяет им сократить расходы на персонал вплоть до 70%. По оценкам экспертов Gallup, замена работника в штате может обойтись в стоимость до двух его годовых окладов. Согласно исследованию, при средней ежегодной зарплате в 50 000$ компания размером 100 человек может тратить до 2.6 млн долларов в год только на найм людей в результате текучки кадров.\nКак аутстаффинг облегчит жизнь вашим тимлидам Clever использует преимущества аутстаффинга по максимуму. Компания быстро собирает команды и перегруппировывает их, если нужно. Если подпроект или направление закрывается, то так же быстро компания отказывается от услуг специалистов по этому юниту. Тимлидам легче подбирать в команду людей, если их технические навыки уже проверены аутстафф-партнером. Собесы будут быстрее, легче, риск ошибочного найма ниже, а тимлид больше фокусируется на софт-скиллах и ожиданиях кандидата.\nScrum-матсер помогает с performance review и ретроспективами Clever уделяет особое внимание оценке перформанса сотрудников. Для того, чтобы оценка проходила качественно, компания польузется услугами Scrum-мастеров. Scrum-мастер фасилитирует процедуры оценки, а продакт-менеджер команды собирает встречу с разработчиками для оценивания работы человека. Каждый в компании понимает важность этого процесса.\nСам процесс оценки выглядит как часовой митинг, на котором коллеги делятся комментариями по трем пунктам:\nЧто хорошо - keep doing, Что стоит улучшить - should be improved, Что может обернуться проблемой - potential. Вещи, которые негативно влияют на перформанс человека, записывают в категорию \u0026ldquo;Potential\u0026rdquo;, не придавая ей явно негативную окраску. Здесь отмечают, что человек должен начать делать, чтобы улучшить свою производительность. Каждый сотрудник получает оценку перформанса через 3 месяца после начала работы в команде, через полгода, через год и затем каждый год. Таким образом, он получает фидбек от всей команды часто и регулярно.\nПомимо формального фидбека, сотрудники получают косвенный фидбек на ретро, которые проходят раз в три недели. На ретро мы задаем себе те же самые вопросы и стараемся честно ответить на них. Негативные кейсы прорабатываем: каждый делится мыслями о произошедшем и думает, как можно не допустить ошибки в будущем. В результате команда формирует список action items - те действия, которые нужно сделать, чтобы не допустить повтора ошибки или улучшить существующий процесс.\nКак scrum-мастер облегчит жизнь вашим тимлидам Если вы практикуете оценку перформанса, то пусть ею занимается не тимлид или проектный менеджер, а специальные люди: scrum-мастера или HR-менеджмент. В таких условиях жизнь тимлида становится легче. Тимлиду не нужно задумываться над форматом встречи, он фокусируется на качественном фидбеке.\nТо же самое относится и к ретро. Когда за ретроспективы отвечают scrum-мастера, то остальные меньше думают об организации ретро и больше - о качественных улучшениях. Если же ваша компания не готова нанимать скрам-мастеров, то пропишите процедуры и формат проведения оценки и ретро, подготовьте шаблоны форм - все это уже упростит жизнь тимлидам.\nЗа регулярный релиз отвечают архитекторы Каждые две недели Clever выпускает новую версию продукта, какой бы состав задач не был подготовлен: что готово, то и деплоим. Огромную монолитную систему деплоит один из участников группы AOG. Релиз проходит по стратегии \u0026ldquo;Blue-green deployment\u0026rdquo;. Большинство этапов релиза автоматизированы, но некоторую часть пока что приходится выполнять вручную. Процесс релиза выглядит так:\nВ понедельник создают ветку новой версии продукта на основе development, где уже лежат замердженные фичи и багфиксы. Во вторник в начале дня часть продакшн-серверов обновляются. Проверяют, что система не упала сразу после наката. В среду команды тестируют на новых серверах свои фичи: ведут мониторинг системы или проходятся по тесткейсам с тестовыми данными. По завершению тестирования задачи в Jira маркируют соответствующим лейблом. После того, как все задачи были протестированы и помечены лейблом в Jira, релиз-менеджер переключает балансировщик на сервера с новой версией и затем обновляет оставшуюся часть серверов. Процедура релиза описана в документации и доступна всем сотрудникам компании. Такая стратегия дает несколько преимуществ:\nДисциплинирует команды. Каждый знает, когда будет следующий релиз и успеет ли он к дэдлайну. Сокращает риск падения серверов. Во время подготовки релиза все еще работают сервера с прежней версией кода. Снимает нагрузку с команд. Пока что продукт - это монолит, поэтому часть системы не обновишь. Следовательно, команды не деплоят самостоятельно, а ждут релизной недели. Как релизы от AOG облегчат жизнь вашим тимлидам Когда за регулярность релизов будут отвечать архитекторы, тимлид тратит меньше времени на деплой и больше - на подготовку задач. В конце концов, он поможет коллегам, которые не успевают завершить свои задачи в срок. В случае, если релиз не удался в результате каких-то ошибок, тимлид фокусируется только на решении проблемы и не думает о том, что ему еще дальше деплоить нужно.\nDocumentation first Clever обеспечивает прозрачность процессов тем, что всё-всё-всё описано в документации. Эта база знаний доступна любому работнику с доменной учеткой. В документации описаны:\nКто мы, что мы, зачем мы работаем. Ссылки на диаграммы и доски в Miro с роадмапом продукта. Планы, цели и задачи всегда перед глазами. Какое бы правило ни было принято в Clever, оно будет закреплено в документации вместе с тем, как правило решает поставленную проблему. Структура компании в виде матрицы - кто в какой команде работает, чем занимаются. В ней упомянуты и аутстафф-сотрудники. Так ускоряется коммуникация между командами, каждый знает, к кому в случае какого вопроса обращаться. Любое изменение в коде должно быть в рамках определенной задачи в Jira. Задачи в Jira - такая же проектная документация. В задачах описаны критерии приемки, бэкграунд задачи, взаимосвязи с другими задачами и прочая полезная информация, которая может пригодиться исполнителю. Любой митинг создается с аджендой - это тоже своего рода документация, зачем организатор встречи планирует собрать людей. Исходя из адженды, участники понимают, к каким вопросам стоит подготовиться и что \u0026ldquo;принести\u0026rdquo; на митинг. Часто во время митинга пишут заметки, чтобы затем положить их в документацию команды. После любой встречи должен быть какой-то результат: новые задачи с требованиями, комментарии с Jira с принятыми решениями, редко - изменения в процессах. Результаты разговоров не остаются в головах его участников. Упор на документацию хоть и требует дополнительных затрат, но в долгосрочной перспективе экономит время и силы. Нет необходимости повторять одно и то же, нет риска забыть важную информацию. Согласно результатам исследования McKinsey, в среднем работник тратит около 20% своего времени на поиск нужной информации. Автоматизированные базы знаний могут сократить общее время на поиск информации до 35%. Согласно опросу stackoverflow за 2022 год, 34% разработчиков тратят до часа в день на поиск информации, а 17% - до двух часов. О преимуществах баз знаний подробно можно почитать тут.\nАвтоматизированная база знаний Clever помогает:\nсократить время на поиск нужной информации, ускорить онбординг новичков в Компании, узнать, кто в какой команде работает и чем занимается, узнать, какие квартальные и годовые цели сейчас у нас, сократить риск негативных последствий после того, как кто-то поступил не по процедуре. Как документация облегчит жизнь вашим тимлидам База знаний способна повысить производительность сотрудников, сократить время онбординга и уменьшить риски, что кто-то забудет процедуры и пропустит какой-то важный этап в процессе. Мало накидать кучу документов в один гугл-драйв - информация должна быть не только релевантна, но и понятна, если читать по диагонали, и легкодоступна для поиска. Как говорит статистика, до 20% времени люди проводят в поисках нужного.\nИ разработчикам, и тимлидам будет жить легче: разработчики быстрее находят нужные процедуры и правила, а тимлиды пополняют базу знаний. Со временем база знаний будет накапливаться, а тимлиды будут реже писать новые документы и больше - давать ссылки на существующие. Если у вас еще нет базы знаний с удобным поиском, то обсудите с вашими тимлидами это и скажите, что готовы обеспечить ресурсами и снизить нагрузку, чтобы они занимались пополнением базы.\nМитинги с ажендой и экшн-айтемами У Clever есть два неписанных правила:\nВсе митинги создают с аджендой, чтобы участники понимали, к чему готовиться. По завершению митинга должен быть результат: записанное решение или список экшн-атемов. Звучит как капитанский совет, но я часто наблюдал, как люди создают встречи без повестки совсем. Особенно грустишь, когда эта встреча длится 2-3 часа. Митинги без адженды часто уходят в обсуждение всего и ничего одновременно. Повестка поможет держать дискуссию в нужном русле, а после митинга - понять, успешной была встреча или нет.\nТакже во время встреч часто ведут заметки, о чем поговорили. Это записи - meeting notes - помогут понять, что обсуждали и до чего договорились, тем сотрудникам, которые не смогли присутствовать. Помимо этого, записи помогут при оформлении документации, если это - один из экшн-айтемов.\nПравило неписаное, потому что это скорее культура корпорации: каждый понимает, что получать приглашение на митинг без повестки некомфортно. Ты просто не понимаешь, зачем встреча, что нужно обсудить и нужно ли вообще что-то обсуждать на митинге или проще емейлом обойтись.\nКаждое решение, которое обсудили и приняли во время встречи, записывают: что-то идет в Jira, что-то - в базу знаний или иные документы. Так любой желающий может ознакомиться с решением, а риск донести информацию неправильно уменьшен. В компании есть неписанное правило, что каждое бизнес- или архитектурное решение должно быть записано, и тогда ваша проектная документация будет пополняться сама собой.\nКак адженда облегчит жизнь вашим тимлидам Примите в вашей компании правило, что митинги без адженды можно отклонять, и тогда очень быстро люди научатся планировать встречи. Если научить людей вести заметки, то воспроизвести ход рассуждения будет проще. Не забудьте и о результате митинга - пусть каждый участник помнит, что митинг нужен для какого-то результата. С аджендой все это будет организовать легче.\nТимлиду не придется в очередной раз страдать на бесполезном митинге, а часть митингов может обернуться письмами. С аджендой встречи становятся более структурированы, все участники помнят о повестке обсуждения. Освободившееся время тимлид уделит менторству и повышению качества продукта.\nCode ownership и мотивация За счет того, что разработчики в Clever занимаются не только разработкой, но и тестированием и даже могут принять участие в проработке архитектуры всей системы, владение кодом для них - не просто абстракция. Чем больше человек вовлечен в деятельность, тем сильнее привязанность к результатам его труда.\nHighly engaged teams are 14% to 18% more productive than low engagement teams, on average.\n(c) gallup\nМотивация и привязанность к результатам работы были объектом исследований Дэна Ариели, в youtube можно найти видео The IKEA effect, объясняющее так называемый \u0026ldquo;Эффект IKEA\u0026rdquo;.\n\u0026ldquo;Эффект IKEA\u0026rdquo; - это когда покупатели начинают больше любить то, что приобрели, если они приняли бОльшее участие, чем просто купить товар. Мебель IKEA нужно собирать самому. Покупатели больше вовлекаются в процесс приобретения и сильнее привязываются к результатам, если собрали сами стол и стулья. Попробуй сказать, что собранный стул кривоват - тебе не поздоровится. Дэн Ариели для подтверждения теории проводил несколько экспериментов, результаты двух из них я хотел бы привести здесь.\nЭксперимент 1. Негативная мотивация Эксперимент. Испытуемому предлагали собирать конструктор, начальная цена - 3$. После сборки и оплаты ему снова предлагали собрать конструктор, но уже за цену на 30 центов меньше. Испытуемые были поделены на две группы: первая видела, что собранный ими конструктор убирали в ящик, а перед участниками второй группы конструктор разбирали и отдавали им на повторную сборку.\nЦель. Выяснить, сколько людей дойдут до нулевой оплаты.\nРезультат. В группе 1, где собранный конструткор убирали, почти все доходили до конца - было 11 попыток. Во второй группе, где конструктор пересобирали каждый раз, в среднем было сделано 7 попыток.\nВывод. Люди не готовы выполнять работу до определенного порога оплаты, если результат работы бесполезен и они об этом знают. Испытуемые из второй группы видели, что они выполняют работу впустую, и останавливали эксперимент даже если последующая попытка принесла бы деньги.\nЭксперимент 2. Позитивная мотивация Эксперимент. Испытуемые собирают оригами двумя способами: с инструкцией и расчерченными линиями (А) и без инструкций, но с линиями и фото готового результата (Б). После сборки испытуемым предлагают купить фигуру.\nЦель. Посмотреть, сколько в среднем испытуемые готовы заплатить за результат своего труда в разных группах.\nРезультат. Испытуемые группы Б готовы были заплатить больше денег за получившуюся оригами, чем испытуемые группы А, даже если фигурки были хуже.\nВывод. Потребители готовы платить за продукты \u0026ldquo;сделай сам\u0026rdquo; больше, чем за готовые решения, но при этом в выводе отмечают: сборка должна быть достаточно сложной, чтобы человек гордился собой, и в то же время несильно сложной, чтобы она была по силам.\nНесмотря на то, что эксперименты нацелены на изучение иррационального поведения человека с экономической точки зрения, результаты исследований показывают мотивацию людей. Разработчики тоже вовлекаются сильнее, если выполняют не только задачи бизнеса, но и принимают участие в развитии продукта, обсуждая архитектуру и развитие системы. На бОльшей вовлеченности работает Agile, как утверждает Анна Обухова в своих исследованиях, и повышается чувство ответственности за продукт. А если разработчик принимает участие не только в реализации бизнес-задач, но и в обсуждениях архитектуры и процессов разработки, влияющих на всю компанию, то его привязанность повышается еще сильнее.\nКак поддержка code ownership облегчит жизнь вашим тимлидам Предоставьте разработчикам в вашей компании больше возможностей для роста. Пусть это будет не только менеджмент, но и архитектура. Это может быть и группа архитекторов, и позиция техлида в команде. Чем больше вклад разработчиков в продукт, тем больше они заинтересованы в его развитии. Интересно ведь посмотреть, чем обернется в продакшене то или иное архитектурное решение. Тимлидам не придется искать способы замотивировать людей, сама компания предоставляет людям такую возможность. Пусть тимлид фокусируется на том, чтобы помогать людям расти, а не на том, чтобы их мотивировать.\nЛюбая ли компания может обойтись без тимлидов? Спойлер: не каждая компания. К такому подходу нужно идти долго и осознанно. Главное - обращать внимание на обратную связь. Clever уделяет много внимания процессам и сбору метрик, работает тот или иной подход или нет. Если какая-то организация решит тоже отказаться от роли тимлидов к командах, то она должна учитывать минусы такой системы.\nДолгие обсуждения Так как процессы влияют на всю компанию, люди в ней обсуждают и анализируют долго. Иногда они прорабатывают каждую мелочь, собирают мнения заинтересованных и только потом принимают решения. Такой подход применяют и для кадровых процессов, и для правил разработки. Если в случае HR-процессов я понимаю долгие сроки и обсуждения, то по части разработки и кодинга такой подход не всегда оправдан.\nНа моем опыте было два случая, где обсуждения и принятие изменений занимало неоправданно долгое время.\nИстория 1. Фигурные скобки После начала работы на проекте я предложил доработать принятый стиль кода и добавить фигурные скобки после условной конструкции, даже если там всего одна строка кода. То есть, было так:\n// .. some code if (someCondition) DoSomethingImportant(); // .. also some code А хотелось, чтобы стало так:\n// .. some code if (someCondition) { DoSomethingImportant(); } // .. also some code Преимущество второго варианта незначительное, но не об этом речь. Предложение обсуждали чуть больше года и выкатили в списке еще нескольких улучшений стиля кода. Возможно, обсуждение этого не было приоритетом у группы AOG, а может участники изучали плюсы и минусы подхода столько времени.\nИстория 2. Код-ревью в Gitlab, а не в Jira Компания установила правило, что код-ревью должно проходить в Jira. Все комментарии к коду, которые один разработчик хочет оставить другому, он должен писать в соответствующей секции в Jira с указанием класса и номера строки. В репозитории Gitlab оставлять такие комментарии гораздо удобнее и замечания более наглядные. Когда я подключился к команде, я удивился код-ревью в Jira и предложил перейти в GitLab. Мои коллеги согласились, что подход неудобный, но объяснили, что так руководство Clever хочет достигнуть бОльшей прозрачности всей системы и код-ревью - в том числе. Лишь спустя полтора года архитекторы выпустили обновление правил, по которым теперь ревью кода мы должны делать в Gitlab.\nВысокий бас-фактор Bus factor (also known as truck factor, bus number, lottery fac- tor, etc.) was defined by Coplien as the minimal number of the developers that would have to be hit by a bus before the project is stalled\nБасфактор системы обусловлен скорее сложным монолитом, чем процессами компании. Тем не менее, он присутствует. Например, если ни один участник AOG не сможет сделать релиз вовремя, то никто не сможет - процесс сложный, задействовано много этапов. Я наблюдал системы, где релиз в продакшн - это всего лишь один мердж-реквест из сэндбокса в мастер ветку в Git. С этим справится любой. Здесь же коллега, который тоже захотел присоединиться к AOG, делал все этапы релиза под пристальным наблюдением других 5 раз, прежде чем делать это самостоятельно.\nПомимо этого, так как система монолитная, некоторые багрепорты могут починить или проверить на код-ревью только те, кто дольше работает в Clever - они знают подводные камни или исключительные случаи, которые были реализованы под обределенных клиентов системы. То же самое актуально и про тестирование.\nА куда расти? Однажды, когда сеньор набирается своего сеньорского опыта, он встает перед выбором: куда расти дальше? В тимлиды идти или архитекторы и в последующем в техлиды? Сложный выбор, определяющий карьеру. В Clever поступили мудро - теперь разработчики не выбирают.\nМаксимум карьерного роста разработчика в компании - это или архитектор группы AOG, или автоматизатор в группе QOG. Если кто-то захочет попробовать себя в качестве менеджера команды, то у него нет такой возможности - роли тимлида ведь нет. Продакт-менеджер - это не про кодинг или про архитектуру даже близко, поэтому мало разработчиков рассматривают такой вариант карьеры.\nРисковый найм Clever стремится нанимать тех, кто не нуждается в пристальном менеджменте. Чем самостоятельней сотрудник, тем лучше. Даже в форме перформанс-ревью есть пункт отдельный self-management и по нему оценивают людей. В командах в основном эксперты с опытом, которым дай задачу в понедельник - в пятницу она уже будет в колонке Done, продя этапы ревью и тестирования. Если в компании появится больше джунов, то разработка может заметно замедлиться: задачи от джунов ведь нужно проверять и тестировать, а это в случае монолита - процесс небыстрый. Некоторые команды готовы брать джунов, но подавляющее большинство - нет.\nЧтобы иметь возможность нанимать быстро, компания пользуется аутстаффингом. Провайдер дает пул кандидатов быстро, и менеджеры команд проводят собесы, будучи уверенными, что технические навыки человека уже проверены. Все ли компании готовы пользоваться аутстаффингом?\nЗаключение Clever шла к той структуре компании, которая у них сейчас, не один год. Старожилы компании, которые пришли сюда 5-6 лет назад, уже и не помнят времен, когда у них были тимлиды. Компания пришла к этому не сразу и осознанно, пойдя по пути автоматизации и переспределяя роли. Если ваша компания не готова отказаться от тимлидов, то отлично - это делать не обязательно. Более того, у Clever есть минусы, обусловленные ее структурой.\nЕсли вернуться к списку обязанностей тимлида, то увидим, что больше половины из них Clever перераспределяет между другими людьми:\nСобеседования (92%) Развитие людей (91%) Перформанс ревью людей (85%) ✔️ только фидбеки, процесс уже настроен Декомпозиция и постановка задач (82%) Управление техдолгом (77%) ✔️ Повышение качество продукта (72%) ✔️ Кодинг и инженерная работа (67%) Код-ревью (64%) ✔️ не один тимлид делает ревью Выбор технологий в команде (63%) ✔️ Управление зарплатами и грейдами (53%) Таким образом, у тимлидов, будь они в компании, остается больше времени на развитие людей, собеседования, менторство и кодинг. В конце концов, тимлид - это разработчик, который когда-то пришел в профессию писать код.\nУ Clever можно позаимствовать процессы, которые значительно упростят рутину и сократят риски ошибок. Если уделить большое внимание автоматизации, документированию процессов и прозрачности стратегии развития продукта, то тимлиды получат больше времени на людей в команде. Сняв эту нагрузку с руководителей команд, вы сделаете их счастливыми. Тимлиды смогут больше времени уделять развитию навыков людей, архитектуре модулей системе, менторству и, в конце-концов, кодингу - тому, за что они полюбили свое ремесло.\nДополнительные источники Исследования Исследование разработчиков 2022. Kolesa Hiring. Gallup Engagement. Gallup Статистика аутстаффинга и аутсорсинга Статьи Быть тимлидом, а не казаться. Habr Outstaffing Эффект IKEA Мотивация в Agile Выступления и доклады Егор Бугаенко о качестве продукта и скорости разработки Егор Бугаенко. \u0026ldquo;TDD вверх ногами\u0026rdquo; Егор Бугаенко. \u0026ldquo;Тестировщик ошибается только один раз\u0026rdquo; ","permalink":"https://mgorbatyuk.dev/blog/management/2023-05-20-do-we-really-need-teamleads/","summary":"О компании Компания Clever (далее просто компания или Clever) разрабатывает e-commerce платформу для бизнесов с 2005 года. Целевая аудитория - компании, которые продают лицензии программ. Под капотом интеграция платежных систем, репорты, отчеты по воронкам продаж, и все это в большом монолитном приложении. Если вы покупали Parallels для своего макбука в течение последних пары лет, то вы точно проходили через платежные страницы Clever.\nКомпания продуктовая, работает чуть больше ста человек. Из них больше половины - разработчики, организованные в команды по направлениям (юнитам).","title":"А нужны ли они вам, эти тимлиды?"},{"content":"Асинхронный режим - это когда работа одного разработчика не зависит от доступности его коллег и наоборот. Если вы хотите работать автономно, то вы должны стремиться к асинхронной работе. В условиях асинхронности легче и свою нагрузку планировать, и на Бали улететь работать с пляжа, и никто не ждет тебя, говоря на дэйлике, что заблокирован.\nТак ли легко прийти к такому режиму? Технически нет ничего сложного. В статье я дам несколько практик и советов. Однако одному нельзя построить вокруг себя атмосферу асинхронности в то время, когда остальных хлебом не корми, а дай только созвониться \u0026ldquo;на пять минут по маленькому вопросу\u0026rdquo;. Придется учить асинхронности и коллег тоже, хотят они этого или нет. Ниже я поделюсь парой рекомендаций и аргументами, с помощью которых стоит попробовать убедить коллег в их пользе.\nРабота с Jira 1. Храните информацию в Jira Всю информацию по задачам пишем в Jira: критерии приемки, пояснения, линковка с другими задачами. Помимо бизнес-описания, я веду собственные заметки по задаче в любом редактируемом поле, например, комментарии или дополнительные поля. Обычно я записываю полезную информацию по задаче, примененные SQL команды, скриншоты выходных таблиц, если требуются. Когда я вернусь к задаче, мне не нужно вспоминать все те действия, что я проделывал - все уже записано.\nПривычка вести заметки поможет, когда вы вернетесь к задаче спустя время или когда нужно посоветоваться с коллегой. При подготовке вопроса или созвона у вас уже есть вся справочная информация, и коллега сможет тоже с ней ознакомиться.\nКак убедить коллег Покажите на примере пользу записей - напишите заметки по задаче в джиру и скажите коллегам: \u0026ldquo;Смотрите что придумал! Так я не забуду спустя время, что делал для решения задачи\u0026rdquo;. Если в вашей команде только продакт-менеджер пишет задачи, а другим запрещает, то попробуйте так убедить его так: \u0026ldquo;А что будет, если вы в отпуске или заболели? Зачем мне дергать вас, хотя я могу сам создать багрепорт в джире и описать шаги для воспроизведения? Так ведь вам будет спокойнее, что и баг или задача будет зафиксирована, и вы сможете спокойно отдохнуть. А если мой текст недостаточно точный, то дополните уже потом сами\u0026rdquo;.\nВо время презентации подхода рассказывайте о той пользе, которую получит ваш собеседник, а не вы, и тогда будет больше шансов его убедить.\n2. Задавайте вопросы в Jira Письменное общение по проекту - корень асинхронной работы. Без этого не достичь асинхронности никогда. Суметь задавать вопрос - это все равно что пройти больше половины пути навстречу решению. Если кажется, что голосом рассказать легче что-то, то насильно себя остановите и попробуйте задать вопрос: \u0026ldquo;почему на звонке будет легче?\u0026rdquo;. Уметь передать мысль лакончино и структурировано - навык, который стоит развивать с самого начала карьеры. Хочется созвониться с коллегой и рассказать ему идеи тогда, когда в тексте передать информацию лакончино никак не получается. Учитесь краткости.\nБеда в том, что подобный звонок - неуважение ко времени собеседника. Вы уверены, что вам легче обсуждать что-то голосом, но уверены ли вы в том, что коллеге тоже легче воспринимать вашу идею \u0026ldquo;здесь и сейчас\u0026rdquo; на звонке? Нравится ли вам самим, когда отвлекают от задачи \u0026ldquo;срочными вопросами\u0026rdquo;?\nКак убедить коллег Пишите вопросы в мессенджеры и Jira. Прикладывайте скриншоты, если текста недостаточно. Пишите, даже если не хочется писать. Пишите, даже если \u0026ldquo;легче голосом объяснить\u0026rdquo;. Пишите, даже когда коллега сидит за соседним столом в офисе. Чем больше будете писать, тем быстрее научитесь лаконично формулировать мысли.\nКогда коллега спрашивает о свободном времени на колл, то спросите в ответ, по какому вопросу нужен созвон. Скажите, что прямо сейчас нет возможности, но вы обязательно отпишетесь в Jira или в мессенджере. На ближайших ретро отмечайте, что общение в комментариях в Jira помогло вспомнить о критериях приемки, которые забыли. Пусть коллеги увидят, как написанная информация помогает вам и им.\n3. Ставьте задачи в Jira Ставьте задачи другим Продакт-менеджер - не единственный, кто имеет право ставить задачи. Любой разработчик - от джуна до лида - тоже должны уметь делать это. Наткнулся на баг? Зарегистрируй баг-репорт и напиши шаги для воспроизведения. Нужна помощь девопса? Поставь задачу, напиши там что требуется. Знаешь, как разбить крупную фичу на несколько задач? Создавай подзадачи со собственными критериями приемки. Умение объяснить письменно то, что хочешь от других - важный навык, который пригодится всем. Емейлы, письменное общение, документация - все это требует умения лаконично выразить мысль, и постановка задач другим - отличный тренинг.\nКогда задача поставлена в Jira, вам не нужно ждать коллегу, когда он начнет рабочий день. Не нужно ждать и свободный таймслот продакта или тимлида, чтобы обсудить проблему. Если уверены, что поведение системы неправильное - опишите в задаче ожидаемое. Если не уверены, то пишите черновик задачи в личку тимлиду или продакту и попросите совета, стоит ли регистрировать проблему в бэклоге. Таким образом, вы не только научитесь эффективно передавать информацию, но и сэкономите время себе и коллегам. Помимо прочего, вы покажете себя проактивным членом команды, что точно отметят на пересмотре зарплаты.\nПросите ставить задачи вам Представим ситуацию, что вы - бэкендер, а коллега - фронтендер. Вдруг он пишет в слак о том, что не работает какой-то эндпоинт или ответ бэкенда не такой, каким он его ждет. Напишите коллеге, что ждать ответа не стоило, можно просто создать багрепорт и сразу назначить на вас. Создавать багрепорты несложно, я описан необходимое тут. Создав задачу для вас, фронтендер может смело ставить свою задачу в блок и приступать к другой задаче.\nТаким образом, у вас будет список задач, которые нужно сделать. Никто не ждет вас, чтобы созвониться и показать. Показать можно и в скриншотах, и в записи экрана, и звонок для этого не нужен. Коллеге польза от задачи в том, что он создает баг-репорт в удобное для себя время и не ждет свободный таймслот у вас, у проектного менеджера или тимлида. Даже если фронтендер что-то делает неправильно, то вы, когда возьмете его задачу в работу, в комментарии напишите, в чем его ошибка была. Все довольны, вы с фронтендером работаете асинхронно.\nКак убедить коллег Если нет прав создавать задачи в Jira, то с тимлидом требуйте у продакт-менеджера такое право. Мотивируйте тем, что хотите регистрировать баг-репорты и подзадачи фич. Пробуйте сами создавать задачи для других и скидывайте тимлиду и/или продакту на аппрув - пусть просмотрят ваш текст и подтвердят задачу как есть или помогут подкорректировать.\n4. Ведите документацию Схема взаимодействия модулей в системе, список используемых библиотек, какие-то глобальные фичи приложения - все это стоит перенести из головы в документацию. Писать можно в Confluence или в markdown-файлах в репозитории. Чем меньше рассказываете устно коллеге о проекте, тем лучше. Пусть читает документацию и задает уточняющие вопросы. Обязательно в комментариях, чтобы было легче дополнить документацию.\nКогда описаны модули, спускайтесь к фичам и описывайте уже их. Например, вы пишете импорт пользователей на бэке. По завершению работы дайте всю информацию в Jira: какие события возникают в процессе работы, структура входящего запроса эндпоинта, что-то полезное коллегам. Если добавите пример запроса в Postman-коллекцию, то тиммейты скажут вам спасибо. Если узнали какой-то хак, с помощью которого можно протестировать задачу - тоже добавьте, пусть все о нем знают.\nЧем больше информации сразу вынесите в Jira, тем меньше тиммейты будут от вас зависеть, а значит и отвлекать будут меньше. Зависеть коллеги должны от информации, а не от людей.\nКак убедить коллег Начинайте с себя - ведите записи по модулям, которых коснулась ваша рука. Изучили модуль - опишите его назначение и внутреннее устройство. Обсудили с коллегой архитектуру - запишите выжимку в вики или в Jira. Покажите коллегам, как документация вам помогает.\nЗаключение Полностью асинхронный режим работы построить не получится, но стремиться к этому нужно. Митинги для синхронизации статусов нужны, а нетривиальную проблему объяснить действительно проще на созвоне, особенно когда нужен совет нескольких экспертов. Когда возникнет необходимость что-то спросить у коллеги или рассказать ему, то в первую очередь подумайте о письменном формате, а не устном. Уточняющие вопросы будут, но пусть лучше собеседник сначала ознакомится с информацией, может что-то сам поищет дополнительно, а уже потом поспрашивает вас. Если, конечно, вопросы еще останутся.\nВ стремлении установить асинхронный режим работы главное - не забыть про принципы. Стойте на своем до конца. Если вы сами отступитесь от них, то и коллеги не будут серьезно относиться к ним.\nОбдумайте формат текущих встреч и порассуждайте, а можно ли заменить их емейлами и комментариями в Jira? Позовите тимлида, заведите с ним дискуссию. Пусть он тоже задумается над этой идеей. Вдвоем менять формат работы будет проще. Здесь точно можно сказать, что один в поле - не воин.\n","permalink":"https://mgorbatyuk.dev/blog/management/2023-05-04-async-work/","summary":"Асинхронный режим - это когда работа одного разработчика не зависит от доступности его коллег и наоборот. Если вы хотите работать автономно, то вы должны стремиться к асинхронной работе. В условиях асинхронности легче и свою нагрузку планировать, и на Бали улететь работать с пляжа, и никто не ждет тебя, говоря на дэйлике, что заблокирован.\nТак ли легко прийти к такому режиму? Технически нет ничего сложного. В статье я дам несколько практик и советов.","title":"Как работать асинхронно, когда все вокруг хотят созвониться?"},{"content":"В Auth0 есть два способа получить токен:\nСоздать аккаунт для пользователя Создать m2m клиент с определенными правами. Разработчики Auth0 дали возможность хранить дополнительную мета-информацию в аккаунтах и клиентах. Если в аккаунте человека нет ограничения на объем данных - в поле можно записать текст размером до 16 мб - то для m2m у нас в распоряжении только 10 полей по 255 символов каждый. Даже на небольшой массив места не хватит.\nВ проекте мы активно применяем метаинформацию аккаунтов для формирования токена, такие же правила хотим применить и для m2m клиентов. Хочу напомнить, что формирование токена можно кастомизировать с помощью кода на JS, который будет вызван как коллбек на события в Auth0 Flows. К сожалению, ограничения не дают нам такой возможности. Какие у нас есть варианты:\n1. Не хранить в токене m2m никакой допинформации. На бэке можно было бы получать дополнительную инфу по межсервисному запросу. Такое решение усложнит код: придется часть или дублировать, или выносить в общую библиотеку для микросервисов. К тому же, каждый вебзапрос к сервису породит дополнительный запрос на другой микросервис - в итоге перформанс будет снижен и появится очень жесткая зависимость от сервиса данных. Не самое удачное решение.\n2. Сжать данные в полях, чтобы умещались в ограничение в 255 символов. Тут не придумаешь универсального решения - пришлось бы поддерживать собственные алгоритмы сжатия. Но даже после сжатия велик шанс, что полученная строка уместится в поле.\n3. Сделать запрос на бэкенд за допинформацией в коллбеке Auth0 Если нет возможности хранить данные в Auth0, так пусть Auth0 получает данные с нашего бэка. Примерная структура кода в Auth0 flow:\nconst axios = require(\u0026#39;axios\u0026#39;); const getData = async function(clientId) { const options = { method: \u0026#39;get\u0026#39;, url: \u0026#39;https://api.example.net/some-data/\u0026#39; + clientId, headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;x-api-version\u0026#39;: \u0026#39;3\u0026#39; } }; const response = await axios.request(options); // Стоит проверить статус ответа и валидность данных console.log(response.status); console.log(response.data); // Здесь мы берем данные из ответа бэкенда return response.data.permissions } // Код коллбека Auth0, создаваемый автоматически exports.onExecuteCredentialsExchange = async (event, api) =\u0026gt; { const clientId = event.client.client_id; const permissions = await getAccessData(clientId); // Записываем данные в токен const namespace = \u0026#39;http://schemas.xmlsoap.org/ws/2005/05/identity/claims\u0026#39;; api.accessToken.setCustomClaim(namespace + \u0026#34;/permissions\u0026#34;, permissions); }; После обсуждения мы решили, что это самый оптимальный вариант:\nТокен m2m выписываем с большим лайфтаймом, поэтому обновлять его часто не нужно. Сколько бы ни было завтра доп.данных, лимит на метаинформацию в Auth0 на нас не влияет. Тут важно учесть, как часто токен будет формироваться и каков его лайфтайм. Для пользователей такая схема даст гораздо больше проблем, ведь так время жизни токена - всего 1 час, да и пользователей гораздо больше, чем m2m клиентов.\nВ случае, если эта схема значительно повлияет на работу системы и нагрузка на микросервис данных будет высокой, то попробуйте кеширование и/или горизонтальное масштабирование сервиса.\n","permalink":"https://mgorbatyuk.dev/blog/development/2023-05-08-auth0-m2m-limit-solution/","summary":"В Auth0 есть два способа получить токен:\nСоздать аккаунт для пользователя Создать m2m клиент с определенными правами. Разработчики Auth0 дали возможность хранить дополнительную мета-информацию в аккаунтах и клиентах. Если в аккаунте человека нет ограничения на объем данных - в поле можно записать текст размером до 16 мб - то для m2m у нас в распоряжении только 10 полей по 255 символов каждый. Даже на небольшой массив места не хватит.\nВ проекте мы активно применяем метаинформацию аккаунтов для формирования токена, такие же правила хотим применить и для m2m клиентов.","title":"Как обойти ограничение для m2m клиентов в Auth0"},{"content":"От автора блога Посмотрел доклад Анастасии Калашниковой \u0026ldquo;Правила осознанной карьеры разработчика\u0026rdquo; по наводке блоггера. Тема мне показалась интересной, орешил сделать конспект. Рефлексия для меня - это умение остановиться и спросить себя, а не хурму ли я делаю и какие будут последствия в будущем. Действительно, во время работы легко увлечься рутиной и забыть рефлексировать. Тем не менее, нужно останавливаться, ведь это еще и часть обучения. Мало послушать доклад, важно еще и понять, не зря ли его ты послушал и какие полезные советы и практики можно извлечь из него, а тут без рефлексии никуда.\nКартинка взята из другого доклада на подобную тему\nРекомендую к просмотру оригинальный доклад, ну а текст тут останется и для меня конспектом, и для читателей, если кто-то захочет сначала ознакомиться с тезисами выступления.\nКонспект Что дает осознанность Осознанность дает фокус на самого себя, на свои чувства, кто я, что я и зачем это все делаю. Осознанность помогает в построении карьеры - человек знает, куда двигается и зачем, и отсюда он понимает, какие шаги нужно предпринимать. Если приглашение в компанию не отвечает твоим целям в карьере. Зачем мне идти в компанию N, если работа там меня никак не приблизит к цели. Профилактика выгорания. Когда я фокусируюсь на себя и понимаю, что я сейчас чувствую, тогда я могу выстраивать границы с коллегами. Фокус на себя и свое эмоциональное здоровье. Здоровая самооценка. Когда я осознаю свои чувства, я могу избежать синдром самозванца - я понимаю свои навыки и требования ко мне. Что такое осознанность Я знаю свои переживания и чувства, я знаю, что со мной происходит. Я себя могу спрашивать о том, что со мной и что у меня внутри. Я знаю свое настоящее. Не боюсь совершать ошибки сейчас, а мои ошибки в прошлом не влияют на мои действия в настоящем. Я наблюдаю свою деятельность. Я могу выходить из состояния потока и смотреть на то, как я занимаюсь разработкой. Умение задать себе вопросы типа \u0026ldquo;а как я пишу код?\u0026rdquo;. Нужна рефлексия не только про свои чувства, но и про свою деятельность. Что с осознанностью в айти \u0026ldquo;Золотая клетка\u0026rdquo;. Человеку так хорошо получать высокую зарплату и социальные бенефиты, что я не способен увидеть, что моя работа мне не нравится. Люди не могут ответить, что им нравится в их работе даже. Если у тебя есть материальные блага, но ты несчастен, то однажды тебе эти блага и не понадобятся - это путь к выгоранию. Тот факт, что предложение вакансий выше спроса, то большинство разработчиков считаюь, что о карьере и не нужно задумываться. Они считают, что им не нужно думать о завтрашнем дне, ведь как только они выложат свое резюме, они получат 100+ откликов. Порой даже можно заметить, что токсичные люди рассуждают так: \u0026ldquo;зачем мне работать над своей токсичностью, если я нарасхват? Какая разница, что моей команде со мной нехорошо?\u0026rdquo;. Появляется уверенность во вседозволенности - как бы я себя не вел, я найду новую работу. Тем не менее, сарафанное радио работает и отзывы о человеке когда-нибудь его настигнут. в IT рынке \u0026ldquo;все знают, что тебе нужно\u0026rdquo;. Рекрутеры, эйчары, менеджеры проектов как будто бы знают, как тебе лучше жить. У них у всех свои KPI, и они всеми силами пытаются убедить разработчиков, что работать они должны именно в этой компании и в этой команде. Осознанность поможет понять свои нужды и цели \u0026ldquo;Нельзя быть неуспешным\u0026rdquo;. IT про успешных людей, культура разработки как будто диктует нам правила успеха: работа на Бали или в комфортабельном офисе со штатным психологом и бильярдом. Однако не всем нужен фриланс, не всем нужна релокация, не всем нужен PS в офисе. Если у тебя низкий уровень осознанности, то ты ведешься на эти паттерны успешного успеха и живешь не своей жизнью. Нужно уметь задавать себе вопрос: \u0026ldquo;а нужно ли мне это?\u0026rdquo; Как развивать осознанность Нужно уметь останавливаться и задавать себе вопрос: \u0026ldquo;а не хурму ли я делаю?\u0026rdquo;. Нужно уметь рефлексировать по поводу графика работы, загруженности на проекте и на выходных и иногда банально задавать себе вопрос: \u0026ldquo;а отдыхаю ли я вообще?\u0026rdquo;. Работа по 12 часов в день и просмотр обучающих докладов в выходные - это прекрасный путь к выгоранию, если при этом не отдыхать. Просто скажи себе \u0026ldquo;стоп\u0026rdquo; и посмотри, комфортно ли тебе сейчас. Развивай позицию внутреннего наблюдателя. Умей смотреть на себя со стороны, умей задать себе вопрос, что ты сейчас чувствуешь. Внимание к эмоциям. Обращай внимание на то, что тебя бесит и раздражает. Посмотри на свое отношение к тому, что ты - человек, у которого иногда возможности ограничены. Откажись от критике, не говори себе, что ты плохой. Не нужно себя убеждать, если если бы ты еще больше был усерден, то было бы у тебя больше всего. Не нужно себя критиковать за то, что есть у тебя сейчас. Осознанность в карьере Осознавай изменения, которые происходят. Тогда карьера не будет хаотичной. Для себя найдти ответ на вопрос, кем ты видишь себя через пять лет. Понимай вектор развития карьеры. Если ты решил, что через два года станешь тиимлидом, то тогда ты будешь учить больше информации о менеджменте, а не очередной фреймворк или язык программирования Противостояние манипцляциям. Когда ты осознанно подходишь к своей карьере, ты понимаешь, что ты умеешь, что можешь делать и сколько стоит твое время, и на собеседованиях манипуляции не будут работать на тебе. Ты сможешь и сам себе, и другим объяснить, почему ты стоишь вот столько-то. На что обращать внимание Что происходит и как я себя чувствую. Что есть моя мотивация и моя ценность. Нужно понимать свой фокус и мотивы. Вопросы самому себе Почему я меняю работу? \u0026ldquo;Потому что устал\u0026rdquo; - это так себе ответ. Копай глужбе, задавай себе \u0026ldquo;а почему?\u0026rdquo;. Какие у меня цели? При смене работы, при выборе компании. Если единственное, что устраивает - это зарплата, и при этом все остальное гнетет, то очень скоро и высокая зарплата не будет делать счастливым. Умей задать себе вопрос, а что кроме денег тут я могу еще получить. Какие сроки я вижу для достижения целей карьеры? Без сроков цели имеют мало значения, ведь модно стремиться стать техдиром или за пару лет, или до пенсии, и это будет разный подход к карьере. Что мне важно в руководителе, команде, продукте? Что мне нравится тут и что мотивирует. Отвечая на вопросы, ты будешь рефлексировать больше, и таким образом будет происходить некая профилактика выгорания. Можешь ли ты в этой команде развивать навыки, которые приведут тебя к поставленной цели? Интересные вопросы из зала Как правильно просить повышение зарплаты? Почему вы отказывали в такой просьбе? Важно понимание того, почему я хочу повышение и почему мой опыт стал стоить больше, чем стоит сейчас. Ответ на вопрос типа \u0026ldquo;Вася получает больше\u0026rdquo; - не повод. Для того, чтобы разговор с руководителем был конструктивен, вы берете свой опыт, смотрите уровень зарплаты других разработчиков с таким опытом и уже это преподносите как аргумент пересмотра зарплаты. Бывает так, что мы думаем, что стоим больше, но руководитель так не считает. Тогда в ответ стоит спросить, что нужно сделать мне для повышения зарплаты и в какие сроки. Тогда руководитель уже должен будет объяснить, почему он тебе отказывает сейчас. Если вы решите следовать этому и достигните поставленным руководителем целей в озвученные сроки, то тогда уже руководитель не сможет не повысить зарплату.\nКак бороться с собственной токсичностью? Токсичность часто связана с самощущением себя как жертвы, и тогда токсичный человек пытается привить чувство вины оппоненту. Если мне плохо, то должно быть вокруг все плохо. Если это желание сидит очень глубоко внутри, то это вопрос терапии. Человек совершает зло, потому что сам ранен и где-то у него болит. Нужно разобраться в себе.\nКак понять, действительно ли я в золотой клетке или я бешусь с жиру? Если вы просто беситесь с жиру, значит вам это в кайф и вы просите еще. Но если вы в золотой клетке, то вам некомфортно, и это чувство некомфортности постоянно гложит.\nЭйчары часто спрашивают кандидатов, какая зарплата у них сейчас или какой уровень комфортной зарплаты. Как узнать, какая вилка по вакансии? Рекомендую идти по пути осознанности. Оцените свой опыт и определите, сколько вы стоите как разработчик. И там уже без разницы, какая верхняя планка у компании по вакансии. Просто говорите, сколько вы хотите, и без разницы какая верхняя планка у них там. Если у компании есть возможность платить больше, значит вы увидите это спустя время и попросите больше.\nРефлексия - это софтскилл? Каждый относит к софтскиллам то, что считает нужным. Рефлексия нужна, чтобы понимать, на каком уровне у меня тот или иной навык. Исходя из этого, рефлексия - это базовый навык. Можно сказать, что это даже навык гигиены и относится к психологическому здоровью.\nЕсли чувствуешь, что теряешь контроль над ситуацией, то как вернуть контроль? Если вы понимаете, что теряете контроль, то так и скажите собеседнику, что сейчас на взводе и что диалог нужно отложить. Если же вам свойственно вспылить и пойти в атаку, то возможно вам свойственно накопление точечных раздражений, которые потом \u0026ldquo;взрываются\u0026rdquo;. Не копите в себе эти мелкие раздражения. В такие моменты можно погладить себя, посчитать до десяти, попить воды. Если все случилось и вас бомбанула, а вам важны эти отношения, здесь нужно дать себе какое-то время остыть и не пытаться \u0026ldquo;убежать\u0026rdquo; от проблемы. Восстановитесь сначала, а затем проанализируйте ситуацию и попытайтесь предпринять шаги для недопущения такой же ситуации в будущем.\nНормально ли совсем не воспринимать критику? Чем выслушивать критику, может лучше ее игнорировать и разбираться самому? В IT часто есть проблема с обратной связью. Часто ругают, но позитивные вещи не говорят. Такое демотивирует, не хочется взаимодействовать с человеком. Тем не менее, обратная связь важна для развития навыков. В случае токсичной критики так и скажите, что критика неконструктивна и будем ли мы делать что-то, чтобы она стала конструктивной.\nЧеловек получает удовлльствие от результата, но не от процесса. Нужно что-то менять? Нет, не нужно. Людям разные вещи нравятся в жизни. Если вы прям ненавидите процесс, то тогда да, нужно что-то анализировать, но если понимаете, что в работе есть нечто неприятное, но в целом более менее хорошо, то тогда это нормально. В каждой работе есть такое.\nЧто можете посоветовать людям на удаленке? Разделяйте рабочую и домашнюю зону, рабочее и домашнее время, сохраняйте границы. Не смотрите развлекательные видео во время работы и не кушайте за рабочим столом. Соблюдайте тайминг в работе.\nКак ужиться с самовлюбленными эгоистами, если ты не один из них? Нужно себе задать вопрос, а зачем вам с нимии уживаться, а также почему вы решили, что они самовлюбленные эгоисты. Бывает так, что вы видите в других то, что в вас самих есть. Задайте себе вопрос, почему вы их считаете эгоистами.\nЧто почитать? \u0026ldquo;Личные границы\u0026rdquo;, издательство МИФ. Много упражений на развитие осознанности. \u0026ldquo;Вся правда обо мне\u0026rdquo;. Есть упражнения, направлена на самопозание и проработку слабых сторон. ","permalink":"https://mgorbatyuk.dev/blog/different/2023-04-02-deliberate-carreer/","summary":"От автора блога Посмотрел доклад Анастасии Калашниковой \u0026ldquo;Правила осознанной карьеры разработчика\u0026rdquo; по наводке блоггера. Тема мне показалась интересной, орешил сделать конспект. Рефлексия для меня - это умение остановиться и спросить себя, а не хурму ли я делаю и какие будут последствия в будущем. Действительно, во время работы легко увлечься рутиной и забыть рефлексировать. Тем не менее, нужно останавливаться, ведь это еще и часть обучения. Мало послушать доклад, важно еще и понять, не зря ли его ты послушал и какие полезные советы и практики можно извлечь из него, а тут без рефлексии никуда.","title":"Осознанный подход к карьере. Конспект доклада"},{"content":"Решил обновить домен для моего блога и сменить его на mgorbatyuk.dev. Мой блог хостится на GitHub Pages, поэтому смена домена не заняла много времени. Есть подробная документация, но мне стало интересно, есть ли удобный туториал а-ля \u0026ldquo;делай это, затем это, потом то, далее сё, и получишь результат\u0026rdquo; без дополнительных пояснений. Спросил у ИИ, и он дал такой туториал. Круто, что можно задавать уточняющие вопросы.\nВ работе я постоянно пользовался GitHub Copilot и до релиза Chat GPT, мне он помогал генерировать разные утилитарные методы, которые не зависили от бизнес логики: хэширование пароля, чтение из файла, валидации, etc. Особенно много мне копайлот помог с разработкой приложения на Angular: едва ли не весь код работы с файлами и формами там был написан им, а я лишь проверял работоспособность и больше думал о бизнес-логике. Теперь появился чат с ИИ, который помогает начать осваивать новые знания - я спрашиваю, с чего мне стоит начать изучение, и он подскажет ресурсы.\nПоявляются статьи, где авторы рассуждают о том, заменит ли ИИ разработчиков целиком и превратимся ли мы в Senior GPT Enjoyer Operator (1, 2, 3, etc). Тут я согласен с мнением vas3k:\n\u0026hellip; результаты работы нейросети всегда нуждаются в «человеческом» ревью. Даже странно, что кто-то использует это как аргумент против. Мол, я попробовал эту вашу нейросеть, она мне выдала всё неправильно, ну что это за будущее такое, переделывайте\u0026hellip;. Вот их заменят первыми\nРезультаты, выдаваемые ИИ, нужно перепроверять, ибо они сгенерированы на основе уже написанного кем-то контента, но ведь не факт, что этот контент - верный. Сколько есть в интернете статей с доказательствами теории плоской земли? Поймет ли ИИ, что все эти статьи - некорректные и антинаучные? Вряд ли. Нужен будет взгляд человека, чтобы понять, корректен ли ответ ИИ.\nИсточник\nПусть ИИ автоматизирует рутинную и утилитарную работу, и тогда у разработчика будет больше времени на развитие своих знаний:\nчтение книг по архитектуре систем, чтобы понимать, где ИИ дает подходящие и неподходящие советы, изучение паттернов и практик Clean Code, чтобы рефакторить код, написанный ИИ, углубление знаний по смежным темам типа Data Science и Machine Learning, чтобы потом принимать участие в разработке не очередной ecommerce платформы, а более продвинутого ИИ. Посмотрим, к чему приведет развитие GPT. А чтобы ИИ вас не заменил в первую очередь, стоит рассматривать GPT как ассистент в работе, а не врага, и больше времени уделять образованию.\n","permalink":"https://mgorbatyuk.dev/blog/opinion/2023-03-26-chat-gpt-as-assistant/","summary":"Решил обновить домен для моего блога и сменить его на mgorbatyuk.dev. Мой блог хостится на GitHub Pages, поэтому смена домена не заняла много времени. Есть подробная документация, но мне стало интересно, есть ли удобный туториал а-ля \u0026ldquo;делай это, затем это, потом то, далее сё, и получишь результат\u0026rdquo; без дополнительных пояснений. Спросил у ИИ, и он дал такой туториал. Круто, что можно задавать уточняющие вопросы.\nВ работе я постоянно пользовался GitHub Copilot и до релиза Chat GPT, мне он помогал генерировать разные утилитарные методы, которые не зависили от бизнес логики: хэширование пароля, чтение из файла, валидации, etc.","title":"Chat GPT - это ассистент, а не замена"},{"content":"TLDR: Я считаю, что на проекте за качество ответственны только разработчики, значит они должны думать больше о качестве, чем о бизнес-ценности. Но есть нюанс.\nDisclaimer: под термином \u0026ldquo;разработчики\u0026rdquo; в посте я имею в виду и программистов, и тестировщиков.\nCode quality Разработчики должны понимать, что деньги для них берутся не из тумбочки, но и проект вряд ли будет приносить деньги, если стабильность оставляет желать лучшего. В интернете масса статей, где пишут, что нужно соблюдать баланс между качеством и скоростью доставки на продакшн, но такой совет звучит как \u0026ldquo;варить суп до готовности\u0026rdquo; - непонятно, как искать этот баланс.\nРазработчик должен думать о качестве в первую очередь, при этом понимая цену этого качества. О бизнес-ценности и time-to-market есть кому подумать: продакту, проектому менеджеру, бизнес-аналитикам, стейкхолдерам. О качестве системы же, кроме разработчиков, никто и не подумает. Странно полагать, что оно появится само по себе.\nКонечно, мало кто из продактов согласится, если команда ему скажет:\n- Хорошо, мы сделаем фичу за неделю вместо двух, но тогда мы не ручаемся за качество, а значит пользователи найдут баги вместо нас.\nОтветственность разработчиков - это качественная реализация по умолчанию. Автотесты, адаптивная архитектура - все это уже должно быть заложено в оценке, которую дают разработчики. Если же заказчику необходима фича как можно раньше, то он должен быть в курсе рисков, и ответственность разработчиков в этом случае - суметь донести риски. Желательно в письменном виде в комментариях к задаче в Jira.\nBusiness value У продакт оунера другой фокус. Он думает о новых фичах и о том, как быстро проверить гипотезы. Он тоже хочет сделать все качественно, но все же сделать быстрее для него в приоритете. Поэтому пусть разработчики фокусируются на качестве, а баланс будет найден в обсуждении задачи на планировании.\nЯ не говорю о том, что разработчик не должен думать о бизнесе совсем. Как раз понимание экономики и механизмов появления денег у инвестора или заказчика делают разработчика хорошим специалистом - он понимает, где и как стоит срезать углы, а где - написать устойчивое надежное решение.\nAgile manifesto Посмотрим на принципы Agile Manifesto:\nBuild projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. Манифест призывает бизнес прислушаться к советам и нуждам разработчиков.\nAgile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. Постоянный прогресс в разработке не достичь, если конечные пользователи будут постоянно репортить о багах, так как у команды не было ресурсов отловить эти ошибки до деплоя на продакшн.\nContinuous attention to technical excellence and good design enhances agility\nThe best architectures, requirements, and designs emerge from self-organizing teams.\nAt regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.\nЭти пункты говорят о качестве кода и архитектуры. Для повышения качества у нас есть CI/CD, паттерны проектирования, практики Clean Code и умные книги, которые советуют нам, как писать приложения так, чтобы они не ломались каждый раз, когда на сайт заходит более двух пользователей одновременно.\nXP principles В eXtreme Programming тоже есть несколько принципов, акцентирующих внимание на качестве кода:\nTen-Minute Build\nContinuous Integration\nБилд системы для проверки работоспособности не должен занимать больше десяти минут. Чем меньше, тем быстрее новые фичи будут доступны пользователям и тем раньше баги будут починены. Авторы XP призывают нас оптимизировать тесты, сокращать общее время их выполнения и автоматизировать процесс деплоя.\nTest-First programming\nXP рекомендует попробовать парное программирование. Это никак не увеличивает скорость доставки ценности пользователям, ведь двое разработчиков работают над одной фичей, однако такая практика позитивно влияет на качество системы.\nIncremental Design\nНас призывают прорабатывать архитектуру системы \u0026ldquo;по надобности\u0026rdquo;, не закладывая слишком абстрактные конструкции заранее. Лучше чаще обновлять систему, чем долго закапываться в архитектуре и рефакторинге.\nИ манифест Agile, и список практик XP говорят разработчикам, что продукт мы пишем не в вакууме, а для заказчика, и бизнес-ценность мы забывать не должны.\nCode quality first не только для проекта Если разработчик фокусируется на качестве, то польза будет не только проекту, но и ему самому. Изучая паттерны проектирования и best practice в архитектуре, ты научишься строить системы так, чтобы они были надежными и подходящими запросам заказчиков. Чем больше разработчик заботится о качестве, тем:\nвыше его рейт, меньше переписываний кода, меньше усилий затрачивает на чистый код - писать сразу хорошо становится привычкой, меньше ошибок доходит до продакшна - пограничные кейсы покрыты тестами. Clean Coder Роберт Мартин даже не обсуждает, писать тесты для кода или не писать. Первая глава называется \u0026ldquo;Профессионализм\u0026rdquo;, и в ней автор затрагивает сначала качество кода, а затем фокус на бизнес-ценностях. Он пишет о том, что единственный способ проверить, что код работает - это написать тесты к нему.\nКаждая написанная вами строка кода должна быть протестирована. Точка.\nРоберт Мартин, \u0026ldquo;Идеальный программист\u0026rdquo;, стр 25.\nПри этом он заявляет, что \u0026ldquo;100% - это асимптотический предел\u0026rdquo;, который никак не достичь, но стремиться нужно. Мартин настаивает на том, что чтобы проект был протестирован с помощью автотестов, а значит разработчики должны уделять внимание качеству.\nДалее в главе пару страниц спустя Мартин пишет:\nПроблемы вашего работодателя – это ваши проблемы. Вы должны понимать их и постараться найти лучшие решения. \u0026hellip;представьте себя на месте своего работодателя и убедитесь в том, что разрабатываемые \u0026hellip; возможности действительно соответствуют его потребностям.\nРоберт Мартин, \u0026ldquo;Идеальный программист\u0026rdquo;, стр 33.\nСовет от GPT-4 Задавая вопрос в чате GPT-4, я не ожидал, что он выберет какую-то сторону. Ответ оказался таким же, какие советы дают чаще всего в подобных статьях: оба фактора важны, ориентируйтесь на нужды бизнеса, чтобы выбрать подходящую цель для фокуса в каждом отдельном случае. Тем не менее, один из советов ИИ был дельным:\nDevelopers should focus on both aspects, but the priority between them may depend on the specific context of a project.\nIn the early stages of a project or when dealing with tight deadlines, it might be necessary to prioritize delivering business value to meet customer needs and market demands. However, it\u0026rsquo;s important not to neglect code quality, as neglecting it could lead to technical debt, decreased developer productivity, and increased maintenance costs over time.\nЕсли вы работаете в стартапе, то фокусируйтесь на скорости для проверки гипотез, но чем взрослее проект, тем больше внимания нужно уделять качеству кода. Иначе стоимость поддержки превысит бизнес-ценность. Довольно рационально звучит.\nЗадай себе пару вопросов Когда работаешь над фичей, задай себе следующие вопросы:\nЕсть ли похожий функционал в системе? Есть способ переиспользовать код? Есть ли идеи похожего функционала в будущем? Возможно, стоит сразу привнести абстракции в код. Легко ли мне написать юнит-тесты для фичи? Продумывай архитектуру классов так, чтобы было легко писать тесты для них. Тяжело ли мне было разобраться с этим классом, могу ли я улучшить его как-нибудь? Оставляй код после себя лучше/чище, чем он был до твоих изменений. Стоит ли тратить время на абстракции и тесты, если мы пишем фичу для проверки гипотезы? Отвечая для себя на эти вопросы, ты сможешь понять, где будет тот баланс между качеством фичи и скоростью ее доставки. Учись отстаивать качество и объяснять заказчику все риски, если он настаивает на скорости. И не забывай, что время - это деньги, и не нужно ставить качество на пьедестал и жертвовать всем остальным ради него.\n","permalink":"https://mgorbatyuk.dev/blog/management/2023-03-20-code-quality-first/","summary":"TLDR: Я считаю, что на проекте за качество ответственны только разработчики, значит они должны думать больше о качестве, чем о бизнес-ценности. Но есть нюанс.\nDisclaimer: под термином \u0026ldquo;разработчики\u0026rdquo; в посте я имею в виду и программистов, и тестировщиков.\nCode quality Разработчики должны понимать, что деньги для них берутся не из тумбочки, но и проект вряд ли будет приносить деньги, если стабильность оставляет желать лучшего. В интернете масса статей, где пишут, что нужно соблюдать баланс между качеством и скоростью доставки на продакшн, но такой совет звучит как \u0026ldquo;варить суп до готовности\u0026rdquo; - непонятно, как искать этот баланс.","title":"Code quality first vs business value first"},{"content":" Disclaimer:\nСоветы ниже - вредные, доверять им не стоит.\nАнтипаттерны придуманы не мной. В статье я стараюсь дать примеры, на которых будет видно, почему такие подходы и назвали антипаттернами\nКод юнит-тестов - это не second-class код, его тоже нужно писать поддерживаемым, читаемым и понятным для остальных ребят в команде.\nКурсивом - вредный совет, обычным шрифтов - пояснение.\n0. Кукушка (Cuckoo, aka Stranger) Твой класс делает запросы к внешним системам? Отлично, проверь и вызовы тоже вместе с выходными данными. Кому хуже будет?\nПредставим, что у нас есть сервис пользователей, который делает запросы на внешний API:\n// src/user-service.ts import axios from \u0026#39;axios\u0026#39;; export interface User { id: string; name: string; } export class UserService { async get(userId: string): Promise\u0026lt;User\u0026gt; { const response = await axios.get(`https://api.example.com/users/${userId}`); return response.data; } } // tests/user-service.test.ts import chai from \u0026#39;chai\u0026#39;; import { expect } from \u0026#39;chai\u0026#39;; import * as sinon from \u0026#39;sinon\u0026#39;; import sinonChai from \u0026#39;sinon-chai\u0026#39;; import axios from \u0026#39;axios\u0026#39;; import { UserService } from \u0026#39;../src/user-service\u0026#39;; describe(\u0026#39;UserService\u0026#39;, () =\u0026gt; { chai.use(sinonChai); let axiosGetStub: sinon.SinonStub; beforeEach(() =\u0026gt; { axiosGetStub = sinon.stub(axios, \u0026#39;get\u0026#39;); }); afterEach(() =\u0026gt; { axiosGetStub.restore(); }); it(\u0026#39;should fetch user data using axios\u0026#39;, async () =\u0026gt; { const userId = \u0026#34;random-uuid\u0026#34;; const fakeData = { id: userId, name: \u0026#39;John Doe\u0026#39; }; axiosGetStub.resolves({ data: fakeData }); const result = await new UserService().get(userId); // Assertion expect(axiosGetStub).to.have.been.calledOnceWith(`https://api.example.com/users/${userId}`); expect(result).to.equal(fakeData); }); }) В примере мы проверяем не только выходные данные на соответствие ожидаемому результату, но и факт, что был вызван axios.get с правильными параметрами и урлом. Кажется, что все корректно, однако внутренняя логика работы метода и вызовы внешних сервисов должна быть ответственностью самого класса, а мы лишь проверяем аутпут метода. Класс может поменять вызовы, урлы, параметры, но все так же будет отдавать инстанс юзера. В этом случае тест станет красным, а разработчик не сразу поймет, что нужно делать: логику чинить или тест исправлять.\nУберите проверку axios, и тогда тест станет более надежным:\n// tests/user-service.test.ts it(\u0026#39;should fetch user data using axios\u0026#39;, async () =\u0026gt; { // Arrange // ... // Act // ... // Assertion expect(result).to.equal(fakeData); }); Есть еще одна вариация этого антипаттерна - \u0026ldquo;Forty-Foot Pole\u0026rdquo;. Так называют тесты, проверяющие функционал тех классов, которые лежат не за одним слоем абстракции глубоко внутри.\n1. Один тест на каждый метод (test-per-method) Тимлид просит тебя покрыть тестами новую фичу? Начни с тестов на каждый метод новых классов. А как начал, так и закончи. Тесты есть? Есть! Хватит их писать, достаточно, там еще задачи на доске есть.\nИметь по одному тесту на каждый метод рабочего кода - это хорошее начало, но так функционал системы и пограничные кейсы не проверишь.\n// src/testable-class.ts export class TestableClass { makeSomeLogic1(): number { // some logic goes here return 42; } makeSomeLogic2(): number { // some logic goes here return 43; } makeSomeLogic3(): number { // some logic goes here return 44; } } // tests/testable-class.test.ts import { TestableClass } from \u0026#39;./anal-probe-example\u0026#39;; describe(\u0026#39;TestableClass\u0026#39;, () =\u0026gt; { it(\u0026#39;makeSomeLogic1 returns 42\u0026#39;, () =\u0026gt; { const target = new TestableClass(); const result = target.makeSomeLogic1(); expect(result).toBe(42); }); it(\u0026#39;makeSomeLogic2 returns 43\u0026#39;, () =\u0026gt; { const target = new TestableClass(); const result = target.makeSomeLogic2(); expect(result).toBe(43); }); it(\u0026#39;makeSomeLogic3 returns 44\u0026#39;, () =\u0026gt; { const target = new TestableClass(); const result = target.makeSomeLogic3(); expect(result).toBe(44); }); }); Не останавливайся на первом шагу. Нужно проверять дальше пограничные кейсы и ошибочные сценарии, и тогда код будет более надежным, а ошибки будут найдены гораздо раньше, чем это сделают конечные пользователи системы.\n2. Анальная пробка (Anal probe) Архитектура классов неудобная, куча полей закрыто, но только по ним можно понять результат работы логики? Не беда, рефлексия или хаки помогут тебе проверить то, что скрыто внутри! Погугли, как можно проверять закрытые свойства класса в твоем ЯП и скорее добавь в тест ассерты.\nТестирование приватных полей, методов. Тест знает слишком много о тестируемом классе и лезет не в свое дело. Покажу на примере. Тут у нас тестируемый класс, который изменяет приватное поле:\n// src/testable-class.ts export class TestableClass { constructor(private value: string) {} public makeSomeLogic(): void { this.value += \u0026#39;, 1\u0026#39;; } } // tests/testable-class.test.ts import { TestableClass } from \u0026#39;./anal-probe-example\u0026#39;; describe(\u0026#39;TestableClass\u0026#39;, () =\u0026gt; { it(\u0026#39;value should be changed\u0026#39;, () =\u0026gt; { const target = new TestableClass(\u0026#39;example\u0026#39;); target.makeSomeLogic(); expect((target as any).value).toBe(\u0026#39;example, 1\u0026#39;); }); }); Анальной пробкой называют тесты, которые слишком много знают о классе, который тестируют, и лезут не в свое дело. В данном случае тест проверяет значение приватного поля. А что делать, если приватное поле уберут, а логика класса в целом не поменялась? Тест будет красным, придется переписывать.\nУ классов и интерфейсов системы не зря есть публичные свойства и методы - они и предназначены для того, чтобы с их помощью вызывать нужный функционал. Обычно библиотеки разрабатывают так, чтобы внешне система не меняла свой интерфейс, но внутренне она становилась только лучше. Такой подход стоит применить и в коде своего проекта тоже: выставляйте наружу публичный относительно статичный интерфейс, а в тестах проверяйте результаты выходных данных из этого интерфейса.\n3. Happy path Написал фичу, и тимлид требует доказать ее работоспособность? Отлично, сейчас он получит свое! Напиши один тест, проверяющий только один рабочий сценарий использования, и отправляй смело на ревью. Просил доказать, ты доказал. Что не так?\nПроблема таких тестов в том, что они проверяют только прохождение \u0026ldquo;счастливого пути\u0026rdquo;, не затрагивая пограничные кейсы и ошибочные сценарии. Например, у нас есть класс проверки возраста и его тест-класс:\n// src/age-detector.ts export class AgeDetector { constructor(private readonly yearOfBirth: number) {} howOldAmI(): number { const currentYear = new Date().getFullYear(); return currentYear - this.yearOfBirth; } } // tests/age-detector.test.ts import { AgeDetector } from \u0026#39;./business-service\u0026#39;; describe(\u0026#39;AgeDetector\u0026#39;, () =\u0026gt; { it(\u0026#39;howOldAmI returns 30\u0026#39;, () =\u0026gt; { const target = new AgeDetector(1993); const result = target.howOldAmI(); expect(result).toBe(30); }); }); В тесте мы проверили, что класс возвращает разницу. Но что насчет кейсов, когда дата рождения в этом году еще не наступила? А если передали дату в будущем в конструктор класса? А если передали отрицательное число?\n// tests/age-detector.test.ts describe(\u0026#39;AgeDetector\u0026#39;, () =\u0026gt; { it(\u0026#39;howOldAmI returns 30\u0026#39;, () =\u0026gt; { const target = new AgeDetector(1993); const result = target.howOldAmI(); expect(result).toBe(30); }); it(\u0026#39;ctor throws Error if date is in future\u0026#39;, () =\u0026gt; { expect(new AgeDetector(2050)).toThrowError(); }); it(\u0026#39;ctor throws Error if date is in the past far from now\u0026#39;, () =\u0026gt; { expect(new AgeDetector(1850)).toThrowError(); }); }); Таких пограничных кейсов может быть тысячи, поэтому не останавливайся в написании тестов на только лишь одном успешном сценарии.\nЧем больше ошибок отловишь ты и закрепишь их в тестах, тем надежнее будет твой код.\n4. Слоупок (Slowpoke) В проекте уйма тестов, а темп работы слишком быстрый для тебя? Не беда, есть способ добавить себе пару свободных часов в неделю. Напиши в тестах вызовы внешних сервисов, добавь ожидания ответов, записи файлов. Так тесты будут выполняться дольше, а у тебя появятся свободные полчаса каждый раз, когда отправляешь свой код на тестовый стенд для прогона пайплайна.\nБывают тесты, которые воспроизводятся очень долго. Часто тесты медленные, если они работают с внешними системами, делают запросы в другие сервисы или взаимодействуют с файловой системой. Такие тесты ненадежны и по другим причинам, но в данном кейсе они еще и увеличивают общее время выполнения пайплайна.\n// src/weather-service.ts import { HttpClient, HttpErrorResponse } from \u0026#39;@angular/common/http\u0026#39;; import { Injectable } from \u0026#39;@angular/core\u0026#39;; import { Observable, map, catchError } from \u0026#39;rxjs\u0026#39;; export interface WeatherData { main: { temp: number; }; weather: { description: string; }[]; } @Injectable({ providedIn: \u0026#39;root\u0026#39; }) export class WeatherService { private readonly apiKey: string; private readonly baseUrl: string; constructor( private readonly http: HttpClient) { this.apiKey = \u0026#39;1234567890\u0026#39;; this.baseUrl = \u0026#39;https://api.openweathermap.org/data/2.5/weather\u0026#39;; } getWeather(city: string): Observable\u0026lt;string\u0026gt; { const url = `${this.baseUrl}?q=${city}\u0026amp;appid=${this.apiKey}\u0026amp;units=metric`; return this.http.get\u0026lt;WeatherData\u0026gt;(url).pipe( map(response =\u0026gt; { const temperature = response.main.temp; const description = response.weather[0].description; return `Temperature in ${city}: ${temperature}°C, ${description}`; }), catchError((error: HttpErrorResponse) =\u0026gt; { return `Error getting weather for ${city}. Status: ${error.status}`; }) ); } } И тест для этого сервиса:\n// tests/weather-service.test.ts import { TestBed } from \u0026#39;@angular/core/testing\u0026#39;; import { WeatherService } from \u0026#39;./business-service\u0026#39;; import { HttpClientModule } from \u0026#39;@angular/common/http\u0026#39;; import { HttpClientTestingModule, HttpTestingController } from \u0026#39;@angular/common/http/testing\u0026#39;; describe(\u0026#39;WeatherService\u0026#39;, () =\u0026gt; { let httpMock: HttpTestingController; beforeEach(() =\u0026gt; { TestBed.configureTestingModule({ imports: [HttpClientModule, HttpClientTestingModule], providers: [WeatherService] }); httpMock = TestBed.inject(HttpTestingController); }); afterEach(() =\u0026gt; { httpMock.verify(); }); it(\u0026#39;should return weather information for a city\u0026#39;, () =\u0026gt; { const city = \u0026#39;London\u0026#39;; const target = TestBed.inject(WeatherService); target.getWeather(city).subscribe(response =\u0026gt; { expect(response).toContain(`Temperature in ${city}:`); }); }); }); Если тестов, которые зависят от внешних факторов, много, то и время исполнения будет рандомным и зависеть от состояния нагруженности сети, зависеть от погоды, etc. Тесты пишем так, чтобы они проверяли логику работы на основе заранее определенного ответа внешнего сервиса. Для этого нужно мокать, подменять сервисы заглушками и рефакторить. Пример с моком внешнего сервиса ниже:\n// tests/seather-service.test.ts import { TestBed } from \u0026#39;@angular/core/testing\u0026#39;; import { WeatherData, WeatherService } from \u0026#39;./business-service\u0026#39;; import { HttpClientModule } from \u0026#39;@angular/common/http\u0026#39;; import { HttpClientTestingModule, HttpTestingController } from \u0026#39;@angular/common/http/testing\u0026#39;; describe(\u0026#39;WeatherService\u0026#39;, () =\u0026gt; { let httpMock: HttpTestingController; beforeEach(() =\u0026gt; { TestBed.configureTestingModule({ imports: [HttpClientModule, HttpClientTestingModule], providers: [WeatherService] }); httpMock = TestBed.inject(HttpTestingController); }); afterEach(() =\u0026gt; { httpMock.verify(); }); it(\u0026#39;should return weather information for a city\u0026#39;, () =\u0026gt; { const city = \u0026#39;London\u0026#39;; const apiKey = \u0026#39;1234567890\u0026#39;; const target = TestBed.inject(WeatherService); target.getWeather(city).subscribe(response =\u0026gt; { expect(response).toEqual(`Temperature in ${city}: 15°C, cloudy`); }); const request = httpMock.expectOne(`https://api.openweathermap.org/data/2.5/weather?q=${city}\u0026amp;appid=${apiKey}\u0026amp;units=metric`); expect(request.request.method).toBe(\u0026#39;GET\u0026#39;); request.flush({ main: { temp: 15 }, weather: [{ description: \u0026#39;cloudy\u0026#39; }] } as WeatherData); }); it(\u0026#39;should handle errors\u0026#39;, () =\u0026gt; { const city = \u0026#39;InvalidCity\u0026#39;; const apiKey = \u0026#39;1234567890\u0026#39;; const target = TestBed.inject(WeatherService); target.getWeather(city).subscribe(response =\u0026gt; { expect(response).toEqual(`Error getting weather for InvalidCity. Status: 404`); }); const request = httpMock.expectOne(`https://api.openweathermap.org/data/2.5/weather?q=${city}\u0026amp;appid=${apiKey}\u0026amp;units=metric`); expect(request.request.method).toBe(\u0026#39;GET\u0026#39;); request.flush(\u0026#39;\u0026#39;, { status: 404, statusText: \u0026#39;Not Found\u0026#39; }); }); }); 5. Гигант (Giant) Зачем тебе нужно добавлять новые тестфайлы, писать новый код, который подготавливает условия для выполнения тестов, что-то самому сочинять? Есть же вон тестфайл готовый, добавь в него еще пару тестов!\nЕсли тест-файл содержит в себе тысячи строк кода, то причиной может быть ситуация, когда тестируемый класс содержит очень много логики и ответственности. Тут и одной тысячей строк кода не обойтись. Что делать в этом случае? Только дробить и класс, и файл тестов соответственно.\nДробите большие классы, устраняйте god objects из своего проекта. В куче строк кода легко потеряться и допустить ошибки.\n6. Mockery Моки - это круто! Как хочешь, так и подменяй логику. Применяй моки везде и всюду, ведь это единственно верный подход. В классе единственная зависимость и нет бизнес-логики? Все равно! Применяй моки!\nМоки - это отличный способ подменить функциональность. Так можно протестировать свою бизнес-логику, которая зависит на ответе стороннего сервиса, и при эётом не вызывать этот сторонний сервис. Но и перебарщивать с этим не стоит, иначе можно столкнуться с ситуацией, когда вы мокаете сервисы, а потом проверяете работу этих же моков. Нужно соблюдать баланс.\nНапример, на бэкенде популярен паттерн \u0026ldquo;репозиторий\u0026rdquo; для создания прослойки между бизнес-логикой и хранилищем данных. Ниже можно увидеть, как мы настраиваем с помощью моков класс, но внутри класса логики-то толком и нет\nА ниже - сам класс. Логики внутри почти нет, в итоге тестировать и нечего особо.\nДаже такие классы нужно тестировать, но в данном случае лучше подойдет мок всей БД, куда сначала мы кладем искомый объект, а потом уже проверяем, что он будет возвращен бизнес-логикой.\n7. Инспектор (Inspector) Ты - тимлид и хочешь помериться долей покрытия тестами с другими тимлидами в чате? тлично, так и нужно делать! Поставь задачу своим ребятам, чтоб обеспечили только 100% code-coverage. А какой ценой? Не имеет значения!\nВ погоне за метрикой покрытия тестами можно так увлечься, что смысл этой метрики будет потерян. Вследствие этого появляются тесты, которые проверяют настолько глубокий функционал внутри класса, что при любом рефакторинге нужно переписывать и тест, даже если логика не поменялась. Это плохо, потому что когда разработчики видят, что тест упал и при это внешний интерфейс класса не был изменен, они пытаются сразу понять, что именно в бизнес-логике они сломали. И как же обидно понять, что тест сломался не потому, что ты что-то сломал, а потому, что ты просто переименовал переменную внутри класса.\nЭтот антипаттерн схож с \u0026ldquo;анальной пробкой\u0026rdquo;, но у него иная цель: если \u0026ldquo;анальная пробка\u0026rdquo; преследует цель проверить результат работы логики по скрытым полям класса, то тут целью ставят полное покрытие кода тестами, а качество тестов значения не имеет.\nЕсть открытый вопрос на SO, заданный Егором Бугаенко, о том, как написать тест для приватного конструктора класса в Java. Вопрос был задан скорее для того, чтобы собрать мнение сообщества по вопросу, и один из лучших ответов я приведу тут:\nRemember that coverage is meant to be something which is useful to you - you should be in charge of the tool, not the other way round.\n8. Generous Leftovers (aka Chain Gang, Wet Floor) В проекте нужно написать тесты на генерацию CSV и парсинг этого CSV? Отлично, можно же убить двух зайцев! Напиши один тест на генерацию файла, а второй - на его чтение и парсинг. Тимлид точно оценит твою идею.\nПредставим пример двух тестов, один из которых проверяет создание CSV файла, а второй - читает его.\n// test/createFile.test.ts import { expect } from \u0026#39;chai\u0026#39;; import { promises as fs } from \u0026#39;fs\u0026#39;; import path from \u0026#39;path\u0026#39;; describe(\u0026#39;File creation\u0026#39;, () =\u0026gt; { const filePath = path.join(__dirname, \u0026#39;testFile.txt\u0026#39;); const fileContent = \u0026#39;Hello, world!\u0026#39;; it(\u0026#39;should create a new file\u0026#39;, async () =\u0026gt; { await fs.writeFile(filePath, fileContent); const fileExists = await fs.stat(filePath).then(() =\u0026gt; true).catch(() =\u0026gt; false); expect(fileExists).to.be.true; }); }); // tests/readFile.test.ts import { expect } from \u0026#39;chai\u0026#39;; import { promises as fs } from \u0026#39;fs\u0026#39;; import path from \u0026#39;path\u0026#39;; describe(\u0026#39;Read and process file\u0026#39;, () =\u0026gt; { const filePath = path.join(__dirname, \u0026#39;testFile.txt\u0026#39;); const fileContent = \u0026#39;Hello, world!\u0026#39;; it(\u0026#39;should read the file and capitalize the content\u0026#39;, async () =\u0026gt; { const content = await fs.readFile(filePath, \u0026#39;utf-8\u0026#39;); const capitalizedContent = content.toUpperCase(); expect(capitalizedContent).to.equal(\u0026#39;HELLO, WORLD!\u0026#39;); }); }); Вывод в консоль:\nFile creation ✔ should create a new file Read and process file ✔ should read the file and capitalize the content 2 passing (4ms) Тимлид не оценит такие тесты. Этот подход плохой, потому что:\nвозникает необходимость запускать некоторые тесты в строгом порядке, возникает зависимость тестов друг от друга, они не атомарны. Лучше создавать файл перед тестом и удалять его после. Так тест будет атомарным и независимым, хоть выполнение будет занимать больше времени\n// tests/readFile.test.ts import { expect } from \u0026#39;chai\u0026#39;; import { promises as fs } from \u0026#39;fs\u0026#39;; import path from \u0026#39;path\u0026#39;; describe(\u0026#39;Read and process file\u0026#39;, () =\u0026gt; { const filePath = path.join(__dirname, \u0026#39;testFile.txt\u0026#39;); const fileContent = \u0026#39;Hello, world!\u0026#39;; // Creating file before the test before(async () =\u0026gt; { await fs.writeFile(filePath, fileContent); }); it(\u0026#39;should read the file and capitalize the content\u0026#39;, async () =\u0026gt; { const content = await fs.readFile(filePath, \u0026#39;utf-8\u0026#39;); const capitalizedContent = content.toUpperCase(); expect(capitalizedContent).to.equal(\u0026#39;HELLO, WORLD!\u0026#39;); }); // Removing file after the test after(async () =\u0026gt; { await fs.unlink(filePath); }); }); 9. Local Hero (aka \u0026ldquo;Скрытая зависимость\u0026rdquo;, \u0026ldquo;Евангелист ОС\u0026rdquo;, \u0026ldquo;Хулиган окружения\u0026rdquo;) Тимлид заставляет написать тест на класс, в котором используются переменные окружения? Не беда! Пиши смело так, чтобы проходили на сервере CI/CD. НА локальном окружении фейлятся? Да какая разница, гдавное - МР пройдет!\n// src/app-storage.ts interface User { id: number; name: string; } export class AppStorage { private readonly _storage: Array\u0026lt;User\u0026gt; = []; seed(): void { const database = []; if (process.env.ENVIRONMENT === \u0026#39;Development\u0026#39;) { this._storage.push({ id: 1, name: \u0026#39;John Doe\u0026#39;, }); } } count(): number { return this._storage.length; } } // tests/app-storage.test.ts import { expect } from \u0026#39;chai\u0026#39;; import { AppStorage } from \u0026#39;../src/app-storage\u0026#39;; describe(\u0026#39;AppStorage\u0026#39;, () =\u0026gt; { let target: AppStorage; before(async () =\u0026gt; { target = new AppStorage(); }); it(\u0026#39;should seed data in development\u0026#39;, async () =\u0026gt; { // The test will be green on CI/CD server // because it has process.env.ENVIRONMENT = \u0026#39;Development\u0026#39;; target.seed(); expect(target.count()).to.equal(1); }); }); Делайте свои тесты независимыми от окружения и внешних обстоятельств максимально. Если логика зависит от переменных окружения, то напишите класс-провайдер этих переменных, и тогда вы сможете его замокать в тестах:\n// src/app-storage.ts export interface IEnvironment { ENVIRONMENT: string; } interface User { id: number; name: string; } export class AppStorage { private readonly _storage: Array\u0026lt;User\u0026gt; = []; constructor(private readonly env: IEnvironment){} seed(): void { if (this.env.ENVIRONMENT === \u0026#39;Development\u0026#39;) { this._storage.push({ id: 1, name: \u0026#39;John Doe\u0026#39;, }); } } count(): number { return this._storage.length; } } import { expect } from \u0026#39;chai\u0026#39;; import { AppStorage, IEnvironment } from \u0026#39;../src/app-storage\u0026#39;; describe(\u0026#39;AppStorage\u0026#39;, () =\u0026gt; { it(\u0026#39;should seed data in development\u0026#39;, async () =\u0026gt; { const env = { ENVIRONMENT: \u0026#39;Development\u0026#39;, } as IEnvironment; const target = new AppStorage(env); target.seed(); expect(target.count()).to.equal(1); }); }); Автору встречались тесты, котоые фейлились в зависимости от \u0026ldquo;культуры\u0026rdquo;, установленной на компьютере: на ноуте автора с английской культурой тесты были зелеными, но у коллег с немецкой они фейлились. Причиной была разница в способе форматирования чисел с дробью: в английской культуре применялась точка, а в немецкой - запятая. Беда была еще в том, что билд-сервер тоже был с английской культурой и не показал, что тесты фейлятся. Решили проблему легко - явно форматировали числа с дробью в тестах с использованием точки.\n10. Придира (Nitpicker) Заставляют писать тесты даже на выгрузку CSV? Ну что ж, отомсти им, сделай ассерт на весь контент! Пусть в случае ошибки помучаются искать, что именно не соответствует ожиданию.\n\u0026ldquo;Придирой\u0026rdquo; называют тесты, которые проверяю лишь незначительную часть выходных данных тестируемого метода. Например, клас формирует репорт большого размера, и мы проверяем весь выходной текст на соответствие ожидаемому результату. Казалось бы, такое поведение корректно, однако в случае ошибки в одной из колонок мы получим сложночитаемую ошибку в логах выполнения тестов.\n// src/csv-exporter.ts export interface Person { id: number; name: string; email: string; dateOfBirth: string; } export class CSVExporter { constructor(private readonly data: Person[]) {} private escapeCSVField(field: string): string { return `\u0026#34;${field.replace(/\u0026#34;/g, \u0026#39;\u0026#34;\u0026#34;\u0026#39;)}\u0026#34;`; } csv(): string { const header = \u0026#39;id,name,email,dateOfBirth\u0026#39;; const rows = this.data.map(person =\u0026gt; { const fields = [ person.id, this.escapeCSVField(person.name), this.escapeCSVField(person.email), person.dateOfBirth, ]; return fields.join(\u0026#39;,\u0026#39;); }); return [header, ...rows].join(\u0026#39;\\n\u0026#39;); } } import { expect } from \u0026#39;chai\u0026#39;; import { CSVExporter } from \u0026#39;../src/csv-exporter\u0026#39;; describe(\u0026#39;File creation\u0026#39;, () =\u0026gt; { it(\u0026#39;should create a new file\u0026#39;, async () =\u0026gt; { const people = [ { id: 1, name: \u0026#39;John Doe\u0026#39;, email: \u0026#39;john.doe@example.com\u0026#39;, dateOfBirth: \u0026#39;1990-01-01\u0026#39;, }, { id: 2, name: \u0026#39;Jane Doe\u0026#39;, email: \u0026#39;jane.doe@example.com\u0026#39;, dateOfBirth: \u0026#39;1992-02-02\u0026#39;, }, { id: 3, name: \u0026#39;Jim Doe\u0026#39;, email: \u0026#39;jim.doe@example.com\u0026#39;, dateOfBirth: \u0026#39;1993-02-02\u0026#39;, }, ]; const target = new CSVExporter(people); const output = target.csv(); const expected = `id,name,email,dateOfBirth 1,\u0026#34;John Doe\u0026#34;,\u0026#34;john.doe@example.com\u0026#34;,1990-01-01 2,\u0026#34;Jane Doe\u0026#34;,\u0026#34;jane.doe@example,com\u0026#34;,1992-02-02 3,\u0026#34;Jim Doe\u0026#34;,\u0026#34;jim.doe@example.com\u0026#34;,1993-02-02`; expect(output).to.equal(expected); }); }); 1) CSVExporter should return proper csv: AssertionError: expected \u0026#39;id,name,email,dateOfBirth\\n1,\u0026#34;John Do…\u0026#39; to equal \u0026#39;id,name,email,dateOfBirth\\n1,\u0026#34;John Do…\u0026#39; + expected - actual id,name,email,dateOfBirth 1,\u0026#34;John Doe\u0026#34;,\u0026#34;john.doe@example.com\u0026#34;,1990-01-01 -2,\u0026#34;Jane Doe\u0026#34;,\u0026#34;jane.doe@example.com\u0026#34;,1992-02-02 +2,\u0026#34;Jane Doe\u0026#34;,\u0026#34;jane.doe@example,com\u0026#34;,1992-02-02 3,\u0026#34;Jim Doe\u0026#34;,\u0026#34;jim.doe@example.com\u0026#34;,1993-02-02 Ошибка во второй строке полученного CSV - в емейле вместо точки поставлена запятая. Тест показал, что ожидаемый результат не совпадает, но вот не сразу получается разглядет причину ошибки. Старайтесь валидировать частями или разбивать на несколько тесткейсов подобные случаи, чтобы в случае ошибок сразу видеть их причину.\n11. Шкатулка с секретом (Secret Catcher) Нужно написать тест на выбрасывание ошибки? Отлично, тесты ведь нужны для этого! Пусть один из тестов будет красным, ведь мы ждем ошибку там. Главное - не забудь комментарий написать, что фйл теста - это ожидаемо.\nНа первый взгляд, такой тест не делает ничего, ведь в нем нет ассертов. Однако дьявол кроется в деталях. На самом деле, тест надеется, что внутри произойдет эксепшн, и консоль покажет \u0026ldquo;ожидаемый\u0026rdquo; текст ошибки в логах.\n// src/secret-catcher-service.ts export class SecretCatcherService { constructor( private someCondition = false) {} doSomeLogic(): void { // do some logic // ... // ... // probably, we change someCondition to true if (this.someCondition) { throw Error(\u0026#39;Logic error!\u0026#39;); } } } // tests/secret-catcher-service.test.ts import { expect } from \u0026#39;chai\u0026#39;; import { SecretCatcherService } from \u0026#39;../src/secret-catcher-service\u0026#39;; describe(\u0026#39;SecretCatcherService\u0026#39;, () =\u0026gt; { it(\u0026#39;should not throw an error if we pass false\u0026#39;, () =\u0026gt; { const target = new SecretCatcherService(false); // red test is ok! target.doSomeLogic(); }); }); Лучшим выходом будет отлавливать явно эксепшн и проверять его поля на ожидаемый текст ошибки, например, или иные ее поля. Современные тест-фреймворки могут отлавливать ошибки, поэтому используйте их возможности.\n// tests/secret-catcher-service.test.ts import { expect } from \u0026#39;chai\u0026#39;; import { SecretCatcherService } from \u0026#39;../src/secret-catcher-service\u0026#39;; describe(\u0026#39;SecretCatcherService\u0026#39;, () =\u0026gt; { it(\u0026#39;should throw an error if we pass true\u0026#39;, () =\u0026gt; { const target = new SecretCatcherService(true); expect(() =\u0026gt; target.doSomeLogic()).to.throw(\u0026#39;Logic error!\u0026#39;); }); }); 12. Уклонист (Dodger) Пишешь тесты, но внезапно оказалось, что часть логики зависит от внешних сервисов. И никак не замокать. Есть выход! Добавь побольше побочных тестов, особенно если они проверяют маловероятные случаи. Тимлид будет доволен и аппрувнет МР.\n\u0026ldquo;Уклонистом\u0026rdquo; можно назвать тест, который проверяет маловероятные кейсы, не оказывающие значительное влияние на поведение класса, но при этом как будто бы специально пропускает важные тесткейсы. Пример привести сложно, ведь тут все сильно зависит от бизнеса, для которого работает приложение - бизнес определяет, какие кейсы важные и какие - маловероятные.\n// src/division.ts export class Division { constructor( private readonly a: number, private readonly b: number) {} result(): number { if (this.b === 0) { throw new Error(\u0026#39;Division by zero!\u0026#39;); } return this.a / this.b; } } // tests/division.test.ts import { expect } from \u0026#39;chai\u0026#39;; import { Division } from \u0026#39;../src/division\u0026#39;; describe(\u0026#39;Division\u0026#39;, () =\u0026gt; { it(\u0026#39;should divide positive numbers. Returns positive result\u0026#39;, () =\u0026gt; { const target = new Division(5, 2); expect(target.result()).to.equal(2.5); }); it(\u0026#39;should divide one positive and one negative numbers. Returns negative result\u0026#39;, () =\u0026gt; { const target = new Division(5, -2); expect(target.result()).to.equal(-2.5); }); it(\u0026#39;should divide two negative numbers. Returns positive result\u0026#39;, () =\u0026gt; { const target = new Division(-5, -2); expect(target.result()).to.equal(2.5); }); it(\u0026#39;should return cirtuclation fraction\u0026#39;, () =\u0026gt; { const target = new Division(1, 3); expect(target.result()).to.equal(0.3333333333333333); }); }); В данном академическом примере мы проверяем тоже важные кейсы, однако один пропустили - кейс деления на ноль. Добавим же его:\n// tests/division.test.ts import { expect } from \u0026#39;chai\u0026#39;; import { Division } from \u0026#39;../src/division\u0026#39;; describe(\u0026#39;Division\u0026#39;, () =\u0026gt; { // ... // ... // ... it(\u0026#39;should catch error if we divide by zero\u0026#39;, () =\u0026gt; { const target = new Division(1, 0); expect(() =\u0026gt; target.result()).to.throw(); }); }); 13. Крикун (Loudmouth) Без логов никуда! Код сделал то, что нужно? Пиши в лог об этом. Код зашел в блок if()? Отлично, пиши в лог. А если код зашел в \u0026hellip; else {} \u0026hellip;? Об этом тоже нужно сообщить. Логов много не бывает!\nНет, бывает. Тест-крикун выдает слишком много информации, полезной разработчику во время отладки, но точно не во время прогона CI/CD пайплайна. Избавляйтесь от лишних информационных записей, сообщающих лишь то, что все идет по плану - пишите в консоль тогда, когда что-то пошло не так. В обилии информации разработчик может пропустить важную информацию, которая поможет ему понять, что произошло.\n// src/division.ts export class Division { constructor( private readonly a: number, private readonly b: number) {} result(): number { if (this.a \u0026gt; 0) console.log(\u0026#39;a is positive 0\u0026#39;); if (this.a \u0026lt; 0) console.log(\u0026#39;a is negative\u0026#39;); if (this.b \u0026gt; 0) console.log(\u0026#39;b is positive\u0026#39;); if (this.b \u0026lt; 0) console.log(\u0026#39;b is negative\u0026#39;); if (this.b === 0) { console.log(\u0026#39;b equals to zero, division by zero error\u0026#39;); throw new Error(\u0026#39;Division by zero!\u0026#39;); } return this.a / this.b; } } Консоль при выполнении тестов класса выше:\nDivision a is positive 0 b is positive ✔ should divide positive numbers. Returns positive result a is positive 0 b is negative ✔ should divide one positive and one negative numbers. Returns negative result a is negative b is negative ✔ should divide two negative numbers. Returns positive result a is positive 0 b is positive ✔ should return cirtuclation fraction a is positive 0 b equals to zero, division by zero error ✔ should catch error if we divide by zero 14. Жадина (Greedy Catcher) Пишешь тест, проверяющий выпадение ошибки? Просто отлавливай исключения и все. Какая разница, какая ошибка возникла? Она ведь возникла же, а значит тест надежный!\nОшибка-то возникла, но где уверенность, что именно та, которую мы ожидаем при определенных условиях? \u0026ldquo;Жадиной\u0026rdquo; можно назвать тест, который отлавливают ошибку, но не проверяет причину ее причину. В примере ниже мы валидируем email, но не проверяем, что именно за ошибка возникла - невалидный email или пустое значение пришло в конструктор.\n// src/email.ts export class Email { private static emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/; private readonly email: string; constructor(email: string | null) { if (email == null) { throw new Error(\u0026#39;Email cannot be null\u0026#39;); } this.email = email; } get(): string { if (Email.emailRegex.test(this.email)) { return this.email; } throw new Error(\u0026#39;Invalid email\u0026#39;); } } // test/email.test.ts import { expect } from \u0026#39;chai\u0026#39;; import { Email } from \u0026#39;../src/email\u0026#39;; describe(\u0026#39;Email\u0026#39;, () =\u0026gt; { it(\u0026#39;should return email for valid cases\u0026#39;, () =\u0026gt; { const validEmails = [ \u0026#39;test@example.com\u0026#39;, \u0026#39;jane.doe@example.co.uk\u0026#39;, \u0026#39;john_doe@example.io\u0026#39;, ]; validEmails.forEach(email =\u0026gt; { expect(new Email(email).get()).to.equal(email); }); }); it(\u0026#39;should throw error for invalid emails\u0026#39;, () =\u0026gt; { const invalidEmails = [ \u0026#39;test@example\u0026#39;, \u0026#39;test@.com\u0026#39;, \u0026#39;test@.com.\u0026#39;, \u0026#39;test@.com.\u0026#39;, \u0026#39;@example.com\u0026#39;, null, \u0026#39;\u0026#39; ]; invalidEmails.forEach(email =\u0026gt; { expect(() =\u0026gt; new Email(email).get()).to.throw(); }); }); }); Нужно проверять не только факт наличия ошибки, но и удостовериться, что она произошла по ожидаемой причине. Попробуйте проверять не только текст сообщения ошибки, но и тип.\n// test/email.test.ts import { expect } from \u0026#39;chai\u0026#39;; import { Email } from \u0026#39;../src/email\u0026#39;; describe(\u0026#39;Email\u0026#39;, () =\u0026gt; { it(\u0026#39;should throw error for null or empty string\u0026#39;, () =\u0026gt; { const invalidEmails = [ null, \u0026#39;\u0026#39; ]; invalidEmails.forEach(email =\u0026gt; { expect(() =\u0026gt; new Email(email)).to.throw(\u0026#39;Email cannot be null\u0026#39;); }); }); it(\u0026#39;should throw error for invalid emails\u0026#39;, () =\u0026gt; { const invalidEmails = [ \u0026#39;test@example\u0026#39;, \u0026#39;test@.com\u0026#39;, \u0026#39;test@.com.\u0026#39;, \u0026#39;test@.com.\u0026#39;, \u0026#39;@example.com\u0026#39; ]; invalidEmails.forEach(email =\u0026gt; { expect(() =\u0026gt; new Email(email).get()).to.throw(\u0026#39;Invalid email\u0026#39;); }); }); }); В JS тоже можно добавить кастомные типы ошибок.\nexport class NotFoundError extends Error { public status: number; constructor(message: string) { super(message); this.name = \u0026#39;NotFoundError\u0026#39;; this.status = 404; } } describe(\u0026#39;NotFoundError\u0026#39;, () =\u0026gt; { it(\u0026#39;should return true for instanceof Error\u0026#39;, () =\u0026gt; { const err = new NotFoundError(\u0026#39;Not found\u0026#39;); expect(err instanceof Error).to.equal(true); }); it(\u0026#39;should return true for instanceof NotFoundError\u0026#39;, () =\u0026gt; { const err = new NotFoundError(\u0026#39;Not found\u0026#39;); expect(err instanceof NotFoundError).to.equal(true); }); }); 15. Enumerator (aka Test With No Name) Не трать свой креатив на имена тестов, все равно их никто не читает.\nКогда тесткейсов много, а релиз близко, велик соблазн сэкономить время на придумании правильных названий для тестов. В итоге имеем подобное:\nimport { expect } from \u0026#39;chai\u0026#39;; describe(\u0026#39;Some logic\u0026#39;, () =\u0026gt; { it(\u0026#39;should return true for valid case 1\u0026#39;, () =\u0026gt; { // some arrange for test by the first valid conditions // some act // some assert expect(true).to.equal(true); }); it(\u0026#39;should return true for valid case 2\u0026#39;, () =\u0026gt; { // some arrange for test by the second valid conditions // some act // some assert expect(true).to.equal(true); }); it(\u0026#39;should return true for valid case N\u0026#39;, () =\u0026gt; { // some arrange for test by the Nth valid conditions // some act // some assert expect(true).to.equal(true); }); }); Правильно подобранные имена позволят в будущем быстрее разбираться, почему после рефакторинга тест упал и что нужно исправлять: отрефакторенный код или тесткейс, который не соответствует новым требованиям и условиям.\n16. Free Ride (aka Piggyback) Сделал багфикс, отправил на МР, а тимлид говорит, что нужно добавить юниттест? Ну и ладно, не парься, есть же уже написанные тесты. Добавь просто еще один ассерт в существующий тест. Это же легче, чем новый тест-кейс писать.\nЧасто бывает, что класс поменяли незначительно, но новый тест придумывать и писать лень. Поэтому вместо нового тесткейса мы добавляем дополнительный ассерт в один из написанных. Представим ситуацию: у нас есть класс User и тест к нему:\n// src/user.ts export class User { constructor( public readonly email: string, public readonly firstName: string, public readonly lastName: string, private isEmailVerified = false) {} verify(): void { if (this.isEmailVerified) { throw new Error(\u0026#39;Email already verified\u0026#39;); } this.isEmailVerified = true; } isVerified(): boolean { return this.isEmailVerified; } } // tests/user.test.ts import { expect } from \u0026#39;chai\u0026#39;; import { User } from \u0026#39;../src/user\u0026#39;; describe(\u0026#39;User\u0026#39;, () =\u0026gt; { it(\u0026#39;should throw an error if we try to verify verified user\u0026#39;, () =\u0026gt; { const target = new User( \u0026#39;john.doe@gmail.com\u0026#39;, \u0026#39;John\u0026#39;, \u0026#39;Doe\u0026#39;, true); expect(() =\u0026gt; target.verify()).to.throw(\u0026#39;Email already verified\u0026#39;); }); }); Теперь мы добавляем новый метод isSocialEmail:\n// .... isSocialEmail(): boolean { return this.email.endsWith(\u0026#39;@facebook.com\u0026#39;) || this.email.endsWith(\u0026#39;@gmail.com\u0026#39;); } // .... Теперь дополним тесткейс:\nit(\u0026#39;should throw an error if we try to verify verified user\u0026#39;, () =\u0026gt; { const target = new User( \u0026#39;john.doe@gmail.com\u0026#39;, \u0026#39;John\u0026#39;, \u0026#39;Doe\u0026#39;, true); expect(() =\u0026gt; target.verify()).to.throw(\u0026#39;Email already verified\u0026#39;); expect(target.isSocialEmail()).to.be.true; }); Лучше всего будет добавить новый тесткейс, чтобы тесты были независимые и атомарные. В случае, если логика метода verify() сломается и тест будет красным, до проверки isSocialEmail() выполнение даже не дойдет. Получается, что тесткейс на новый функционал не независим и игнорируется в данном случае.\n17. Excessive Setup (aka Mother Hen) Настройки, настройки, сетап и еще настройки! Ну и что, что тест-кейс требует миллионы строк настройки условий? Не разделяй код, не рефактори, оставь как есть и бери следующую задачу.\nТесты, которые требуют много кода для настройки условий, тяжело поддерживать. Иногда фича настолько объемная, что ей нужен такой объем предусловий, но все же это повод задуматься, а не сильно ли много ответственности у класса? А может лучше разделить?\nВ таком тесте тяжело понять суть проверки. Кажется, что настройка слишком \u0026ldquo;шумная\u0026rdquo; и сбивает с толку. Если встретили в своем рабочем проекте подобное, то задумайтесь, не повод ли это отрефакторить класс.\n18. Line hitter Ты тимлид и ты усвоил урок, что стопроцентное покрытие кода - это зло. Ну что ж, в публичных методах мы же можем обеспечить полное покрытие, не так ли?\nНа первый взгляд, тест в примере ниже покрывает 100% кода метода, однако суть работы особо и не проверяется и выходные данные не анализируются.\n// src/calculator.ts export class Calculator { constructor( private readonly first: number){} add(second: number): number { return this.first + second; } subtract(second: number): number { return this.first - second; } multiply(second: number): number { return this.first * second; } divide(second: number): number { return this.first / second; } } // test/calculator.test.ts import { expect } from \u0026#39;chai\u0026#39;; import { Calculator } from \u0026#39;../src/calculator\u0026#39;; describe(\u0026#39;Calculator\u0026#39;, () =\u0026gt; { it(\u0026#39;should call methods\u0026#39;, () =\u0026gt; { const add = new Calculator(1).add(1); const substract = new Calculator(1).subtract(1); const multiply = new Calculator(1).multiply(1); expect(new Calculator(1).divide(1)).to.equal(1); }); }); Снова в погоне за метрикой мы упускаем суть тестирования. Метрика - это хорошо, но не самоцель. Сначала напиши тест-кейсы на каждый сценарий, покрой критичный функционал и придуманные пограничные кейсы, а уже потом посмотри на покрытие кода. Если какой-то код остался непокрытым, то может это код нужно удалить, а не тест-кейс добавить?\n19. Лжец (aka Evergreen Tests, Success Against All Odds) Поменял логику работы метода, но тесты не упали? Отлично, какой ты молодец, что сумел написать такие надежные тесты. Так держать!\n\u0026ldquo;Лжецом\u0026rdquo; называют тест, который будет зеленый, даже если код тестируемого метода поменяли. Для демонстрации можно вспомнить один из прошлых примеров:\n// src/user.ts export class User { private deletedAt: Date | null = null constructor( public readonly email: string, private isEmailVerified = false, ) {} verify(): void { if (this.isEmailVerified) { throw new Error(\u0026#39;Email already verified\u0026#39;); } this.isEmailVerified = true; } isVerified(): boolean { return !this.isDeleted() \u0026amp;\u0026amp; this.isEmailVerified; } isSocialEmail(): boolean { return this.email.endsWith(\u0026#39;@facebook.com\u0026#39;) || this.email.endsWith(\u0026#39;@gmail.com\u0026#39;); } delete(): void { if (this.deletedAt != null) { throw new Error(\u0026#39;User is already removed\u0026#39;); } this.deletedAt = new Date(); } isDeleted(): boolean { return this.deletedAt != null; } } // tests/user.test.ts import { expect } from \u0026#39;chai\u0026#39;; import { User } from \u0026#39;../src/user\u0026#39;; describe(\u0026#39;User\u0026#39;, () =\u0026gt; { it(\u0026#39;.isVerified should return false if user was removed\u0026#39;, () =\u0026gt; { const target = new User(\u0026#39;john.doe@gmail.com\u0026#39;, false); target.delete(); expect(target.isVerified()).to.be.false; }); }); Теперь поменяем проверку в методе isVerified():\nisVerified(): boolean { return /*!this.isDeleted() \u0026amp;\u0026amp;*/ this.isEmailVerified; } Тест до сих пор зеленый даже при условии, что код метода был изменен:\nit(\u0026#39;.isVerified should return false if user was removed\u0026#39;, () =\u0026gt; { const target = new User(\u0026#39;john.doe@gmail.com\u0026#39;, false); target.delete(); expect(target.isVerified()).to.be.false; }); Все потому, что тест не проверяет подробно состояние тестируемого объекта и не удостоверяется, какие именно условия привели к ожидаемому результату. В качестве решения можно добавить мутационные тесты, которые будут проверять, что тесты не лгут. Мутационный тест - это тест, который меняет или код бизнес-классов, или ассерты в тестах, и проверяет, что тесты упали. Если тесты не упали, то это значит, что доверия к ним нет.\nЗаключение В этой статье мы рассмотрели 19 антипаттернов в юнит-тестировании. Надеюсь, что теперь ты попадешь в эти ловушки. Код юниттестов - не second-class-citizen, их тоже нужно писать \u0026ldquo;чистыми\u0026rdquo; и понятными. Практикуйся чаще, и тогда код твоего проекта будет надежней, тестировщик будет меньше на тебя ругаться, а тимлид - меньше краснеть.\nИсточники https://stackoverflow.com/questions/333682/unit-testing-anti-patterns-catalogue https://archive.is/3acB#selection-119.0-119.17 https://www.yegor256.com/2018/12/11/unit-testing-anti-patterns.html https://blog.codepipes.com/testing/software-testing-antipatterns.html ","permalink":"https://mgorbatyuk.dev/blog/development/2023-03-04-unit-testing-anti-patterns/","summary":"Disclaimer:\nСоветы ниже - вредные, доверять им не стоит.\nАнтипаттерны придуманы не мной. В статье я стараюсь дать примеры, на которых будет видно, почему такие подходы и назвали антипаттернами\nКод юнит-тестов - это не second-class код, его тоже нужно писать поддерживаемым, читаемым и понятным для остальных ребят в команде.\nКурсивом - вредный совет, обычным шрифтов - пояснение.\n0. Кукушка (Cuckoo, aka Stranger) Твой класс делает запросы к внешним системам? Отлично, проверь и вызовы тоже вместе с выходными данными.","title":"Вредные советы по тестированию программ"},{"content":" Картинка взята отсюда\nОчевидные вещи нужно проговаривать\nТак говорил мой тимлид, закончивший юрфак, но ушедший в айти. Говорил он так о процессах разработки: свод правил, по которым работает команда. Этакий кодекс программиста отдела N. Этот свод правил должен быть публичным и каждый должен знать, где его прочесть. Но зачем нужно описывать то, что и так всем известно? Давайте обсудим.\nПравила работы в команде есть всегда, даже если они нигде не описаны и никем не проговорены. Так складывается исторически, что Ваня лучше знает платежи, Петя - как настроить тестовое окружение, а Юля - что делать, если нашел баг. И тот, кто уходит в отпуск, начинает получать сообщения в мессенджеры: \u0026ldquo;сорри что пишу, но \u0026hellip;..\u0026rdquo;. В такой среде легко допустить ошибку, особенно новичкам. Еще хуже, когда даже не знаешь, кого можно спросить в критичный момент.\nО чем писать? Чтобы одни сотрудники спокойно отдыхали в отпуске, а остальные знали, что делать в той или иной ситуации, команды описывают все процессы разработки, которые применяют. О чем пишут в кодексе:\nКакая брэнч-стратегия применяется в команде, Какие принципы работы декларируем, Как работаем над ошибками, когда их находим или когда совершаем, Пишем ли тесты, обязательны ли они, Какие ритуалы есть в команде, для чего они были придуманы. Если не сделать подобного \u0026ldquo;очевидного\u0026rdquo; описания того, что и так уже есть, то можно столкнуться с тем, что каждый видит процессы по-своему. А раз видение разное, то и поведение участников команды будет разное в критических ситуациях. Для того и нужно описать видение процессов. К тому же, это хороший повод пересмотреть то, что уже сложилоь исторически - а вдруг процесс устарел или есть лучше механики? Когда процессы описаны, каждый знает, что делать в разных ситуациях. Совершил ошибку, хотя следовал процедурам команды? Виноваты процедуры, их нужно доработать. На код-ревью зацепился с коллегой насчет архитектуры? Обращаешься к техлиду в соответствии с процедурами, и тот экономит ваше время и нервы. Описание процессов нужно спецам любого уровня и любой роли:\nджунам кодекс нужен, потому что меньше возникнет вопросов и меньше способов облажаться, миддлам кодекс нужен, чтобы джуны реже задавали одни и те же вопросы, сеньорам кодекс нужен, чтобы никто не отвлекал во время отпуска по рабочим вопросам. Написать кодекс будет несложно, если начать с малого. Можно и нужно описывать процессы постепенно по мере их декларирования или пересмотра. Начать можно с общих принципов, а затем дописывать в случае, если произошел случай, не описанный в кодексе. Для примера предлагаю посмотреть тот, который написал когда-то я для своей команды. Далее я покажу некоторые ключевые принципы работы и объясню, почему они - ключевые.\nКодекс команды 5 принципов работы\nПринимаем реальность и работаем с ней.\nНет ничего страшного в том, что мы допускаем ошибки; страшно, когда мы не учимся на них.\nМы выявляем проблемы и не миримся с ними. Мы исправляем их и делаем выводы.\nМы используем инструменты и утвержденные процедуры, чтобы регламентировать выполнение работы.\nЯвное лучше неявного\nВ начале я декларирую общие принципы работы. Они могут показаться очевидными, однако лучше их проговорить вслух. Тогда каждый будет уверен, что коллеги тоже в курсе о принципах работы в команде.\n1.1. Мы следуем принятым принципам, независимо от согласия с ними\nПерсональное несогласие — не причина отступать от принципов. Тем не менее, можно начать обсуждение любого принципа, если изменились обстоятельства или принцип перестал быть полезным. Выполняй или объясняй - мы можем отступать от установленных правил или процедур, только если мы можем дать объективную причину своим действиям.\nВ первом же пункте я пишу о том, что каждый, продолжая работать в команде, соглашается с правилами или предлагает их исправить и/или улучшить. Иначе - лучше отказаться от работы в команде. Некое \u0026ldquo;пользовательское соглашение\u0026rdquo;, где, продолжая работать с программой, ты соглашаешься с условиями ее использования.\n1.2. Мы открыто говорим о проблемах и рисках\nНе согласен с техническим решением или план невозможно выполнить — скажи. Сломал базу или профакапил сроки — скажи сразу. Тимлид пришел с дурацким предложением — не молчи. Часто кажется, что проще согласиться или промолчать. Помни, что это приведёт к ещё большим проблемам позже.\n1.13. Ошибиться - нестрашно. Страшно повторить ошибку\nМы люди и мы ошибаемся. Мы ошибаемся вследствие незнания, невнимательности или плохого настроения. Любая ошибка простительна, если она совершается впервые. Главное - разобрать причины ошибки и сделать из них вывод.\nЭтот пункт важный, потому что люди часто боятся сообщать о своих ошибках до последнего. Атмосфера в команде должна быть такая, что страх этот будет безосновательный. Этими пунктами кодекса я как раз подчеркиваю это.\n1.16. Увидел баг - оформи багрепорт\nНе оставляй \u0026ldquo;как есть\u0026rdquo; и не разбирайся с причинами - это занимает время. Оформи багрепорт с шагами для воспроизведения и описанием ожидаемого результата и того результата, который проявляется в системе.\nВ любой команде, где я работаю, я побуждаю тиммейтов оформлять багрепорты или оставлять тудушки в коде. Даже если багрепорт уже был заведен, то лучше закрыть дубликат, чем не сообщить о баге совсем. О том, как оформлять багрепорты, я писал тут\n2.7. Мы пишем код так, как будто у нас нет отдела QA\nМы стараемся самостоятельно протестировать код. Если не знаем как его вызвать — узнаем. Если тестировать тяжело или долго — подробно в комментариях к задаче пишем инструкцию для QA. Это увеличит время “in development”, но время до production уменьшится: задача не зависнет в непонятных статусах.\nЯ пишу тесты сам и побуждаю писать тесты моих тиммейтов. Более того, я считаю, что юниттестов и интеграционных тестов много не бывает. Чтобы команда охотнее писала тесты, я предлагаю им забыть о том, что отдел тестирования отловит баги \u0026ldquo;если что\u0026rdquo;. А если не отловит?\n2.17. Читаемость важнее скорости и краткости\nКод гораздо чаще читают, чем пишут. Уделяем внимание форматированию, summary, описанию, README, понятным именам методов, переменных и классов.\nКачество кода - вещь сложноизмеримая и сильно влияющая на скорость разработки и качество продукта. Компьютеры стали настолько мощные, что в приложениях, не предназначенных для высоких нагрузок (десятки или сотни тысяч запросов в секунду), нет необходимости заботиться о памяти и алгоритмической сложности так, как раньше. Лучше пусть будет код читаем и понятен любому, чем оптимальным и экономным по части памяти.\n3.2. Если пишут по работе в выходные или после работы - можешь смело игнорировать\nЭто нормально, если мы не отвечаем на сообщения в свои выходные дни или после окончания рабочего дня. Иногда автор даже и не ждет ответа, потому что письменное общение - это асинхронное общение. Мы имеем право ответить по таким вопросам в следующий рабочий день.\nМоя личная боль. Я всегда нервничаю, когда получаю сообщения в рабочем мессенджере поздно вечером или выходной. Сразу представляю, что там продакшн упал и уже лихорадочно начинаю думать о том, какие личные дела можно отложить. А это, оказывается, коллега идеей поделился. Поэтому я не только настраиваю мьют уведомлений, но и рекомендую остальным это сделать и проговариваю вслух, что никто не обязан в выходные даже отвечать на такие сообщения.\n3.3. Мы можем работать откуда угодно и когда угодно. Главное - результат\nУ нас нет Core hours и мы можем работать вне офиса. Если в тикете есть дэдлайн, значит мы коммитаемся под него и делаем максимально возможное, чтобы выполнить к сроку задачу. Если мы не успеваем, то сообщаем команде об этом как можно раньше.\nФормат работы уже сильно зависит от того, с чем связан проект, насколько команда разделена по часовым поясам и какой проектный менеджмент применяется. Сам я следил только за прогрессом по таскам, но я думаю, что декларирование Core Hours - когда в определенные часы по определенной таймзоне все участники команды должны быть на связи - это необходимость. Тогда каждый будет знать, что в эти часы ему ответят на сообщение, а в другие рассчитывать на это не придется. Главное - проговорить вслух и эту политику.\nЗаключение Если в вашей команде еще нет прописанных и опубликованных процессов, то скорее предлагайте тимлиду заняться этим. Если будет сопротивляться, то расскажите, что прописанным кодексом он сэкономит себе время на онбординг и ему не нужно будет отвечать на одни и те же вопросы забывчивым тиммейтам. Как в коде, так и в командной работе явное лучше неявного и очевидные вещи нужно проговаривать, чтобы у всех было одно видение.\n","permalink":"https://mgorbatyuk.dev/blog/management/2023-02-26-development-processes/","summary":"Картинка взята отсюда\nОчевидные вещи нужно проговаривать\nТак говорил мой тимлид, закончивший юрфак, но ушедший в айти. Говорил он так о процессах разработки: свод правил, по которым работает команда. Этакий кодекс программиста отдела N. Этот свод правил должен быть публичным и каждый должен знать, где его прочесть. Но зачем нужно описывать то, что и так всем известно? Давайте обсудим.\nПравила работы в команде есть всегда, даже если они нигде не описаны и никем не проговорены.","title":"Любые процессы разработки должны быть явными"},{"content":"Этот текст - шпаргалка по книге \u0026ldquo;Говори красиво. Выступай легко\u0026rdquo; от Нины Зверевой и Светланы Иконниковой. Я считаю, что книга очень полезная, но в ней много информации, которую легко забыть. Поэтому я решил сделать шпаргалку, чтобы в будущем можно было быстро вспомнить основные моменты.\nЧасть 1. Сторителинг В любой истории есть герой. Во время истории с ним что-то случается, причем неожиданно. Плохое, хорошее, веселое, трагическое - любое.\nНельзя Можно Рассказывать истории долго Уложить историю в 1-2 минуты Ничего не сообщить о герое - какой он, чего хочет, как выглядит В начале истории презентовать главного героя В самом начале рассказать концовку Держать интригу 10 инструментов рассказчика: Внятная речь Интонация Ваши глаза. Поглядывай по 2 сек на зрителей в разных частях ацдитории. Слова в начале истории. Как-то нужно зацепить слушателя. Тайминг. История - не более трех минут. Сдержанные эмоции. Рассказываешь анекдто - будь невозмутим. Паузы. Не будь монотонным. Картинки и фотографии. Юмор. Шути над собой, люди сильнее уважают тех, кто над собой смеется, чем тех, кого распирает от чсв. Метафоры. Части истории: Вступление. Описываем героя. Описываем быт героя, чем он живет. Что-то происходит, что влияет на жизнь героя. Возникла проблема или опасность. Подробно рассказываем, что чувствует герой. Как весь мир рухнул, как стало плохо жить. Герой собирается с духом, делает нечто для исправления ситуации. Итог. Герой пожинает лавры, возвращается к привычному. Быстро проходимся по пунктам 1-3, затем долго рассказываем о переживаниях в пункте 4, затем быстро идем по пунктам 5 и 6.\nЕсли рассказываешь про себя, то нужно повернуть так, что на самом деле ты рассказываешь историю о слушателях. Главное - чтобы история откликалась в слушателях. О своих достижениях рассказать тоже можно, пошутив над собой.\nВ рассказе говорим о деталях, о том, что может вызвать эмоции. Как только слушатель примерил ситуацию на себя - он твой.\nРассказы в незнакомой компании В компании друзей новчику лучше сначала прислушаться, наблюдать, а уже потом рассказывать истории. В компании, где все незнакомы друг другу, молчать нельзя - нужно сразу захватывать внимание людей. Будь тактичным и доброжелательным. Первые истории, которые можно рассказывать:\nИстории короткие. Длинные истории прибережем на потом, когда ближе познакомимся Истории веселые Истории можно быстро закончить. Случиться может все что угодно, поэтому истории нужно уметь закончить буквально за пару слов в случае, если собеседнику нужно идти. У истории должна быть одна цель:\nЗаполнить паузу Развеселить людей Сообщить полезную информацию Поделиться своей историей на ту же тему, о которой кто-то другой рассказывал только что Обратить на себя внимание. Часть 2. Презентация и выступления на публике Презентация - осознанное выступление, к которому готовятся. Когда ты понимаешь, что нужно слушателям, и даешь им это. Когда спокойно и аргументированно злагаешь точку зрения, даже если внутри все кипит.\nАудитория ничего не обязана: ни слушать, ни смотреть, ни понимать, ни включаться в работу. Задача спикера - заинтересовать слушателей.\nОшибки презентации Забыть узнать тайминг презентации не проверить оснащение зала не записать свое выступление на диктофон. Такая тренировка поможет выявить нескладные предложения. В презентации есть две составляющие: мысль спикера и структура. Нужно ответить на два вопроса себе:\nО чем моя презентация? Опиши парой слов то, про что рассказывать будешь. Придумай несколько формулировок, так презентацию получится сделать лучше. Что именно я хочу рассказать по теме? По теме можно рассказать с разных точек зрения, тут нужно знать свою аудиторию. Почему люди не слушают? Согласно исследованиям, слушатель дает 8 секунд спикеру, чтобы тот его заинтересовал. Перед презентацией нужно ответить себе на вопросы:\nКто мои слушатели? Что они знают по теме выступления? Что они любят? Что их волнует? О чем они думают? Какие темы им важны? Есть лайфхак: нужно заготовить пару шуток по теме, чтобы рассказать их, когда почувствуешь, что внимание аудитории угасает. Еще лайфхак: люди любят неожиданные повороты сюжета. Всю презентацию люди врядли запомнят, и нужно сделать так, чтобы они запомнили одну простую и главную мысль. Нужно даже ее повторить несколько раз в течение презентации: на 10 минут выступления - 5-7 раз повторить мысль. Также можно задавать вопросы аудитории, чтобы держать их в тонусе.\nЕсли внимание аудитории переключилось на нечто неожиданное, то нужно реагировать на это тоже и постараться перетянуть внимание на себя назад. Попробуй позваимодействовать с неожиданным объектом и сделать вид, что это по твоей воле произошло или ты был готов, как минимум.\nСлайды Слайды с текстом не нужны. Диаграмма должна быть простой и понятной с первого раза. Видео лучше не использовать. Но если очень хочется, то не более 15 сек. Каждую картинку лучше комментировать не менее двух минут. Хочется показать много? Нет, старайся показать 1-2. Начало и конец презентации 50% успеха - это начало и финал. Если не зацепил в начале, уже все равно как заканчивать - не будут слушать. Если зацепил в начале, но разочаровал в конце, то никто и не запомнит, как здорово начал. Нужно выучить фразы, которыми будешь открывать и закрывать свою презентацию.\nНе начинай говорить сразу. Вышел на сцену, осмотрел быстро зал, выдохнул и начал говорить. Хорошая идея - начать выступление с вопроса зрителям или с интриги. А еще лучше - с противоречивой информации, которую будешь раскрывать в процессе выступления.\nОтлично работает такой прием: заканчиваем выступление той же фразой, которая была в начале выступления. Второй прием - снова задать вопрос, сделать слушателей экспертами. Третий прием - высказать в фионале парадоксальную мысль, перевернув все, о чем говорили до этого. Так строятся все анекдоты.\nКак перебороть страх выступлений? Подготовиться, отрепетировать. Волнение - нормально. Поблагодари себя Перед выходом на сцену вдохни и выдохни несколько раз. Разомни язык скороговорками. Вспомни случаи успеха. Образ спикера Нужно одеться так, чтобы отличался образ от обычной одежды Галстук, худи с надписью, подходящей теме выступления, яркая рубашка, костюм, красная галстук - все это поможет выделиться из толпы. Одежда должна быть удобной и комфортной. Стресс из-за одежды - ни к чему Успешное выступление - 50% того, что говоришь, и 50% того, как говоришь\nВ выступлении важны паузы, чтобы делать акценты Нужно двигаться на сцене и говорить с интонациями Нужно произносить слова четче, чем в обычной жизни Интонация - как мелодия. Музыка из одной ноты надоедает Аудтория любит людей, у которых горят глаза, который легко шутит над собой и который улыбается залу Перед выступлением Не скрывай волнение от близких принеси презентацию на флешке и в облаке преврати волнение в кураж Выходи на сцену в последний момент. Пусть публика успокоится За пару минут до выступления лучше ни с кем не разговаривать. Оставь время для себя В первые секунды выступления лучше ничего не говорить, а просто смотреть на аудиторию. Пусть они успокоятся. После выступления и во время нее Попроси друга задать первый вопрос - это оживит аудиторию Задай вопрос самому себе и тут же ответь на него Ответ должен быть коротким, но не односложным Последний слайд - ссылка на свои контакты Не стоит игнорировать неожиданности, произошедшие во время выступления Не игнорируй хейтеров, будь доброжелателен. Вступишь в перепалку с хейтером - залу наскучит она быстро, потом внимание не вернуть. Предложи хейтеру обсудить тему после, \u0026ldquo;чтобы не отвлекать аудиторию от доклада\u0026rdquo;. Покажи, что заботишься об аудитории Часть 3. Как вести блог Нужно определиться с посылом блога:\nЭто про меня? Аудитория должна узнать себя в твоих постах. Это про \u0026ldquo;удивительное\u0026rdquo;? Рассказ о чем-то, что есть у тебя и нет у других. Это про смешное? Юмор, мемы. Это полезно? Люди любят познавать что-то новое. \u0026ldquo;Я ему верю\u0026rdquo;. Репосты авторитетных людей и комментарии к ним. Нужно понять свою целевую аудиторию. Для кого пишем, как нужно писать. Можно писать для них, но случайно писать все время про себя и не понять, почему блог не интересен никому.\nКак сделать блог интересным? Блог - публичное высказывание. Не просто ты должен знать ЦА, но также должен ответить на вопросы:\nчто ты хочешь сказать своей ЦА? Как именно будешь говорить Советы Заранее готовь сценарий поста, видео или иного контента. Нужно продумать как начать и как закончить. О чем история? Как начнется, что будет в основной части и чем закончится? Кто будет главным героем в посте? Про кого или про что пост? Герой в начале не равен герою в конце поста Как писать посты? Не знаешь как начать? Пиши что приходит в голову. На седьмом или восьмом абзаце увидишь главную мысль. Не останавливайся и продолжай писать дальше.\nКак начать текст или видеоблог?\nНачать с важной и неизвестной мысли для читателя Использовать слова-якоря: \u0026ldquo;однажды\u0026rdquo;, \u0026ldquo;Со мной случилось страшное\u0026rdquo;, \u0026ldquo;Вчера опозорился\u0026rdquo; и т.д. Начни текст с прямой речи, а видео - с живой картинки. Люди любят диалоги Начни с оборванной фразы. Тогда читателям будет интересно, с чего все началось и чем закончится Провакационная фраза, вводящая в ступор. Аккуратно с ней, фраза не должна быть оскорбительной. Создавай эффект присутствия Рассказывай картинками, не используя прилагательные. Существительные и глаголы - залог успеха хорошего рассказа. Используй короткие фразы. Люди не любят читать длинные предложения. Пиши диалогами. Так понятней, кто кому и что сказал. Помимо слов, напиши, что подумал автор слов, или что сделал, или какую интонацию применил. Задавай себе вопросы. Так читатель вовлекается в текст вместе с автором. Почувствуй ритм текста, почитай вслух. Складно ли написан текст? Если при чтении вслух запинаешься или не хватает дыхания - перепиши абзац. Используй сравнения. Сравнить что-то неизвестное с чем-то известным - самый лучший способ объяснить неизвестное. Юмор. Ирония. Особенно когда говоришь о своем успехе - юмор сделает так, что твой успех не вызовет отторжения у читателя. Финал Главное правило хорошего финала - придумай финал заранее. Читатель и зритель должен испытать максимум эмоций в конце.\nВарианты интересного финала \u0026ldquo;С ног на голову\u0026rdquo;. Частый прием в анекдотах. Эмоциональный финал. Слеха счастья или печали в конце. Открытый финал. Неизвестно, что будет дальше. Или призываешь читателя помочь с финалом: \u0026ldquo;Мне важно ваше мнение. Делитесь мыслями в комментариях\u0026rdquo; После того, как текст написан, дай ему \u0026ldquo;остыть\u0026rdquo; полчаса. Прочти потом снова и подумай, нет ли в нем лишнего или чего-то может не хватает?\nЛайфхаки для видео Правильный свет. Свет от окна должен падать слегка наискосок Зрители обращают внимание на глаза говорящего Свет лучше пусть будет искусственный. Солнечный свет оставит на щеках глубокие тени. Используй штатиф. Камера должна быть статичной Крупный план. Крупный план - лицо и плечи, средний план - человек по пояс, общий план - человек в полный рост. Детальная проверка. Обидно будет, если видео удалось, но на столе видны пятна от кружки Глубина кадра. Никогда не снимай на фоне стены, позади должен быть объем Грим, свет, съемка Макияж: тональный крем и пудра. Камера покажет все изъяны кожи Камера прибавляет +1 размер к одежде Спокойные цвета одежды, но нет белым рубашкам Интервью Интервью - про человека, которого вы позвали Нужно определиться, берешь ты интервью у героя или у эксперта. Если у героя, тогда больше вопросов о его жизни, если у эксперта, то больше вопросов о его профессии или о полезной информации, которой эксперт делится. Нужно значит о человеке больше, чем он сам о себе, чтобы интервью получилось интересным. В интервью должно быть 50% заготовленных вопросов и 50% - уточняющих. Интервью ведет тот, кто задает вопросы Если гость отвечает односложно, то нужно задать вопрос, который вызовет эмоциональный отклик Комментарии и лайки Если вас комментируют, значит пост зацепил автора комментария.\nОднажды Вольтер сказал: \u0026ldquo;Я не согласен ни с одним вашим словом, но готов умереть за ваше право говорить то, что вы думаете\u0026rdquo;.\nЕсли в комментариях человек высказывает мнение, с которым ты не согласен, то спорь с ним, приводи аргументы, но не оскорбляй. Комментатор имеет право на свою точку зрения.\n","permalink":"https://mgorbatyuk.dev/blog/opinion/2023-02-08-speaking-about-review/","summary":"Этот текст - шпаргалка по книге \u0026ldquo;Говори красиво. Выступай легко\u0026rdquo; от Нины Зверевой и Светланы Иконниковой. Я считаю, что книга очень полезная, но в ней много информации, которую легко забыть. Поэтому я решил сделать шпаргалку, чтобы в будущем можно было быстро вспомнить основные моменты.\nЧасть 1. Сторителинг В любой истории есть герой. Во время истории с ним что-то случается, причем неожиданно. Плохое, хорошее, веселое, трагическое - любое.\nНельзя Можно Рассказывать истории долго Уложить историю в 1-2 минуты Ничего не сообщить о герое - какой он, чего хочет, как выглядит В начале истории презентовать главного героя В самом начале рассказать концовку Держать интригу 10 инструментов рассказчика: Внятная речь Интонация Ваши глаза.","title":"Говори красиво. Выступай легко. Шпаргалка"},{"content":"Why do you need to increase the version of the nuget package? When you push a new nuget package to nuget.org, you need to increase the version of the package. Otherwise, you will get an error. I will show you how to do it automatically with Github Actions. As an example, I will use my nuget package MaximGorbatyuk.DatabaseSqlEndpoints.\nTL;DR You need github.run_number variable to increase the version, The release.yml file as example for you, Code example - MaximGorbatyuk.DatabaseSqlEndpoints. Workflow Usually, I use the following workflow:\nWork on a feature in a separate branch. For example, feature/1234-add-new-feature. Create a pull request to the dev branch. Code in the pull request is tested by Github Actions CI. If the tests are successful, the pull request is merged to the dev branch by me. If I decide to deply new version of nuget, I merge the dev branch to the main branch. New code in the main branch is used for building nuget package. the nuget package is deployed to nuget.org. For automatic version increase, I use a little hack. Github has run_number variable that represents the order number of the pipeline run. I use this number as last version number of the nuget package.\nThe main problem is how to put this number into the csproj file. Here I use a sed command to replace the version number in the csproj file inside \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt;. The sed command looks like this:\nsed -i \u0026#34;s/\\(\u0026lt;Version\u0026gt;\\([0-9]\\+\\.\\)\\{2\\}\\)\\([0-9]\\+\\)/\\1${{github.run_number}}/\u0026#34; ${{env.PROJECT_FILE}} For example, the version is 1.0.0 and the github.run_number is 5. The result will be 1.0.5. That\u0026rsquo;s what I need. Let\u0026rsquo;s see how to use it in Github Actions.\nHow to setup repository First of all, you need to add two yml files to your repository:\ntest.yml release.yml The first one test.yml will be responsible for testing the code. The second one release.yml will be responsible for building the nuget package and deploying it to nuget.org.\nThe test.yml is very simple. It looks like this:\nname: Build and test on: push: branches: [dev] # run tests on push to dev branch pull_request: branches: [dev] # OR run tests on pull requests to dev branch jobs: Test: runs-on: ubuntu-latest env: solution-file: MaximGorbatyuk.DatabaseSqlEndpoints.sln steps: - uses: actions/checkout@v2 - name: Backend build and test uses: actions/setup-dotnet@v1 with: dotnet-version: \u0026#34;6.0.x\u0026#34; # SDK Version to use. - name: Install dependencies # installing dependencies for all projects in the solution run: dotnet restore ${{env.solution-file}} - name: Test # running tests for all projects in the solution run: dotnet test ${{env.solution-file}} --no-restore --verbosity normal The release.yml is a bit more complicated. It looks like this:\nname: Publish nuget on: push: branches: [main] # run deployment on push to main branch jobs: build: runs-on: ubuntu-latest timeout-minutes: 15 env: project: MaximGorbatyuk.DatabaseSqlEndpoints PROJECT_FOLDER: ./MaximGorbatyuk.DatabaseSqlEndpoints PROJECT_FILE: MaximGorbatyuk.DatabaseSqlEndpoints/MaximGorbatyuk.DatabaseSqlEndpoints.csproj steps: - name: Checkout uses: actions/checkout@v2 - name: Setup .NET Core uses: actions/setup-dotnet@v1 with: dotnet-version: \u0026#34;6.0.x\u0026#34; # .NET SDK version to use. # github.run_number is a number of the pipeline run. It is increased automatically. # That\u0026#39;s why we can use it to increase the version of the nuget package. # Here we replace the last number in the version with github.run_number. - name: Set version run: | echo \u0026#34;Buid version is ${{github.run_number}}\u0026#34; sed -i \u0026#34;s/\\(\u0026lt;Version\u0026gt;\\([0-9]\\+\\.\\)\\{2\\}\\)\\([0-9]\\+\\)/\\1${{github.run_number}}/\u0026#34; ${{env.PROJECT_FILE}} - name: Build working-directory: ${{env.PROJECT_FOLDER}} run: dotnet build --configuration Release - name: Pack working-directory: ${{env.PROJECT_FOLDER}} run: dotnet pack --configuration Release --no-build --output . # Here we use external public config file to publish nuget package. # The script needs to know the path to the csproj file and the nuget API key. - name: Publish nuget package uses: brandedoutcast/publish-nuget@v2.5.2 with: PROJECT_FILE_PATH: ${{env.PROJECT_FILE}} NUGET_KEY: ${{secrets.NUGET_API_KEY}} The NUGET_API_KEY is a Github secret variable that contains the API key for nuget.org. Here you can learn how to get it. Here is a screenshot of the secret variable in my repository:\nThat\u0026rsquo;s all. Now you can push your code to the dev branch and it will be tested by Github Actions. When you are ready to deploy new version of nuget package, you need to merge the dev branch to the main branch. After that, the release.yml will be triggered and the new version of the nuget package will be deployed to nuget.org.\nIf you want to use the same approach in Gitlab CI, you may use CI_PIPELINE_IID variable instead of github.run_number. It represents the project-level IID (internal ID) of the current pipeline as well as github.run_number in Github Actions.\nI hope this tutorial will be useful for you. If you have any questions, you may find my contacts here.\n","permalink":"https://mgorbatyuk.dev/blog/development/2023-02-03-auto-nuget-version-increase/","summary":"Why do you need to increase the version of the nuget package? When you push a new nuget package to nuget.org, you need to increase the version of the package. Otherwise, you will get an error. I will show you how to do it automatically with Github Actions. As an example, I will use my nuget package MaximGorbatyuk.DatabaseSqlEndpoints.\nTL;DR You need github.run_number variable to increase the version, The release.yml file as example for you, Code example - MaximGorbatyuk.","title":"How to increase nuget package version automatically with Github Actions"},{"content":"Disclaimer У меня есть опыт руководства командой, которая находилась в одной локации. Советы актуальны и для распределенных команд, однако для них стоит учесть разные таймзоны. Когда я пишу \u0026ldquo;разработчики\u0026rdquo;, я имею в виду не только программистов, но и тестировщиков, аналитиков, дизайнеров и всех, кто выполняет задачи бизнеса и помогает строить продукт. 1. Ты - не разработчик Время, когда можно было несколько часов подряд кодить, закончилось. Теперь твоя личка в распоряжении ПМа, продакта, бизнес-аналитика, тестировщиков и разработчиков. У тимлида всегда хотят что-то узнать, посоветоваться с ним, согласовать решение, пожаловаться на товарища. Молодому тимлиду нужно быть готовым к этому и расставлять приоритет.\nЦель разработчика - закрыть задачу. Цель тимлида же - закрыть (под)проект, и сюда включена работа с людьми в том числе: отстаивание интересов, найм, собеседования, оценка перформанса ребят в команде, увольнение, etc.\nОдним из первых, что я сделал на старте тимлидства - забукал в календаре слоты, чтобы покодить и чтобы никто не назначил мит на этот слот. Помогает перевести дыхание и держать руку на пульсе проекта. Также я настроил себя таким образом, чтобы фокусироваться не на закрытии конкретных задач, а на закрытии спринта или скоупа работы. Можешь делегировать - делегируй, можешь отбросить что-то - отбрасывай, можешь упростить требования бизнеса - упрощай. Смести фокус внимания на устранение препятствий проекта.\n2. Устанавливай правила Правила нужны не для того, чтобы их нарушать, а чтобы каждый в команде знал, что он может делать и что делать не может и не должен. Тимлид составляет кодекс - что-то вроде свода правил работы над проектом. Кодекс должен быть опубликован там, где каждый участник команды и даже компании сможет его прочесть. Не бойся прописывать очевидные истины. Если кажется, что \u0026ldquo;это и так все знают\u0026rdquo;, то все равно пропиши, потому что может и не знают. Формулировки должны быть краткими и точными, нет лозунгам типа \u0026ldquo;работаем хорошо, а плохо - не работаем\u0026rdquo;. Здесь я опубликовал кодекс, которому призывал следовать ребят в своей команде.\nПриведу здесь список принципов, которые я считаю первичными:\nПринимаем реальность и работаем с ней. Нет ничего страшного в том, что мы допускаем ошибки; страшно, когда мы не учимся на них. Мы выявляем проблемы и не миримся с ними. Мы исправляем их и делаем выводы. Мы используем инструменты и утвержденные процедуры, чтобы регламентировать выполнение работы. Явное лучше неявного Каждый тиммейт должен знать ответ на вопрос \u0026ldquo;а что делать в случае, если \u0026hellip;?\u0026rdquo; Таким образом, отвлекать тимлида будут меньше. Если возникла ситуация, не озвученная в своде правил - дополняй список установок.\n3. Автоматизируй по-максимуму Чем меньше тебя будут отвлекать, тем лучше. Пользуйся инструментами автоматизации, чтобы минимизировать конфликты и ошибки:\nНастрой CI/CD, Добавь stylecop для проверки синтаксиса, пусть автоматика реджектит невалидный код, Пиши сам и требуй автотесты, их много не бывает, Не забывай о правилах проведения кодревью, Сокращай время подготовки окружения: минимум действий от пулла репозитория до поднятия всей инфраструктуры на PC Здесь я написал те действия, которые я делаю для проектов на .NET и Angular. Споры о том, что использовать - табы или пробелы - не иссякнут никогда, а энергию отнимают очень быстро, поэтому пусть автоматика расскажет новичкам в команде о том, какой синтаксис принят тут.\n4. Позволь им ошибиться Тимлидство - работа с людьми, а люди ошибаются. И пускай - будут учиться быстрее. Даже если ты видишь, что джун хочет реализовать не самое оптимальное решение, но эта неоптимальность не такая страшная и несильно повлияет на проект, то дай ему шанс попробовать и ошибиться. Возможно, джун увидит в процессе неправильность подхода, а может спустя время. Получит только опыт, и в будущем будет более обдуманно относиться к архитетуре.\nТимлидство - работа с людьми, а люди ошибаются. И пускай - будут учиться быстрее.\nПусть люди ошибаются, но ошибаются только один раз. Из каждой ошибки должны быть сделаны выводы: новое правило в кодексе, более строгая система проверки кода, больше автотестов, новая процедура в процессе разработки. Повторные ошибки должны пресекаться.\n5. Адаптируй правила Ошибки совершают не только твои ребята, но и ты сам. В том числе и при составлении правил. Кодекс должен работать на благо команды, но если некоторые пункты противоречат каким-то процессам в компании, то нужно трезво посмотреть на ситуацию: это процесс в компании неоптимален или это правило сделает только хуже? Важно рефлексировать и разобрать, изменение чего из двух сделает лучше команде и проекту.\nКодекс команды, который я опубликовал в гитхабе, не конкретизирован, но его можно легко адаптировать под свои нужды.\n6. Улучшай условия работы Чем лучше команда работает, тем лучше справляется тимлид. Уменьшай поводы для пустых конфликтов, устраняй технические проблемы и препятствия, убирай ненужные встречи и созвоны.\nНовичок мучается с настройкой окружения? Организуй скрипт, который установит нужные SDK и сервисы на компьютер. Деплой требует кучу ручных действий? Удели внимание на Continious Delivery на проекте. На ревью много споров о форматировании? Настрой stylecop, чтобы только один формат кода был дозволен, а все иное - реджектилось пайплайном билда. Какая-то библиотека работает нестабильно - убирай ее из зависимостей проекта. Наблюдай за тем, как люди работают отдельно и команде в целом. Оценивай коммуникации и взаимодейтсвия между людьми и системами - вдруг то, что сложилось исторически, неоптимально и нуждается в рефакторинге.\n7. Успехи - команды, провалы - твои Как бы ни было обидно тимлиду, но успех в публичном поле - это действительно успех команды. Несмотря на то, что успешный проект - достижение для руководителя команды, тимлиду нужно хвалить команду и особенно перед остальными. Тимлид все настроил, организовал, проблемы выявил и устранил - он молодец, повод дописать себе в резюме +1 полезную строку. Тем не менее, хвали команду, потому что каждый из них помогал тебе достичь этого.\nТимлид все настроил, организовал, проблемы выявил и устранил - он молодец\nПровалы же только твои, молодой тимлид, именно потому что это ты где-то недонастроил, недоорганизовал, не выявил вовремя проблемы или не устранил их. К этому нужно быть готовым и нести ответственность за проект. Каждый из подчиненных был ответственнен за свои задачи, они свое выполнили, а задача тимлида - сдать проект целиком, и именно поэтому провалы ложатся только на него.\n8. У тимлида другие метрики Успех работы тимлида отражается в следующем:\nКоманда работает сама, ей не требуются ручные указания, Рабочие конфликты возникают по архитектурным вопросам, Каждый конфликт приводит к улучшению работы: новое правило, багрепорт, автотест, адаптированный процесс, Каждый член команды знает, что делать в той или иной ситуации и без подсказки тимлида, Команда собрана из людей с разными навыками, но эти навыки дополняют друг друга, Bus factor минимизирован, в том числе и для тимлида. Если тимлид в отпуске, то работа не останавливается, Сокращение времени адаптации новичков в команде, Рост профессионального уровня разработчиков в команде, Дэдлайны обсуждают с командой и не нарушают. Иногда у тимлида может появиться жгучее желание взять самую сложную или интересную задачу из спринта. Так уже делать не получится, иначе спринт провален из-за того, что у тимлида было слишком много незапланированных митингов. Как бы ни было грустно, бери в работу только такие задачи, где дэдлайн неважен или результат нацелен на улучшение работы команды.\n","permalink":"https://mgorbatyuk.dev/blog/management/2023-01-03-advices-for-young-teamleads/","summary":"Disclaimer У меня есть опыт руководства командой, которая находилась в одной локации. Советы актуальны и для распределенных команд, однако для них стоит учесть разные таймзоны. Когда я пишу \u0026ldquo;разработчики\u0026rdquo;, я имею в виду не только программистов, но и тестировщиков, аналитиков, дизайнеров и всех, кто выполняет задачи бизнеса и помогает строить продукт. 1. Ты - не разработчик Время, когда можно было несколько часов подряд кодить, закончилось. Теперь твоя личка в распоряжении ПМа, продакта, бизнес-аналитика, тестировщиков и разработчиков.","title":"Совету начинающему тимлиду"},{"content":"Тайм менеджмент Тайм-менеджмент - дело одновременно сложное и простое: с одной стороны - делай все вовремя, но с другой - почему же с тайм-менеджментом у многих беда? Вроде занимаешься какими-то делами в течение дня, под вечер устаешь, а перед сном вдруг понимаешь, что не успел сделать еще кучу дел. Решаешь завтра обязательно сделать все, что нужно, но и следующим вечером понимаешь, что снова ничего не успел. Давайте разбираться в чем причины и как с этим быть.\nВсему причина - прокрастинация? В мире нет такого человека, у которого в сутках больше времени, чем у остальных. Однако есть люди, про которых мы можем сказать точно, что у них хороший тайм-менеджмент. Они умеют распределять время на задачи, легки на подъем, они делят крупные задачи на более мелкие. На другой стороне медали мы увидим человека, который откладывает дела на самый последний момент и начинает писать курсовую за неделю до сессии. Адепты прокрастинатологии.\nЕсли посмотреть в академическое определение прокрастинации, то мы увидим:\nПрокрастинация — это постоянное откладывание важных дел, которое приводит к жизненным проблемам и негативным психологическим эффектам, а именно: стрессу, чувству вины, потере производительности, заниженной самооценке.\n(c) с просторов интернета\nПрокрастинация - это отсрочка в принятии важных решений, отлынивание от обязательств, стремление отложить дела или неприятные мысли на потом\n(c) Викисловарь\nУпростим определения. Прокрастинация - это откладывание дел \u0026ldquo;на потом\u0026rdquo;. А это \u0026ldquo;потом\u0026rdquo; никогда не наступает. Поэтому люди не успевают сделать дела, которые считают нужными - они часто боятся начать что-то делать. Задачи кажутся огромными и непосильными, не знаешь как к ним подступиться. Ты боишься даже начать есть такой огромный пирог. Но если ты начнешь есть, то пирог съеден. А если не начнешь, то он останется в твоем холодильнике до конца времен.\nКак победить прокрастинацию Средства у нас есть. У нас ума не хватает.\n(c) кот Матроскин\nВремя есть у всех, но не каждый умеет его распределить так, чтобы это дало результат. Мозг человека устроен так, что между сложной задачей и важной он выберет понятную. Например, посмотреть мемы в интернете или позалипать в тиктоке вместо подготовки к сессии. Уверен, что каждый замечал за собой такое дикое желание отвлечься во время скучной лекции или выполнения домашней работы. Так устроен мозг многих людей, но мало кто признает эту проблему и учится с ней жить. В статье я покажу практики, которые я применяю сам для того, чтобы победить прокрастинацию и все успеть. Или хотя бы постараться успеть все.\nПобеждаем прокрастинацию 0. Думаем когда нужно, а когда не нужно - не думаем Первое универсальное правило, оно же совет на все времена: в любой непонятной ситуации — думай.\n(c) Максим Дорофеев, «Джедайские техники»\nЕсть в интернете блоггер и исследователь Тим Урбан, он ведет блог \u0026ldquo;Wait But Why\u0026rdquo; (https://waitbutwhy.com/) и много пишет о прокрастинации и борьбе с ней. По его мнению, в голове у людей есть человек думающий и обезьянка, которая ленива и хочет делать все на автомате всегда. И обезьянка эта активна бОльшую часть времени, позволяя мозгу экономить энергию. Максим Дорофеев взял эту идею и развил ее в своих книгах для русскоязычной аудитории.\nПрокрастинация - это неконтролируемое поведение этой обезьянке, мы позволяем ей быть активной всегда. Ну а борьба с прокрастинацей заключается в усмирении и подчинении этой самой обезьянки с помощью различных практик и приемов. Поэтому самый главный совет, который можно дать всем людям: \u0026ldquo;В любой непонятной ситуации - думай\u0026rdquo;\n1. Составляем списки задач Мало вести списки дел, нужно еще и формировать их правильно. Лучше всего будет прописывать их такими, чтобы обезьянке в голове было понятно что делать. Они должны быть составлены подобным образом:\n\u0026ldquo;Позвонить в парикмахерскую, чтобы записаться на стрижку\u0026rdquo; вместо \u0026ldquo;Подстричься\u0026rdquo;, \u0026ldquo;Съездить на строительный рынок, чтобы купить X, Y, Z\u0026rdquo; вместо \u0026ldquo;Купить стройматериалы\u0026rdquo;, \u0026ldquo;Взять в библиотеке книгу N для курсовой\u0026rdquo; вместо \u0026ldquo;Взять книги для курсача\u0026rdquo;. Конкретные указания для \u0026ldquo;глупуой\u0026rdquo; обезьянке. Читая эти задачи, мозг не вспоминает детали и не думает во время чтения. Он уже видит что нужно сделать. Представь, что у тебя есть не самый смышленый помощник, которому нужно давать конкретные и однозначные указания. Этот несмышленый помощник - и есть ты, когда обезьянка в твоей голове активна. Думай при составлении задач. Упрости жизнь обезьянке, напиши задачу однозначно.\n2. Учитываем приоритет Для того, чтобы понять, что делать в первую очередь, я пользуюсь матрицей Эйзенхауэра.\nМатрица Эйзенхауэра – знаменитый вид графика с двумя осями координат. На оси А (горизонталь) расположен фактор срочности, а на оси Б (вертикаль) – фактор важности. Четыре поля, получившиеся при пересечении, можно назвать «важными срочными делами», «важными несрочными делами», «неважными срочными делами» и «неважными несрочными делами».\nСрочные и важные задачи делаем в первую очередь, несрочные и неважные можем даже и не делать. При пополнении списка задач необходимо еще и распределить их по матрице, чтобы отсортировать затем в порядке приоритета.\n3. Просто начни делать хоть что-нибудь В одном из видео блогер Аня Смирнова сказала:\n\u0026ldquo;Чтобы захотеть что-то делать – надо что-то делать\u0026rdquo;\n(c) Аня Смирнова (@insta conservi)\nГлавное – начать, а там по инерции прогресс пойдет. По чуть-чуть и съешь слона. Можно просидеть в соцсетях весь день, угнетая себя за то, что ничего полезного не делаешь, а можно с утра начать работу над курсовым проектом, и к обеду уже будет сделано хоть что-то. А вдруг к вечеру уже и половина будет готова – как вдохновение придет.\nДаже если сделаешь немного - это лучше, чем не сделать совсем ничего.\n4. Мотивация – ничто, дисциплина – всё Можно представить картину: посмотрел мотивирующий ролик вечером и пошел в три ночи качать пресс и читать умные книги. А на утро невыспавшийся и снова нет настроя на работу. И так каждый день. Если знакомо, то поздравляю: у тебя нет дисциплины.\nУ меня для тебя две новости:\nхорошая: дисциплину можно выработать плохая: будет тяжело первое время. Делай что-то регулярно через \u0026ldquo;не могу\u0026rdquo; и \u0026ldquo;не хочу\u0026rdquo;. Потом уже будет легче. А если вы не начнешь, то ничего не поменяется.\n5. Разгрузи голову Одна из причин прокрастинации – внутреннее ощущение, что делать нужно еще столько много всего. Тут тебе поможет практика разгрузки головы. Веди списки дел на день или неделю, пиши в блокноте все мысли, которые приходят в голову. Выбросить текст всегда успеешь, зато полезную мысль уже не потеряешь.\nПопробуй вести дневник - удели 10-15 минут вечером, чтобы написать что-нибудь в дневник. Что произошло днем, какие мысли приходили в голову, какие чувства испытывали. Цель в том, чтобы делать это регулярно. Чем больше будешь писать, тем легче будет даваться написание текстов на любую тему. Просто попробуй.\n6. Очищай инбокс Письма в твоем почтовом ящике - это список дел. Каждое письмо требует какой-то реакции: ответа, принятия решения или игнорирования как спама. Очистка папки входящих покажет, что у тебя нет незаконченных или забытых дел. Ответил на письмо – отправил в архив. Получил что-то полезное из письма - перенеси в блокнот. Купил билет и получил письмом файлы - перенеси их в календарь, а письмо – в архив.\nПустая папка входящих писем даст тебе чувство спокойствия, что хотя бы тут ты ничего не пропустил и не откладываешь на потом.\n7. Тик-ток – зло Мозг устает при переключении контекста. Вот ты делаешь домашку, а тебе скинули мем в личку. Чем больше мемов скидывают, тем тяжелее вернуться к домашке. Поэтому, если ты делаешь что-то важное, отключи все уведомления и не открывай соцсети. Так ты сможешь сосредоточиться на своем деле. Если посмотришь мем или ответишь на сообщение друга не через минуту, а через час - никто не умрет и не обидится. А если обидится, то подумай, нужны ли тебе такие друзья.\nУбери уведомления из приложений соцсетей и проверяй непрочитанные раз в час. Заодно и отдохнешь минут 5-10. Вот увидишь, что этого достаточно.\n8. Упал – отжался В здоровом теле - здоровый дух. Если занимаешься каким-нибудь спортом утром, то быстрее взбодришься и активизируешь тело и мозг для работы. Если тренировка вечером, то \u0026ldquo;сбросишь\u0026rdquo; накопленный стресс и расслабишься перед сном. Даже прогулка от университета до дома лучше, чем ничего. Держи тело в тонусе. Регулярность в тренировках поможет тебе быстрее развить дисциплинированность в себе.\nНе забывай и о сне. Неважно кто ты: жаворонок или сова, нужно спать достаточно времени, чтобы было комфортно днем. Советовать определенное время работы не буду, ведь это - сугубо индивидуальный вопрос.\n9. Не загоняй себя, ты уже сделал много Ты уже молодец, если:\nесли ведешь блокнот, составляешь план дел, регулярно и дисциплинированно работаешь над большой задачей, не откладывая ее на потом Не стоит загонять себя как белку в колесе - отдохни. Ты это заслужил. Важно отдыхать не так, как ты работаешь. Работаешь за компьютером - погуляй. Таскал кирпичи - погляди что там новенького в тиктоке или ютьюбе. Если работать очень долго без перерывов, можно вообще забыть для чего ты трудишься. Мы - всего лишь люди, а не машины.\nПодводя итоги Для того, чтобы успевать все, нужно не времени больше, а приоритезация и дисциплина. Нужно что-то делать – делаешь, и чем раньше начнешь, тем лучше. Лучше делать регулярно и постоянно что-то, чтобы прогресс был постоянным и внутри было ощущение, что все под контролем. Не держи в голове список дел, записывай их. Записывай и какие-то мысли, которые тебя беспокоят. Помни о постоянных тренировках тела и здоровом сне. И не загоняй себя, отдыхать важно и нужно.\nНет никакого тайм-менеджмента, есть прокрастинация, а бороться с ней можно дисциплиной.\nИсточники Ресуры 15 методов управления временем Как бороться с прокрастинацией и стать победителем Свежий подход к Личной Продуктивности и Тайм Менеджменту Тестируем методы тайм-менеджмента Все статьи Тима Урбана (Wait But Why) на русском Картинки взяты отсюда: Свежий подход к Личной Продуктивности и Тайм Менеджменту ","permalink":"https://mgorbatyuk.dev/blog/opinion/2022-11-01-time-management-for-students/","summary":"Тайм менеджмент Тайм-менеджмент - дело одновременно сложное и простое: с одной стороны - делай все вовремя, но с другой - почему же с тайм-менеджментом у многих беда? Вроде занимаешься какими-то делами в течение дня, под вечер устаешь, а перед сном вдруг понимаешь, что не успел сделать еще кучу дел. Решаешь завтра обязательно сделать все, что нужно, но и следующим вечером понимаешь, что снова ничего не успел. Давайте разбираться в чем причины и как с этим быть.","title":"Тайм-менеджмент для студентов"},{"content":"Как часто стоит менять проекты? Какой период времени смены работы можно считать некой нормой? На эти рассуждения меня натолкнуло обуждение в одном из чатов разработчиков. Вопрос действительно интересный.\nDisclaimer Все данные в статье являются моими личными оценками и не являются истиной в последней инстанции. Смена проетка - не всегда смена работодателя. А иногда даже и новая роль на том же проекте. TL;DR: Адекватные сроки:\nГрейд/роль Срок Джун 0.5 - 1 год Миддл 1 - 2 года Сеньор / лид 2 - 3 года Тимлид 2+ лет ПМ 2+ лет Но это не точно.\nА зачем воообще менять проект? Зачем менять работу, если все устраивает? Для себя я решил так: не только я отдаю что-то проекту, но и проект – мне. Когда я рассматриваю новые проекты, то я пытаюсь найти нечто, чему я могу научиться. Есть афоризм: нужно быть самым глупым в комнате. Такой же аналогией я руководствуюсь и при смене проекта – нужно искать людей, у которых можно и нужно научиться чему-то новому для себя.\nЧастая смена проекта имеет смысл для специалистов, которые только в начале своей карьеры. Для состоявшихся разработчиков для смены работы есть и другие причины: интересная предметная область, другой стек технологий, опыт работы в распределенной команде либо новая роль в команде. Задуматься о новом проекте стоит, когда ты чувствуешь, что делаешь изо дня в день рутину и ничто тебя не может удивить. Работа должна приносить удовольствие.\nЕсли менять проект чаще, то это подозрительно Со стороны выглядит так, что специалист скачет с одного проекта на другой, не успевая освоиться и пройти Onboarding толком. Были затрачены ресурсы при найме, адаптации новичка в команде, а тут разработчик уходит, не привнеся толком пользу проекту.\nЧем выше грейд, тем более сложные задачи решает специалист, тем больше виден результат его вклада. К тому же, поначалу человек только осваивается на проекте, происходят притирки с командой, изучает бизнес-область проекта. Поэтому когда специалист меняет часто работу, значит он не успевает освоиться и у него нет возможности ни посмотреть на результаты своего труда, ни ощутимую пользоу преокту принести.\nЕсли разработчик давно работает в компании, которая предоставляет аутсорс/аутстафф услуги, то я смотрю на сроки смены проектов. Для специалиста из \u0026ldquo;продуктовой\u0026rdquo; компании же долгий период работы только во вред карьере.\nА если менять проекты реже? Если разработчик подолгу сидит на одном проекте, то это - звоночек для тимлида при собеседовании. Если специалист сидит несколько лет, не меняя ни проекты, ни компанию, ни свой грейд, то он, скорее всего, не заинтересован в развитии своих навыков и карьеры. При этом он может вполне успешно выполнять свои обязанности. Люди бывают разные, как и потребности в команде, поэтому такой спецаилист вполне может вписаться в вашу команду. Я же при собеседованиях отдам предпочтение другим кандидатам, которые стремятся к углублению своих познаний в разработке.\nСпециалист, который засиделся, становится мастером одного домена и уже учит не технологии и подходы к программированию, а бизнес-сферу. В итоге спустя время, когда проек закроется или по какой-то причине разработчик будет менять работу, ему тяжелее дастся смена проекта, ведь мозги уже не такие гибкие.\nЕсли же человек меняет бизнес-сферу раз в три года, то он успевает посмотреть разные подходы к решению задач. В итоге он становится более гибким и универсальным специалистом.\nТеперь перейдем к срокам Junior – 0.5-1 год Для джунов менять проект приемлемо раз в год. Если я вижу, что джун меняет компании чаще, то я спрашиваю на собесе почему так. Найм спеца стоит времени и денег, и может быть стоит остановить свой выбор на другом кандидате. С другой стороны, молодой специалист не всегда сумеет сделать верный для себя выбор, и поэтому только спустя время он может понять, что ошибся с проектом и командой. Важно помнить об этом тоже.\nДжуну нужно набивать руку, поэтому ему нужно время на одном проекте. Осваивать новые технологии, подходы к программированию проще, когда домен известен и можно увидеть результаты своей работы на проде. Джун делает небольшие задачи, поэтому долго ждать фидбек не придется, и именно поэтому засиживаться дольше года не стоит.\nMiddle – 1-2 года За этот период вполне можно и освоиться в команде, и получить достаточный опыт для своей карьеры. На этом уровне умение выбирать новые проекты для себя уже должно быть развито сильнее, чем у джуна, так что более частая смена работы подозрительна.\nМиддлы продолжают набивать руку на кодинге, углубляют знания в языке программирования, пробует применять на практике новые знания. Задачи миддл решает уже сложнее, поэтому и результаты решений можно увидеть на более далекой дистанции.\nКогда домен уже понятен и адаптация в команде прошла, у миддла появляется возможность готовиться к апгрейду своего уровня до сеньора. Как раз двух лет будет достаточно, чтобы и пользу проекту принести, и увидеть как те или иные решения работают на долгой дистанции, и подтянуть знания для роста.\nSenior – 2-3 года Уровень ответственности, возлагаемый на сеньора, предполагает не просто разработку и перемещение тикетов из статуса TODO в DONE, но и построение новых процессов, и влияение на качество разработки проекта. От сеньора я жду ответственность за ведение какого-то модуля в системе и менторинг коллег с меньшим опытом. Следовательно, результат работы сеньора будет наблюдаться только спустя время, а не через две недели спринта. Более того, я жду, что сам специалист понимает это и наблюдает за примененными изменениями. Если же разработчик считает, что \u0026ldquo;сейчас запилим по-быстрому, а там хоть трава не расти\u0026rdquo;, то для меня это \u0026ldquo;красный флаг\u0026rdquo;.\nЗа два-три года сеньор успевает погрузиться в домен проекта настолько, что начинает предлагать разные решения бизнесу, находит возможности для оптимизации кода и процессов. И чтобы увидеть фидбек, нужно подождать больше времени, чем ждет миддл.\nЕсли специалист сидит дольше трех лет без смены роли в команде, то стоит внимательно изучить список его достижений. Возможно, он занимался внедрением принципиально новых технологий иил процессов разработки в проект и поэтому ему важна была обратная связь.\nTeamlead – 2+ лет Пока что у меня мало опыта в собеседовании на позиции тимлидов, поэтому я руководствуюсь собственным опытом и опытом своих руководителей. Тимлид – это тот, кто умеет запускать проекты, настраивать процессы разработки и собирать команду из людей с теми компетенциями, которые требуются для решения поставленной задачи. Эффективность примененных решений тимлида также можно наблюдать только на длинной дистанции, поэтому смена проекта раньше двух лет и раньше окончания проекта может говорить о том, что тимлиду обратная связь не так важна.\nЗасидевшийся тимлид в одном проекте или продуктовой компании – повод посмотреть на его достижения и развитие проекта. Так же, как и сеньор, тимлид может активно заниматься трансформацией доверенного приложения либо процессов разработки, значит и времени у него это могло занять больше. Отношение к эффективности работы проекта в продакшне – показатель профессионализма менеджера.\nProject Manager – 2+ лет Эффективность работы проектных менеджеров можно оценить только на длительных дистанциях, на мой взгляд. Эффективность освоения бюджета, фидбек и лояльность заказчиков, текучка специалистов в проекте – все это показатели его работы. Частые смены работы – очень громкий звоночек и повод задуматься над тем, чтобы перейти к следующему кандидату. Как и в случае сеньоров и тимлидов, специалист может работать по принципу \u0026ldquo;запустим, а там хоть потоп\u0026rdquo;. Такой подход к работе точно приведет к уходу закзачиков из компании.\nКак понять, что мне нужно менять проект? Я задумываюсь о смене проекта, когда:\nнет возможности применить новые знания и опыт в работе, не сработался с командой, остался самым умным в команде, и мне не у кого учиться чему-то новому и не с кем советоваться, не вижу возможности улучшить продукт, мои идеи не принимаются, не дают свободы в решении задач не вижу, чему еще я могу научиться на проекте. Если я отмечаю 2-3 пункта, то это повод задуматься об обновлении CV.\nНе только цифры Цифры – это интересно, но это лишь повод поговорить. Обсуждайте опыт кандидата и его достижения. Если разработчику нечем похвастаться, кроме как количеством лет на одном проекте, то стоит перейти к следующему кандидату. А если разработчик достигает многого в короткие сроки и это можно наблюдать извне, то нанимайте его как можно скорее. Только не забудьте обсудить, как вы можете помочь ему улучшить навыки и как он может помочь улучшить ваш проект.\n","permalink":"https://mgorbatyuk.dev/blog/employment/2022-10-11-how-much-time-to-spend-on-the-project/","summary":"Как часто стоит менять проекты? Какой период времени смены работы можно считать некой нормой? На эти рассуждения меня натолкнуло обуждение в одном из чатов разработчиков. Вопрос действительно интересный.\nDisclaimer Все данные в статье являются моими личными оценками и не являются истиной в последней инстанции. Смена проетка - не всегда смена работодателя. А иногда даже и новая роль на том же проекте. TL;DR: Адекватные сроки:\nГрейд/роль Срок Джун 0.5 - 1 год Миддл 1 - 2 года Сеньор / лид 2 - 3 года Тимлид 2+ лет ПМ 2+ лет Но это не точно.","title":"Сколько времени работать на одном проекте?"},{"content":"Открытые зарплатные вилки – это когда каждый миддл знает, сколько зарабатывают миддлы и другие грейды в той компании, где он работает. Условно говоря, получает специалист 1500$, но он знает, что вилка его уровня составляет от 1200$ до 2000$. Но просто взять и рассказать всем про деньги, которые они могут получать, нельзя. Мало знать возможности, нужно еще и понимать, как достигнуть ее. Для того, чтобы работники знали путь достижения нового грейда, компании нужно привести в порядок бизнес-процессы.\n1. Открытая информация о грейдах коллег Разработчик, зная свои навыки и грейд, сравнивает себя с коллегами. Например, джун, который хочет расти, ищет для себя ролевую модель. Он видит сеньора в команде и захочет стать таким же. Он будет задавать вопросы и обсуждать решения и по рабочему проекту, и по личным пет-проектам.\nА чтобы новички в команде видели, кто сеньор среди коллег, компании нужна система с публичными профилями и грейдами. Это может быть внутренний интранет, собственное решение или купленное. Также в качестве заглушки используют слак, где каждый напишет в описании профиля свой грейд. В любом случае, разработчики компании должны видеть грейды других.\n2. Открытые стандарты присвоения грейдов Стандартификация грейдов позволит сравнивать умения специалистов в рамках одних компетенций. Каждый работник знает свой грейд и видит грейды коллег. Теперь ему нужно знать, что сделать для повышения грейда. Когда человек не знает, за что присвоен грейд, то он не знает и направление, куда двигаться. Помимо требований, человек заранее видит и задачи, которые выполняет сеньор в вашей компании: проведение собеседований, менторство над коллегами, консультации по другим проектам.\nВ интернете полно роадмапов разработчика для разных направлений. Если разработчики вашей компании следуют разным гайдам, то и сопоставить их навыки вам сложнее. Уделите время и проработайте стандарты грейдирования, чтобы работники знали, как им расти. Если они не будут понимать это, то они пойдут искать возможность в других проектах.\nВажно создать такую систему, где разработчики могут посмотреть требование к грейдам для других специализаций. Возможно, кто-то захочет попробовать себя в другой области и захочет увидеть требования для нее. В рамках одной компании поменять специализацию человеку легче, ведь команда и люди ему знакомы, а процессы уже известны. Работник фокусируется только на освоении новой профессии и не будет тратить энергию на выстраивание взаимоотношений с новыми коллегами.\n3. Политика для менторов и менти Менторство – один из способов помощи обучающимся специалистам. Когда прокачиваешь навыки, необходима обратная связь: в нужную ли сторону ты двигаешься, правильно ли применяешь новые знания. Если же джуны не знают, как получить менторство, они пойдут искать такую возможность в других компаниях.\nЧтобы люди росли в вашей команде, позаботьтесь о проработке политик менторства. Обдумайте и опишите процессы:\nкак можно стать ментором, что нужно сделать, чтобы перестать быть ментором, какие требования выставляются менторам, какую часть рабочего времени можно уделять менторству, к кому можно обратиться, чтобы получить менторскую помощь как можно завершить менторскую программу по достижению цели или досрочно. Люди, зная ответы на эти вопросы заранее, смогут более осознанно принять решение. А вдруг ваши потенциальные менторы и менти не знают, как завершить программу, если цели не достигнуты были и это их пугает? А вдруг они стесняются задавать такие вопросы? Дайте ответы на них, не дожидаясь озвучивания, и вы сделайте хорошо вашим менторам и менти.\nСам факт подготовки кандидата на повышение даст бонусы не только ему самому, но и вам. Разработчик пересмотрит свои знания и навыки, почерпнет новое и начнет применять их на практике еще до того, как грейд повышен. Для менти это практика и обратная связь, а для компании – эффективнее закрытые задачи.\nЭксперты для комитета тоже держат себя в тонусе, ведь у них появляется еще один повод следить за развитием технологий и подходов кодинга. Им будет сложно задавать одни и те же вопросы из года в год в то время как технологии и языки программирования развиваются.\n4. Политика проведения ассессментов Ассессмент – это процедура повышения грейда. Он должен быть так же прозрачен, как и присвоение грейда на старте. Ассессмент похож на собеседование внутри компании – коллеги оценивают уровень кандидата на повышение.\nАссессмент проводят с участием незаинтересованных экспертов. Другие старшие разработчики судят об уровне навыков кандидата на повышение. Ментор лишь готовит кандидата, но не участвует в принятии решения. Каждый эксперт комитетапишет мнение о грейде кандидата. Если же кандидат не проходит порог достаточности, то ему предлагают материалы, как можно подготовиться к следующей попытке.\nПо результатам ассессмента важно дать структурированную обратную связь. Для этого нужно подготовить и экспертов, чтобы они оформляли фидбек по одному стандарту. В политике необходимо описать:\nорганизацию подготовки ассессмента, сбор комитета экспертов, организацию проведения ассессмента: онлайн, офлайн, место проведения, сроки, когда эксперты должны дать обратную связь, что делать в случае, если кандидат успешно прошел ассессмент: процесс повышения грейда, пересмотр зарплаты, что делать, если кандидат не смог защитить грейд: проработка обратной связи с работником, организация менторства по повторной подготовке. Опишите эти процессы заранее, чтобы еще до начала подготовки работники знали что делать в том или ином случае.\n5. Открытые зарплатные вилки по грейдам Когда работники знают, какие грейды у коллег, как можно подготовиться к повышению и как получить новый грейд, они знают путь достижения цели. Теперь пришло время показать им цель. Они знают навыки и умения сеньора в компании, но какое за это вознаграждение? Покажите вилки грейдов, и тогда у работников будет вся информация.\nЧтобы вилки были актуальны, следите за состоянием рынка. Если финансовое положение не дает вам платить выше рынка, то предложите нематериальные бонусы: свободный график, возможность работы из другой страны, техника на выбор. Проинформируйте работников об этом в политике по грейдированию.\nЕсли ваша компания пока не может угнаться за рыночными вилками и новоиспеченный сеньор, не зная вилки грейда заранее, получит меньше ожидаемой суммы, то он будет разочарован. Новые знания разработчик получил, тайтл тоже, а вознаграждение не кажется ему соразмерным. Спустя какое-то время он начнет искать другие проекты и пойдет на собеседования. Опыт защиты грейда даст ему преимущество на интервью, и ему охотно предложат новый оффер на желаемый доход.\nОткрытая вилка покажет работникам, что компания не пытается скрыть выбивающиеся из грейдов зарплаты. Такую открытость и прозрачность в рыночных отношениях оценят.\nЗаключение Прозрачность процессов позволяет ответить на вопросы работников компании еще до того, как они решатся их задать. Каждый знает не только возможности заработка в компании, но и что ему нужно сделать для повышения. Открытие зарплатных вилок побудит пересмотреть процессы найма и удержания людей, а их развитие будет поставлено на поток.\n","permalink":"https://mgorbatyuk.dev/blog/management/2022-06-06-why-you-should-show-grade-salaries/","summary":"Открытые зарплатные вилки – это когда каждый миддл знает, сколько зарабатывают миддлы и другие грейды в той компании, где он работает. Условно говоря, получает специалист 1500$, но он знает, что вилка его уровня составляет от 1200$ до 2000$. Но просто взять и рассказать всем про деньги, которые они могут получать, нельзя. Мало знать возможности, нужно еще и понимать, как достигнуть ее. Для того, чтобы работники знали путь достижения нового грейда, компании нужно привести в порядок бизнес-процессы.","title":"Почему открытые зарплатные вилки – это хорошо"},{"content":"Каждый из нас так или иначе сталкивается с техническими собеседованиями: кто-то их проходит, а кто-то - проводит. И каждый вспомнит удачные и неудачные примеры из своего опыта. Чтобы интервью прошло с пользой для всех его участников, стоит придерживаться набора шаблонов и паттернов. Тогда разговор не пойдет на самотек и собеседование будет успешным.\nВ статье я расскажу о том, что стоит делать интервьюеру и чего делать не стоит ни в коем случае.\nКрошка джун к лиду пришел\nИ спросила кроха\nЧто такое хорошо и что такое плохо\nЧто такое хорошо Интервью, как и любой разговор незнакомых людей, может пойти не по сценарию. Чтобы такого не случилось, задай структуру интервью. Тогда разговор будет конструктивным и доброжелательным. Все случаи заранее не просчитаешь, однако можно следовать нескольким советам для того, чтобы вывести собеседования на новый уровень.\nХорошо №1: Готовимся к интервью Проведи домашнюю работу: ознакомьтесь с резюме кандидата, немного отдохните и отключите мессенджеры, чтобы ничего не отвлекало. Если кандидат поймет, что мысли интервьюера где-то в другом месте, то он закроется и собеседование считай закончено. Сместите фокус внимания только на интервью, сейчас только это важно. Лучше перенести интервью, чем провести его некачественно.\nХорошо №2: Помочь кандидату раскрыться На собеседовании ты знакомишься с кандидатом. Вам обоим нужно понять, сработаетесь ли вы. На собеседовании волнуются почти всегда и почти все:\nкандидат, пытающийся не прогадать с проектом, интервьюер, который боится словить конфуз, рекрутер, который уже провалил сроки закрытия вакансии. Не нужно “закапывать” кандидата, если он поплыл. Так вы никому хорошо не сделаете.\nЕсли вы чувствуете, что кандидат начинает волноваться, то переведите тему. Не нужно “закапывать” кандидата, если он поплыл, так вы никому хорошо не сделаете.\nХорошо №3: Подготовленный шаблон для интервью Шаблон поможет не забыть спросить критичные для позиции вопросы. Также шаблон поможет дать развернутый фидбек для других участников процесса найма и самого кандидата.\nСистема оценивания поможет сравнить кандидатов при ограничении бюджета\nПо шаблону легче выставить баллы. Система баллов поможет сравнить кандидатов при ограничении бюджета. Баллы однозначно будут субъективны, ведь это вы их выставляете, однако это будет стандартизированная для вас система оценивания.\nХорошо №4: Развернутый фидбек Фидбек после интервью необходим и другим участникам процесса найма, и вам самим. Если ваша задача - сделать срез знаний кандидата, то проектный или нанимающий менеджер хочет ознакомиться с ревью для принятия решения. Слишком подробный фидбек тоже плохо. Оставляем только самую суть.\nНачать можно с самого необходимого в шаблоне. Например, эта информация сделает фидбек структурированным:\nОбщее впечатление о кандидате. Пары предложений достаточно. Задача в опыте кандидата, которая была для него вызовом. Озвученные темы в разговоре и баллы к ним. Например, “.NET - 5/10, SQL - 6/10” Red flags, если заметили. Нечто в поведении кандидата, что неприемлемо для вас. Decision: работал бы с ним в одной команде? Отзыв в таком формате поможет не только менеджеру, но и тебе спустя время. Если кандидат вернется спустя полгода-год, то не нужно будет проводить интервью еще раз, достаточно будет вспомнить впечатление о нем из фидбека.\nХорошо №5: Польза интервью для кандидата Кандидат отметит для себя твою компанию, если собеседование будет полезным и для него. Если кандидат не ответил на вопрос, то тут же сами ответьте на него. Лекцию проводить не нужно, но пары слов будет достаточно.\nПосле интервью составьте публичный фидбек для самого кандидата. Вот такой формат публичного фидбека применяю я:\nОтмечаем уровень кандидата: Junior/Middle/Senior. Положительные качества кандидата. Список тем, которые стоит подтянуть. Преподносите их, как возможности для роста. Список материалов: что почитать, посмотреть, послушать Кандидат может и не захотеть попасть в вашу компанию, однако со своей стороны сделайте максимально возможное, чтобы он захотел.\nПолучив такой структурированный отзыв, кандидат будет знать, что ему нужно подтянуть для того, чтобы попасть в вашу компанию.\nХорошо №6: Готовиться к вопросам кандидата Кандидат выбирает компанию, поэтому помоги ему сделать верный выбор. Если кандидат заинтересован в компании и позиции, то он будет задавать вопросы. Часто спрашивают про технологический стек, размер команды и причины поиска нового человека.\nЛучше всего начать рассказ с того, для какой задачи ваша компания ищет человека: рефакторинг легаси, поддержка системы, новый релиз или расширение команды.\nЯ заранее рассказываю об этом после технической части интервью, чтобы:\nдать вводную информацию, которую кандидат мог бы спросить, но забыл после собеседования, дать кандидату перевести дыхание и расслабиться, дать возможность кандидату услышать то, о чем он мог даже и не спросить. Как технический интервьюер, расскажи о процессах разработки в команде, о регулярных митингах и как вообще работается на проекте. Если есть нечто, что может оттолкнуть кандидата от позиции, то не скрывайте это и расскажите. Пусть лучше человек сам откажется от позиции, чем уйдет через полтора-два месяца, поняв, что ему недосказали важного.\nЧто такое плохо Плохо №1: Спрашивать то, что не делаем в работе Никто не запрещает спрашивать алгоритмы и задачи на логику. Никто даже не запрещает вам посвятить этому интервью целиком. Однако если после такого собеседования кандидат будет переносить из одной таблицы в другую json-ки fulltime, то у него возникнет вопрос: а зачем так сложно нужно было?\nЕсли после собеседования с алгоритмами кандидат будет переносить из одной таблицы в другую данные fulltime, то у него возникнет вопрос: а зачем так сложно нужно было?\nСпрашивать стоит только то, с чем кандидату придется работать в будущем. Если у вас highload и вам важен оптимизированный код, то задачи по алгоритмам имеют смысл.\nПлохо №2: Быть всезнайкой Помни главную цель собеседования - понять, подходит ли кандидат в твою команду. Придумывать же заковыристые вопросы для того, чтобы кандидат не смог на них ответить - только себе вредить. Более того, кандидат это почувствует и закроется. И вряд ли захочет прийти к вам в команду.\nПлохо №3: Перебивать кандидата Кандидат - тоже человек, который любит, когда его слушают. И если кандидат начинает о чем-то увлеченно рассказывать, то дайте ему договорить.\nКогда человек видит, что его слушают, он рассказывает охотнее.\nИз расскажа ты сможешь узнать даже то, что при других обстоятельствах и не смог узнать:\nКак он умеет разговаривать и доносить информацию, Как он обзается с коллегами и начальством, Как он решает проблемы. Когда человек видит, что его слушают, он рассказывает охотнее. Если вы ограничены по времени, то в начале разговора предупредите кандидата, что вы можете прерывать его ответы, если поняли, что с темой он знаком не понаслышке. Кандидат оценит такой подход.\nПлохо №4: Интервью дольше полутора часов Собеседование – утомительный процесс:\nкандидат рассказывает о себе, вспоминает теорию, думает над заданными вопросами и задачами интервьюер внимательно слушает кандидата, выстраивает цепочку разговора, подбирает следующий вопрос и анализирует ответы. Полтора часа – уже много, старайтесь свести собеседование хотя бы до часа. Чем больше опыта проведения интервью у вас будет, тем быстрее вы будете делать для себя вывод, хороший перед вами специалист или нет.\nПлохо №5: Одинаковые собеседования Пробуй разные варианты структуры интервью:\nЗадава разные вопросы Развивай тему разговора, которую обсуждаете с кандидатом Добавь решение практических задач Попробуй провести сессию код-ревью вместе с кандидатом Начинайте с общих вопросов, чтобы идти дальше в глубь тематики. Так вы поймете уровень знаний кандидата. Не стоит прерывать увлеченный рассказ собеседника, чтобы перейти к следующему вопросу. Ориентируйтесь на предполагаемый уровень кандидата: не стоит тратить время на базовые вопросы сеньор. Лучше идти “сверху вниз”: сначала задаем высокоуровневые вопросы, а если кандидат затрудняется с ответом, начинайте спускаться к темам полегче.\nСессия код-ревью покажет практические навыки кандидата. Многие кандидаты рассказывают увлеченно о паттернах проектирования, SOLID и чистоте кода, но только код-ревью покажет реальный опыт кандидата. Подготовьте заранее класс или маленький проект с набором классов, где намеренно будут допущены архитектурные ошибки и нарушения “чистоты кода”. Пусть кандидат их ищет и предлагает улучшения, а по найденным issue вы убедитесь, насколько кандидат чисто пишет код. Чтобы было все честно, в самом репозитории кода оставьте список всех проблем кода, чтобы кандидат после собеседования мог сам с ним ознакомиться.\nПлохо №6: Игнорировать опыт кандидата Резюме кандидата тебе подскажет, какие вопросы лучше задавать на интервью. Опыт на последних одном или двух проектах может быть полезен для задач в вашей компании.\nЕсли вы делаете только срез знаний, но не знаете задач для будущего коллеги, то можно поспрашивать об опыте на том или ином проекте или затронуть темы, которые кандидат описал в резюме. Мультипоточность, специфичная библиотека, highload, etc. Кандидату будет приятно, что интервьюер уделил время прочтению CV.\nПлохо №7: Не обращать внимание на вопросы кандидата Вспоминаем, что главная цель собеседования - понять, сможете ли вы сотрудничать с кандидатом. Свои вопросы вы уже задали кандидату. Логично же, что кандидат тоже задаст какие-нибудь вопросы, не так ли?\nЕсли кандидат не задал ни одного встречного вопроса о компании и проектах, то это означает, что он не заинтересовался позицией. Иногда кандидат задает неподходящие вопросы и иногда даже личного характера.\nСтоит обратить внимание на вопросы и занести в фидбек, если вам они показались нерелевантными. Что с этой информацией будет делать нанимающий менеджер - решать ему.\nПлохо №8: Не продавать компанию как хорошего работодателя Собеседование - это когда не только компания выбирает людей, но и люди - компанию. Интервьюер - это представитель компании, поэтому важно не только вести себя сдержанно, но и рассказать о том, как работается в компании и чему кандидат научится, работая у вас.\nРассказываем честно о том, что есть у вас и что предлагаете. Если есть минусы, то говорим о том, как вы над ними работаете и как исправляете их. Если есть информация о долгосрочных планах проекта, то тоже рассказываем о них. Важно дать кандидату полную информацию, не утаивая ничего. Подчеркивайте положительные стороны работы у вас и расскажите о том, как исправляете отрицательные стороны.\nЗаключение Технический интервьюер - это представитель компании, поэтому важно провести собеседование на высшем уровне. Будьте лицом компании перед кандидатом. Поведение интервьюера может как зажечь желание кандидата устроиться в компанию, так и резко оттолкнуть. Будьте открытыми и доброжелательными к кандидату и помните, что собеседование – это стресс для всех его участников. Сделайте все, что можете, и будь что будет.\n","permalink":"https://mgorbatyuk.dev/blog/employment/2022-05-27-how-to-not-make-interviews-be-nightmare/","summary":"Каждый из нас так или иначе сталкивается с техническими собеседованиями: кто-то их проходит, а кто-то - проводит. И каждый вспомнит удачные и неудачные примеры из своего опыта. Чтобы интервью прошло с пользой для всех его участников, стоит придерживаться набора шаблонов и паттернов. Тогда разговор не пойдет на самотек и собеседование будет успешным.\nВ статье я расскажу о том, что стоит делать интервьюеру и чего делать не стоит ни в коем случае.","title":"Что такое хорошо и что такое плохо. Как не превратить собеседование в кошмар"},{"content":"RU version of this blogpost is here\nOnly conflicts of interest lead projects to make progress. The project may be any: it-product, building houses, or society and state regime. In systems where its elements keep being static, life stops. Everyone is satisfied with everything he has at the moment.\nFirst of all, I should declare what is “conflict of interests”. A conflict of interest is a dispute where the interests of two or more stand against each other to reach one common cause. Meanwhile, people do not get personal about those conflicts. They know that the dispute is needed to find the right ways and approaches.\nPeople know that conflicts are needed to find the right ways and approaches.\nConflicts in IT In IT, there are conflicts between a customer who ordered a product development and teams, including Project Manager (PM). The customer wants as many features as possible for fewer resources and money. On the other hand, the team wants to work less for more money. Somewhere in the middle, a balance between the scope of work and resources which will be paid takes place. The project manager stands with the team in this dispute. His main goal is to explain why the team does not develop more with the same payment. He uses velocity metrics, negotiates, makes processes transparent, and keeps documents clear.\nInside the development team, some conflicts exist as well as outside they do.\nQA specialists find more bugs to show that the product was not developed correctly; meanwhile, developers say the opposite. Tech/team lead makes a code repository to reject invalid code with failed tests, incorrect code style, or without code-review approvals; meanwhile, developers want to contribute more and more as fast as possible. The project manager watches the team members do their job as much as possible. Conflict between QA and developers QA should say that the product is not developed in the right way. As the QA will find more bugs, as much better they work. QA specialist should not like the product which he/she works with, because he/she always should see something to improve in it. QA should not say: \u0026ldquo;The product version is ready for deployment\u0026rdquo; because developers can do the same without them. QA should say: \u0026ldquo;The product is awful; there are many bugs and defects.\u0026rdquo;\nAs the QA will find more bugs, as much better they work.\nQA finds bugs, creates bug reports, then says their severity. When it\u0026rsquo;s time to deploy a new version of the product, the project manager should decide where is a balance between bugs and new features to make a deployment. Also, the manager should set priority to bug reports: which ones should be fixed as soon as possible and which ones are low priority.\nConflict between code repository and developers A developer wants to implement features as much as possible to take a new one or finish his work. On the other hand, the code repository wants the code to be more maintainable, reliable, and clear to understand. Tech/team lead as a repository representative should set appropriate reject rules to decline invalid code. The code with failed tests, without review approval, or violating code style rules, should be rejected. For implementing this approach, tech/team lead sets continuous integration and declares code review rules.\nTech/team lead as a repository representative should set appropriate reject rules to decline invalid code.\nThe code repository is not a friend to developers. It wants to get only high-quality and maintainable code. The project manager\u0026rsquo;s goal is to manage team/tech lead to declare and set reject rules.\nConflict between project manager and team members Despite the project manager being a part of the development team, he often stands opposed to them. He should monitor the velocity of work of the whole team and every person inside it. If someone fails, the project manager should manage it. As I said before, people want to work less than possible and get paid more. The manager should take it into account. He declares rules of people interactions to make them deliver product or product version in time.\nProject manager declares rules of people interactions to make them deliver product or product version in time.\nTo do this, the manager does the following:\nmakes appointments for task estimation, sets up different dashboards and metrics in the issue tracking system to see progress and velocity, facilitates performance review in the team, makes processes transparent for customers and the team, keeps negotiating results in documents or emails, keeps documents clear for every person in the team and outside. A good manager differs from a bad one because he can prove his arguments by metrics and facts.\nWhy it is crucial to mind conflicts People as team members should consider conflicts as a way to reach a common goal. They should not fight against personalities. Meanwhile, every team member follows their interests during project implementation. Very often, those interests stand opposite each other.\nThe only balance between interests leads to product version delivery which is the primary goal of the project processes. As much strong pressure will be applied from every side of impact, as much better quality the product will get.\n","permalink":"https://mgorbatyuk.dev/blog/management/2022-05-09-conflicts-in-it-en/","summary":"RU version of this blogpost is here\nOnly conflicts of interest lead projects to make progress. The project may be any: it-product, building houses, or society and state regime. In systems where its elements keep being static, life stops. Everyone is satisfied with everything he has at the moment.\nFirst of all, I should declare what is “conflict of interests”. A conflict of interest is a dispute where the interests of two or more stand against each other to reach one common cause.","title":"Conflicts lead to high-quality products"},{"content":"EN version of this blogpost is here\nТолько здоровый конфликт ведет к развитию системы, будь то айти-проект, строительство дома или устройство государства и общества. В системе, где элементы находятся в состоянии спокойствия, движение останавливается. Все довольны всем, что имеют на данный момент.\nДля начала стоит прояснить, что такое “здоровый конфликт”. Здоровый конфликт (далее “конфликт”) - это противостояние двух противоположных интересов для достижения результата между ними где-то посередине, и при этом участники конфликта не переходят в прямую конфротацию. Люди понимают, что конфликт нужен для достижения результата и не переходят на личности.\nЛюди понимают, что конфликт нужен для достижения результата и не переходит на личности.\nКонфликты в айти В айти-проекте конфликт присутствует между заказчиком и командой-исполнителем, куда включаем и проектного менеджера. Заказчик хочет сделать как можно больше задач за как можно меньшие деньги. Команда же хочет работать меньше и получить больше денег. Где-то посередине достигается баланс ресурсов и объема работ, что в итоге и разрабатывают исполнители. Проектный менеджер в этом противостоянии встает на сторону команды. Его задача — объяснить, почему они не сделают больше объема работы за те же или меньшие деньги. Менеджер мониторит метрики прогресса команды, проводит переговоры и закрепляет документами договоренности. Умелый менеджер использует числа и показатели, чтобы они становились весомым аргументов в переговорах.\nВнутри команды разработки также присутствуют конфликты:\nтестировщики находят как можно больше багов, чтобы показать, что разработчики выдали продукт недостаточного для клиента качества, Техлид проекта настраивает репозиторий кода таким образом, чтобы он реджектил код, написанный не по правилам общего стиля команды, с красными юниттестами или не прошедшим ревью другим разработчиком, проектный менеджер следит, чтобы каждый участник команды делал свое дело в необходимом объеме. Конфликт между тестировщиками и разработчиками Тестирование доказывает, что продукт не работает так, как нужно клиенту. Чем больше багов тестировщики найдут, тем лучше. Тестировщику не должен нравиться продукт, над которым он работает — всегда есть то, что можно улучшить еще и еще. Тестировщики — это не один из уровней Quality Gate для деплоя на продакшн, они не говорят: “Подтверждаем качество”. И без тестировщиков разработчик скажет, что продукт готов к деплою. Если тестировщик соглашается во всем с разработчиком, значит тестировщик делает свою работу неправильно.\nЧем больше багов, тем лучше и тем эффективней работает тестировщик.\nТестировщик ищет как можно больше багов, оформляет их в багрепорты и записывает в тикет-систему, присваивет уровни критичности. Чем больше багов, тем лучше и эффективней работает тестировщик. Во время деплоя проектный менеджер решает, где наступает тот самый баланс между качеством продукта и усилием команды над его выпуском. Менеджер изучает найденные баг-репорты и присваивает им приоритет исполнения: какие фиксим в первую очередь, какие - откладываем вниз бэклога.\nКонфликт между репозиторием и разработчиками Разработчик хочет написать как можно быстрее фичу и перейти к следующей задаче, но репозиторию важно качество заливаемого в него кода. Техлид как представитель репозитория настраивает правила приемки нового кода в дефолтовую ветку таким образом, чтобы разработчику было как можно сложнее залить некачественный код: с нарушением стилей, с зафейленными юниттестами, без понятной и поддерживаемой архитектуры. Для этого настраивают пайплайны Continious Integration и декларируют правила код-ревью.\nТехлид настраивает правила приемки нового кода в дефолтовую ветку таким образом, чтобы разработчику было как можно сложнее залить некачественный код.\nРепозиторий кода — не друг разработчику, он хочет получать только качественный код от них. Задача проектного менеджера заключается в том, чтобы проследить за правильной настройкой репозитория и пригласить, например, независимого техлида для этого.\nКонфликт между проектным менеджером и командой Несмотря на то, что проектный менеджер является частью команды, его задача заключается в том, чтобы проследить, что каждый ее участник выполняет обязанности в полном объеме. Люди преследуют свои цели, но если упростить отношения между людьми как элементами системы в капиталистическом мире, то каждый желает сделать как можно меньше и при этом получить вознаграждение как можно больше. Разработчик — не исключение, и он тоже хочет работать как можно меньше и получить зарплату как можно больше. Проектный менеджер учитывает это и настраивает взаимодействие между участниками процесса таким образом, чтобы проект доставили заказчику вовремя и в должном объеме несмотря на здоровую эгоистичность разработчиков.\nПроектный менеджер настраивает взаимодействие между участниками процесса таким образом, чтобы проект доставили заказчику вовремя и в должном объеме.\nУ проектного менеджера для этого пользуется разными наборами инструментов и практик:\nсобирает встречи для оценки сложности задач, настраивает тикет-систему так, чтобы видеть необходимые отчеты и показатели, мониторит метрики прогресса команды и отдельных ее участников, проводит оценку 360 и performance review, закрепляет договоренности в документах и письмах. Хороший менеджер отличается от плохого тем, что он свое мнение подкрепляет цифрами и фактами.\nПочему важно не забывать о конфликте Люди как участники команды разработки проекта понимают, что их общая задача — это доставка проекта заказчику. Однако часто забывают, что у каждого из них свои цели для достижения общего результата. И еще чаще эти цели находятся по разные стороны баррикад.\nЦель же проекта — доставка продукта заказчику — достигается на нахождении компромисса между противоборствующими сторонами, и чем сильнее давление с каждой из сторон, тем качественней будет продукт разработки команды.\n","permalink":"https://mgorbatyuk.dev/blog/management/2022-05-08-conflicts-in-it/","summary":"EN version of this blogpost is here\nТолько здоровый конфликт ведет к развитию системы, будь то айти-проект, строительство дома или устройство государства и общества. В системе, где элементы находятся в состоянии спокойствия, движение останавливается. Все довольны всем, что имеют на данный момент.\nДля начала стоит прояснить, что такое “здоровый конфликт”. Здоровый конфликт (далее “конфликт”) - это противостояние двух противоположных интересов для достижения результата между ними где-то посередине, и при этом участники конфликта не переходят в прямую конфротацию.","title":"Конфликт в проекте – качественный продукт"},{"content":"Я проводил технические собеседования во всех компаниях, где работал. Чаще всего это были собеседования, где я должен был сделать срез знаний специалиста, чтобы решение о найме принимал менеджер. Также проводил собеседования, где сам решал, продолжать ли процесс найма сотрудника. И я заметил, что иногда начинающие разработчики задают в конце интервью вопрос “Ну, как вам?” или “как я прошел собес?” На мой взгляд, этот вопрос бессмысленный.\nВо-первых, навряд ли интервьюер ответит честно. Я сам отвечаю на этот вопрос обтекаемыми общими фразами и стараюсь избегать однозначного ответа. Например, я чаще всего отвечаю так: “Есть хороший опыт в N и X и при этом есть пробелы в M и Y. Я оформлю финальный фидбек в ближайшие пару дней”. Очень корпоративные фразы, которые ничего конкретно не говорят, однако иначе можно сказать лишнего. Если я отвечу однозначно “да, мне собес понравился, ты подходишь”, а менеджер откажется от найма в пользу другого разработчика, то у моего кандидата останется неприятный осадок. В случае, если я скажу: “есть пробелы тут и тут и тут, а по требованиям вакансии они обязательны”, то у кандидата будет осадок уже сразу после собеседования.\nЕсли я отвечу однозначно “да, мне собес понравился, ты подходишь”, а менеджер откажется от найма в пользу другого разработчика, то у моего кандидата останется неприятный осадок\nВо вторых, решение о найме принимаю не я. Технический интервьюер - только часть процесса. Поэтому я не могу судить, кого компания наймет, а кому - откажет. Нанимающий менеджер, возможно, рассматривает кандидатов как возможности для инвестиций, и поэтому обратит внимание даже на тех кандидатов, которые на первый взгляд не пододят к позиции.\nТехнический интервьюер - только часть процесса. Поэтому я не могу судить, кого компания наймет, а кому - откажет.\nВ третьих, стоит ли пытаться понравиться кому-то? Будучи кандидатом, я тоже присматриваюсь к компании, куда прохожу собеседование. Интервьюерами обычно становятся те, кто отражает атмосферу в компании. Если мне нравится общаться со интервьюером из нее, а интервьюеру - со мной, значит наше сотрудничество будет, скорее всего, успешным. Если нет, то нет. Поэтому переживать из-за того, что после интервью ко мне не вернулись с обратной связью или вернулись с отказом, не стоит.\nСобеседование - как свидание, где важно найти точки соприкосновения и различия в характере, чтобы понять, по пути ли вам или нет.\n","permalink":"https://mgorbatyuk.dev/blog/employment/2022-02-20-do-not-ask-about-ti-rigth-after-it/","summary":"Я проводил технические собеседования во всех компаниях, где работал. Чаще всего это были собеседования, где я должен был сделать срез знаний специалиста, чтобы решение о найме принимал менеджер. Также проводил собеседования, где сам решал, продолжать ли процесс найма сотрудника. И я заметил, что иногда начинающие разработчики задают в конце интервью вопрос “Ну, как вам?” или “как я прошел собес?” На мой взгляд, этот вопрос бессмысленный.\nВо-первых, навряд ли интервьюер ответит честно.","title":"Не спрашивай на собеседовании “Ну как, я подхожу?”"},{"content":"Мне нравится проводить и проходить собеседования. Это прекрасная возможность познакомиться не только с новыми людьми, но и с другими подходами к работе. Какие-то подслушанные практики я применял у себя в проектах, каким-то находил очередное подтверждение, почему они не работают.\nКак интервьюер, я стараюсь сделать собеседование максимально полезным для кандидата. Во-первых, у него не останется чувство, что он отдал энергию впустую. Во вторых, даже если сейчас мы не договоримся, то впечатление о компании и людях у кандидата останется положительным. Такому подходу я следую всю свою карьеру, и я четко помню, почему я стал делать именно так.\nВ моем опыте было два собеседования, которые стали примером для меня:\nЧто должно быть в интервью, И чего точно в интервью быть не должно. Начну с хорошего. Будучи джуном, я старался проходить технические собеседования раз в два-три месяца и иногда даже не только в казахстанские компании. Договорился о собесе с в российскую продуктовую компанию, которая занимается развитием e-commerce портала. Собеседование шло плохо: мне задавали вопросы о том, как работает .net и CLR под капотом. На тот момент я не знал этого, так как фокусировался не на технике, а на бизнес-составляющей проектов: не “как правильно написать”, а “зачем именно это пишем, а не другое”. После собеседования я спросил интервьюера, как он оценивает мои знания. В ответ он разнес меня в пух и прах, сказав, что я - слабый специалист. Я попросил о рекомендациях и спросил, какую литературу мне нужно читать, чтобы стать профессионалом. И в ответ получил список книг и лекций. Из этого интервью я вынес для себя три вывода:\nКандидату нужно давать рекомендации для того, чтобы он улучшил свои знания. Говорить напрямую кандидату любого уровня, что он слабый специалист, нельзя. Даже если в моменте разговор будет конструктивным, осадок все равно останется, причем по отношению к компании, а не к лично мне. Пренебрегать книгами по программированию нелья. Несмотря на то, что версии языков идут вперед, в книгах закладываются базовые систематизированные знания, игнорировать которые никак нельзя. Второе интервью проходило в местной продуктовой компании. В это время я был все тем же джуном, но уже начавшим читать “CLR via C#” - этакую библию дотнетчика. Встал на путь исправления, иначе говоря.\nКомпания занималась продажами автозапчастей. Офис на краю города, но недалеко от моего дома. Решил откликнуться сам, и меня пригласили на собеседование. Офис мне понравился, он был оформлен в стиле лофт. В центре здания была зона с деревьями, огороженная стеклом и со стеклянной крышей. Мини-оранжерея с зелеными растениями в центре хайтек-лофта. Выглядело круто.\nСобеседование началось с разговора с рекрутером обо мне и моем опыте. Потом присоединился начальник отдела программистов и начал задавать вопросы. Он начал с алгоритмов и структур данных, а я поплыл. Буквально после четвертого или пятого вопроса он встал и вышел из кабинета, не попрощавшись. Было крайне неприятно. Рекрутер попыталась сохранить лицо и продолжила задавать свои вопросы, однако продлилось это недолго.\nВыйдя из офиса, я понял, что я на месте этого начальника отдела никогда бы так не поступил. Необходимо проявлять уважение всегда, какого бы уровня кандидат не был. Он тоже, как и вы, потратил свое время, чтобы приехать на встречу, и вы оба - равноправные участники кадрового рынка. Сегодня он интерн, а завтра - лид, который собеседует тебя на проект. Если я понимаю с самого начала, что кандидат не подходит на позицию, то я мягко завершаю интервью и все равно даю возможность ему задать свои вопросы. Мне важно, чтобы впечатление осталось положительное.\nС тех пор прошло несколько лет и несколько десятков интервью, где уже я оценивал уровень кандидата. Думаю, что именно эти два собеседования сформировали то, как я сам провожу их. С тех пор я стараюсь сделать собеседования максимально комфортными и полезными для обоих участников переговоров.\nEN: maximgorbatyuk.medium.com\n","permalink":"https://mgorbatyuk.dev/blog/employment/2022-01-29-most-important-interviews-in-my-experience/","summary":"Мне нравится проводить и проходить собеседования. Это прекрасная возможность познакомиться не только с новыми людьми, но и с другими подходами к работе. Какие-то подслушанные практики я применял у себя в проектах, каким-то находил очередное подтверждение, почему они не работают.\nКак интервьюер, я стараюсь сделать собеседование максимально полезным для кандидата. Во-первых, у него не останется чувство, что он отдал энергию впустую. Во вторых, даже если сейчас мы не договоримся, то впечатление о компании и людях у кандидата останется положительным.","title":"О двух интервью, которые стали для меня примером"},{"content":"Хороший баг-репорт – понятный, прозрачный, содержит в себе все, что потребуется для решения проблемы в проекте. Написать такой нетрудно. При составлении важно выложить всю необходимую информацию из своей головы в тикет в Jira, и тогда вопросы разработчики не будут спрашивать “очевидные вещи”.\nБаг-репорты составлять — тоже навык, который нужно развивать. Уметь донести свою мысль до другого человека - полезный навык не только для тестировщиков, но и разработчиков тоже. Проектные менеджеры — разработчикам, фронтендеры — бэкендерам, тестировщики — всем. Если junior-разработчик хочет перейти на следующую ступень карьеры, то он ему пригодится этот навык. Для сеньоров он must-have.\nЗа время работы на проектах разной степени сложности я понял, что хороший баг-репорт несложно оформить, в нем достаточно двух вещей: шаги для воспроизведения и Expected/Actual результаты. Остальная информация опциональна.\nЧтобы создать баг-репорт, который быстро пофиксят, нужно:\nОписать шаги воспроизведения. Начиная от начала авторизации в тестируемом портале и до получения ошибки. Данные для авторизации, Переход по ссылкам, клик по кнопке, ввод таких-то данных, вот это вот все должно быть упомянуто. Написать “Ожидаемый результат / Expected”. Написать “Текущий результат / Actual” Убедиться, что ни один шаг не был пропущен и не нужно будет никому пояснять что-либо. Очевидные вещи надо проговаривать/прописывать. Что очевидно для одного, не очевидно для другого. И наоборот. Если кажется, что “ну вот это они точно и так знают как делать”, то перечитай пункты 4 и 5 В итоге, если баг-репорт был оформлен верно, то:\nСокращается время на фикс. Твои коллеги не тратят свое время и мыслетопливо на прояснение деталей. Автору баг-репорта не задают уточняющие вопросы в личку. Особенно неприятно получать вопросы поле окончания рабочего дня, не так ли? Автор не становится блокером для коллег. Автору не приходится объяснять что-либо второй раз. А если уточняющие вопросы все же появились, то необходимо записать эту информацию в баг-репорт. Тогда обсуждение не потеряется из виду и будет сохранено в общей проектной документации.\nТаким образом, хороший баг-репорт будет выглядеть примерно так:\nTitle: There is no password security requirement error on the register page Steps to reproduce: 1. Go to https://example.com/regitster 2. Type login: \u0026#39;Vasya\u0026#39;, password: \u0026#39;qwerty\u0026#39; 3. Click on the Submit button Expected: Backend validation error, 400 http status response. Message is \u0026#34;Your password must contain at least 1 capital char and 1 digit\u0026#34; Actual: The user account is being created. No backend errors appear Таким образом, любой разработчик команды может взять задачу в разработку, даже если не он писал формы авторизации. Понятен ожидаемый результат и нет необходимости обращаться за разъяснением к оригинальной задаче разработки формы регистрации, автору или бизнес-аналитику. Может показаться, что я хочу переложить работу по прояснению деталей с плечей разработчиков на тестировщиков, ведь ожидаемый результат разработчик сам может посмотреть в требованиях. Однако автор баг-репорта уже знает, как нужно, и может сразу написать об этом, а потом на ретроспективе уже команда обсудит, как не допускать повторений таких случаев.\n","permalink":"https://mgorbatyuk.dev/blog/development/2021-12-28-how-to-create-effective-bug-reports/","summary":"Хороший баг-репорт – понятный, прозрачный, содержит в себе все, что потребуется для решения проблемы в проекте. Написать такой нетрудно. При составлении важно выложить всю необходимую информацию из своей головы в тикет в Jira, и тогда вопросы разработчики не будут спрашивать “очевидные вещи”.\nБаг-репорты составлять — тоже навык, который нужно развивать. Уметь донести свою мысль до другого человека - полезный навык не только для тестировщиков, но и разработчиков тоже. Проектные менеджеры — разработчикам, фронтендеры — бэкендерам, тестировщики — всем.","title":"Как создавать эффективные баг-репорты"},{"content":"Let’s imagine you have a web application built as a monolith and you want to introduce microservices. Or you may have several clients connected to your backend solution: mobile app, SPA, devices, etc. One of the first tasks that you have to solve is integrating authentication and authorization. In my opinion, one of the simplest ways is integrating SSO (Single-Sign-On system) into your application.\nThere is an open-source ready-to-use product IdentityServer4 which implements OpenID Connect and OAuth2.0 frameworks. The solution is built using .NET core 3.1 and is easy to modify according to your business rules. Also, it is an out-of-box solution ready to deploy. Therefore, you don’t have to develop and set up a custom authentication system.\nVersions of IdentityServer There are two versions of the IS application: free-to-use open-source IS4 and commercial IdentityServer5. According to documentation, IS5 is free for development and testing, but you should pay for using it on production. IS4 is declared as a legacy system, but it is free to use on production.\nEven though all new features are developing in the commercial IS5, you may start to go live with free IS4. The IS4 system contains all staff required by Open Id connect and OAuth2.0 frameworks.\nHow to integrate the IS4 Downloading the IS4 solution from the GitHub To integrate the IS4 into your system, you just need to download it from samples. I’d suggest you choose my extended solution but you still may choose one of the original ones.\nMy version contains the following:\nThe IS4 solution without any storage. You are free to integrate your favorite one. Several samples of clients including OAuth 2.0 debugger Custom profile service where you can write your code related to issuing claims Feel free to consider my repository as an instruction to integrate the IS4 from the original repository.\nSetup your IS4 Add your own Scope to restrict access to different APIs (like here). If your application has now domain segregation with different scopes, you may not use the custom scope or just use a single one. Here I use “core.api” as a key of the scope, but you may choose any other name. Add clients of the IS4 (like here). To proof the concept, I am adding a web-browser-debug client like this. The client allows me to see claims which are being encrypted in the JWT token. Also, don’t forget to mention your own scope in the clients’ allowed scopes property (like here). Optional Add external login providers like Google authentication if necessary. Here I have a sample code that integrates the Google. Also, the Facebook, GitHub, ActiveDirectory, etc, providers are available to be used. Optional In this Custom profile service you may change claims which will be used to prepare a JWT token for clients. Setup your Web API application Here I will give you an example using ASP.NET core Web API. I believe it is easy to find tutorials of integrating OAuth2.0 authentication services for other web frameworks for other programming languages.\nAdd Bearer authentication with the IS4 URL address (like this). Optional Add scope authorization to restrict accesses (like this). If you do step 2, and your Client without the scope does a web request, it will get a 403 error.\nSetup debug client like OAuth 2.0 debugger Add the client like this. Go to URL below: https://localhost:6001/connect/authorize?response_type=id_token\u0026amp;client_id=client\u0026amp;client_secret=secret\u0026amp;redirect_uri=https%3A%2F%2Foauthdebugger.com%2Fdebug\u0026amp;scope=openid%20email%20profile\u0026amp;nonce=wnpup8t4v2b ","permalink":"https://mgorbatyuk.dev/blog/development/2021-12-26-how-to-integrate-identity-server/","summary":"Let’s imagine you have a web application built as a monolith and you want to introduce microservices. Or you may have several clients connected to your backend solution: mobile app, SPA, devices, etc. One of the first tasks that you have to solve is integrating authentication and authorization. In my opinion, one of the simplest ways is integrating SSO (Single-Sign-On system) into your application.\nThere is an open-source ready-to-use product IdentityServer4 which implements OpenID Connect and OAuth2.","title":"How to integrate Identity Server into your web application"},{"content":"There is a recommendation: to write a postfix \u0026ldquo;\u0026hellip;Async\u0026rdquo; at the end of async methods in .NET. I always follow this rule, and also I recommend everyone to do this as well as I do. In this article, I want to share my thoughts on why this is an important rule when you deal with asynchronous programming.\nYou can call the async method without await and it will not throw any error In my opinion, it is a problem that .NET allows us to call an asynchronous method without the await keyword and without awaiting a result as well. and no compile error will be thrown. Also, a runtime error will not be thrown as well. Therefore, you should mark async methods with \u0026ldquo;\u0026hellip;Async\u0026rdquo; postfix to help yourself and your teammates not miss possible errors in the production.\nYou read the code not only with IDE That\u0026rsquo;s maybe a surprise for junior developers, but members of their team read the code not only with IDE. Github, git merge tool, etc are used to do it as well. There is no IntelliSense or warning from your programming language. Then, if you left the async method without Async postfix and passed it to code review, your colleague might be tired and miss the method to the production. Of course, it would be his mistake, but I hope you work for the project\u0026rsquo;s success, not only for moving Jira tickets from the \u0026ldquo;Development\u0026rdquo; column to \u0026ldquo;Code review\u0026rdquo; and that\u0026rsquo;s all you do on the project. Just help your senior - do not do code reviews harder than they should be.\nIt explicitly says that the method is asynchronous It might sound like obvious advice, but it is important to write explicit code which is not ambiguous. The code is the thing that you should not guess about. The code is something that is supposed to be explicit and to show its intention. In my opinion, the async approach is one of the intentions.\nConclusion If you don\u0026rsquo;t mind about leaving \u0026ldquo;..Async\u0026rdquo; postfix at the end of the async methods you write, please, change your mind. That makes code review sessions easier, and your code more transparent and clean.\n","permalink":"https://mgorbatyuk.dev/blog/development/2021-12-12-do-not-forget-about-async/","summary":"There is a recommendation: to write a postfix \u0026ldquo;\u0026hellip;Async\u0026rdquo; at the end of async methods in .NET. I always follow this rule, and also I recommend everyone to do this as well as I do. In this article, I want to share my thoughts on why this is an important rule when you deal with asynchronous programming.\nYou can call the async method without await and it will not throw any error In my opinion, it is a problem that .","title":"Do not forget about Async postfix"},{"content":"За время своей карьеры я провел много техничесикх собеседований. Почти в каждой компании я выступал в роли технического интервьюера. Довелось и быть тем, кто аппрувит кандидата на дальнейший этап найма. Мне нравится этот процесс, он позволяет держать теоретические знания в тонусе.\nКогда я сам выступаю в роли кандидата, я обращаю внимание на процесс интервью. В результате наблюдений я составил для себя несколько аспектов, которые позволяют сделать мне вывод о кандидате.\nКак для интервьюера, для меня важно\u0026hellip; \u0026hellip;умение говорить Теоретическая подготовка специалиста – это необходимая база, однако мне грустно, когда человек не умеет доходчиво и кратко рассказать об опыте. Во время митингов при планировании и ретро этот же спец будет так же неумело высказывать точку зрения, и в итоге качество встреч снизится.\nУмение говорить – это лаконичность, емкость содержания, отсутствие слов-паразитов. Все эти качества речи будут полезны не только при митингах, но и во время менторства и на встречах уже с заказчиками и pre-sales встречах. Более того, без умения говорить вряд ли получится пойти в тимлиды и/или проектные менеджеры, если у специалиста есть такое желание.\n\u0026hellip;встречные вопросы во время собеседования Когда кандидат не знает ответ на заданный вопрос, то мне интересно услышать, что скажет кандидат. Задаст ли он вопрос \u0026ldquo;а как тогда\u0026rdquo;, попытается ли рассуждать на эту тему? Если собеседник интересуется правильным ответом, то это хороший знак \u0026ndash; специалист старается покрыть отсутствие знаний. Он, скорее всего, открыт к новому, готов обсуждать спорные вопросы.\n\u0026hellip; вопросы после сессии проверки знаний Принято, что если кандидат пришел на собеседование, то он заинтересован в позиции. Даже если для кандидата это спортивное прохождение собеседований, то все равно он заинтересован в интервью. В конце интервью кандидат задает вопросы техническому спецу, который уже работает в компании. Если кандидат не спрашивает ничего или спрашивает нерелевантные вопросы, то это – желтая карточка. В моем опыте был такого рода вопрос: \u0026ldquo;А почему вы не уезжаете зарубеж работать?\u0026rdquo;. Ответ на вопрос точно не о проекте и зависит от множества личных факторов. Что ответ на этот вопрос может быть кандидату – не понятно.\nТакже странно задавать вопрос \u0026ldquo;прошел я или не прошел\u0026rdquo;. Смысла спрашивать это нет – интервьюер не ответит честно. Во-первых, его задача – определить уровень знаний, а решение о том, подходят ли знания под проект или нет, принимают другие люди. Во вторых, для составления фидбека интервьюеру необходимо время. Я обычно беру небольшой перерыв после собеседования, а потом уже пишу отзыв о кандидате. Это позволяет мне расслабиться и прокрутить некоторые моменты в памяти за чашкой чая или кофе.\n\u0026hellip;рассуждения вслух Цель любого собеседования – познакомиться друг с другом и рассказать о себе. За час-полтора общего времени интервью сложно составить объективную оценку друг о друге. На мой взгляд, рассуждения вслух позволяют дать о себе более глубокое представление.\nРассуждая вслух, кандидат показывает умение думать и делать выводы. Умение размышлять может быть подходящим под проект или команду или не подходящим, главное – чтобы его показали. Интервьюер уже определит, насколько хорошо кандидат подходит команде. \u0026ldquo;Закрытый\u0026rdquo; кандидат никакого представления о себе не дает, и сделать выводы об его уровне знаний становится сложно.\nВ заключение У интервьюера нет возможности заглянуть в голову кандидату. Интервьюер делает оценку опыта только полагаясь на услышанное и увиденное. Если собеседование проходит онлайн и без веб-камер, то только по рассказу можно судить об опыте кандидата. Если кандитат не делает предположений, не задает уточняющих вопросов и дает односложные ответы, то интервьюеру будет сложно составить хороший фидбек.\nБолее того, кандидат должен понимать это и стремиться раскрыть себя максимально глубоко, если заинтересован в собеседовании. Если же этого понимания нет, то собесы для такого кандидата вряд ли будут оканчиваться успехом.\n","permalink":"https://mgorbatyuk.dev/blog/employment/2021-11-02-tech-interview-essentials/","summary":"За время своей карьеры я провел много техничесикх собеседований. Почти в каждой компании я выступал в роли технического интервьюера. Довелось и быть тем, кто аппрувит кандидата на дальнейший этап найма. Мне нравится этот процесс, он позволяет держать теоретические знания в тонусе.\nКогда я сам выступаю в роли кандидата, я обращаю внимание на процесс интервью. В результате наблюдений я составил для себя несколько аспектов, которые позволяют сделать мне вывод о кандидате.","title":"На что стоит обратить внимание во время технических интервью"},{"content":"Что значит быть тимлидом Таким вопросом задаются многие разработчики: и те, кто хочет стать тимлидом, и те, кто уже. После полутора лет работы в качестве тимлида у меня сформировалось некое понимание своей роли в проекте и компании.\nНа мой взгляд, главная и едва ли не единственная задача тимлида на проекте – сделать максимально возможное, чтобы поставить продукт вовремя. Звучит легко, однако за этой формулировкой стоит такой огромный спектр задач, что можно легко запутаться. Попробую раскрыть тему, что обычно я делаю для того, чтобы поставить продукт вовремя. Что можно включить в перечень задач, достигая которые выполняется главная?\nУстановить начальные процессы разработки Процесс разработки – это протокол взаимодействия между людьми в тех или иных ситуациях. Стратегия ведения веток в гите, статусы тикетов в джире и логика перехода из одного в другой, разграничение ответственностей каждого из участников проекта и группы разработки в целом и т.д. Сделать процессы понятными для всех важно, чтобы каждый понимал, что делать в той или иной ситуации. Я руководствуюсь собственным набором best practice:\nбрэнч-стратегия – Gitflow канбан либо scrum в качестве методики управления проектом прописанный свод правил \u0026ldquo;что делать, если\u0026hellip;\u0026rdquo;. В качестве примера можно взять этот документ созданный репозиторий в GitLab/Github/Azure/\u0026lt;your repo system\u0026gt; с \u0026ldquo;фундаментом\u0026rdquo; проекта настроенный Continious Integration, который проверяет сборку основных веток и мердж-реквесты настроенные проверки синтаксиса и статический анализатор кода Следить за установленными процессами разработки Недостаточно только установить процессы, необходимо также понимать, работают они или нет. Необходимо отслеживать прогресс работы и анализировать, как влияют принятые процессы и правила на него. Баги в проекте отражают реальную картину. Баг не может возникнуть из ничего, и его причина может сказать многое: недопонимание, непрозрачные требования, неописанные правила взаимодействия между участниками. Главное – никогда не упускать из виду процессы.\nАдаптировать и адаптироваться Best practice – это рекомендации, а не жесткие правила. Если что-то для вашей команды не работает, то нужно либо адаптировать процессы, либо адптироваться самому. Адаптировать процессы важно, потому что рекомендации описаны слишком универсально, чтобы могли быть применены без изменений к любой команде. Важно понять, как именно поменять процесс, а для этого необходимы анализ и ретроспективы.\nАдаптировать процессы может быть не так сложно, как адаптироваться самому. Универсальные практики были обкатаны многими командами, раз их рекомендуют применить в первую очередь. Если какая-то практика не работает для вас, то могут быть причиной устаревшие взгляды людей, кто принимает решение в команде. Для того, чтобы понять, что делать, нужно высокое умение рефлексировать.\nЕсли подытожить На мой взгляд, основная задача тимлида - это не тикеты в Jira двигать, а делать так, чтобы его команда комфортно могла делать это вместо него и ничто ей не мешало. Часто тимлид берет задачи в разработку, но нужно помнить, что такое стиот делать только в том случае, когда в тот момент времени команда перформит на достаточно высоком уровне.\n","permalink":"https://mgorbatyuk.dev/blog/management/2021-08-18-who-is-teamlead/","summary":"Что значит быть тимлидом Таким вопросом задаются многие разработчики: и те, кто хочет стать тимлидом, и те, кто уже. После полутора лет работы в качестве тимлида у меня сформировалось некое понимание своей роли в проекте и компании.\nНа мой взгляд, главная и едва ли не единственная задача тимлида на проекте – сделать максимально возможное, чтобы поставить продукт вовремя. Звучит легко, однако за этой формулировкой стоит такой огромный спектр задач, что можно легко запутаться.","title":"Главная задача тимлида на проекте"},{"content":"If you work with Azure infrastructure and have to integrate message queues. It sounds quite simple: just create Azure Resource, write some code and then be happy! But what would you say if the resources are limited? What will you do if there are several teammates in your team, and all of you have to debug queues at the same time?\nWell, I know a minor life hack for my teams. I create an InMemory Message queue engine for local development and use Azure Service Bus (or any other external MQ engine) only for remote environments. This solution allows me to not think about paid resources or concurrency access to the single development queue.\nDevelopers just create business logic and do not care about Azure Access or availability. I think the InMemory engine should not become an issue. Most of the business tasks do not depend on the technical implementation of the queue engine. My opinion that they should not do it at all. When you have to develop a technical algorithm that uses, for example, some Kafka or RabbitMQ features, you will debug it using external resources. But in my opinion, business logic should not depend on either RabbitMQ or Kafka, or Azure Service Bus. When you write unites, you do the same, aren’t you? Therefore the logic can use the InMemory solution during the local development.\nSo, let me show my solution. If you meet a similar task, the solution could be helpful for you. As an example, I will use an email distribution service (EDS) that accepts emails via Queues and then sends them. My apps publish email content, my EDS consumes it and sends using the SMTP server.\nTherefore, we need to develop the following items:\nSettings for our application Queue message publisher Queue consumer. Using InMemory Queues engine InMemory Setup I will use the MassTransit library to make the solution simpler. Here is a code that sets the MassTransit:\n// IServiceCollection services; services.AddMassTransit(x =\u0026gt; { x.AddConsumer\u0026lt;MassTransitEmailSendConsumer\u0026gt;(); x.UsingInMemory((context, cfg) =\u0026gt; { cfg.TransportConcurrencyLimit = 100; cfg.ConfigureEndpoints(context); cfg.ReceiveEndpoint(_configuration.EmailMessageTopic.ToString(), e =\u0026gt; { e.ConfigureConsumer\u0026lt;MassTransitEmailSendConsumer\u0026gt;(context); }); }); }); services.AddMassTransitHostedService(); services.AddScoped\u0026lt;IMessageBroker, InMemoryBrokerPublisher\u0026gt;(); Here I use some config values. The class represents MQ settings and is used by both queues: InMemory and Azure Service Bus.\nusing Microsoft.Extensions.Configuration; namespace YourNamespace { public class MessageBrokerSettings { public NonNullableString Connection { get; } public NonNullableString EmailMessageTopic { get; } public NonNullableString HealthCheckConnection { get; } public NonNullableString HealthCheckTopic { get; } public MessageBrokerSettings(IConfiguration configuration) { var section = configuration.GetSection(\u0026#34;Azure\u0026#34;).GetSection(\u0026#34;ServiceBus\u0026#34;); Connection = new NonNullableString(section[nameof(Connection)]); EmailMessageTopic = new NonNullableString(section[nameof(EmailMessageTopic)]); HealthCheckConnection = new NonNullableString(section[nameof(HealthCheckConnection)]); HealthCheckTopic = new NonNullableString(section[nameof(HealthCheckTopic)]); } } } NonNullableString is a special class that makes me sure that the value inside will never be null. Some kind of ValueObject from DDD, you know. When I invoke .ToString() method, the class returns me a value of the config. Otherwise, it will throw an exception. The code of the class you may see at my GitHub gist: NonNullableString.cs.\nInMemory Publisher Now we have created a publisher and consumer. The email publisher will use IPublishEnpoint that is given us by MassTransit library:\nusing System.Threading.Tasks; using MassTransit; using Microsoft.Extensions.Logging; namespace YourNamespace { public class InMemoryBrokerPublisher : BrokerPublisherBase { private readonly IPublishEndpoint _publish; public InMemoryBrokerPublisher(IPublishEndpoint publish, ILogger\u0026lt;InMemoryBrokerPublisher\u0026gt; logger) : base(logger) { _publish = publish; } protected override Task PublishInternalAsync\u0026lt;T\u0026gt;(string topicName, T message) { return _publish.Publish(message); } } } The BrokerPublisherBase is a base class and does not depend on queue implementation. The class is inherited by both queue-related publishers as well. It implements a simple IMessageBroker.\nusing System.Threading.Tasks; namespace YourNamespace { public interface IMessageBroker { Task PublishAsync\u0026lt;T\u0026gt;(string topicName, T message) where T : class; } } This interface gives the other business logic an endpoint to publish any message.\nInMemory Consumer We will use MassTransit’s ConsumerBase interface for InMemory consumers. Here is a content of the MassTransitEmailSendConsumer:\nusing System.Threading.Tasks; using MassTransit; using Microsoft.Extensions.Logging; namespace YourNamespace { public class MassTransitEmailSendConsumer : ConsumerBase\u0026lt;EmailMessage\u0026gt; { private readonly IEmail _email; protected override async Task ConsumeAsync(ConsumeContext\u0026lt;EmailMessage\u0026gt; context) { await _email.SendAsync(context.Message); Logger.LogDebug(“Email sent”); } public MassTransitEmailSendConsumer(ILogger\u0026lt;MassTransitEmailSendConsumer\u0026gt; logger, IEmail email) : base(logger) { _email = email; } } } IEmail is my business logic interface who is responsible for sending emails. The content of the class does not related to the article subject, and that’s why I don’t give a content of the class. The MassTransitEmailSendConsumer inherits from my own ConsumerBase.cs class implementing MassTransit’s IConsumer\u0026lt;T\u0026gt;.\nNow our ASP.NET core app could work with Message Queues using only memory. Let’s continue with Azure services.\nUsing Azure Service Bus queues I will not tell you about how to create an Azure Service Bus (ASB) using portal.azure.com. Here is a tutorial made by Microsoft. Let’s assume that we have already got a connection string of the Service Bus. How to get it, please read the tutorial from the MS above.\nI have created one queue for emailing and a special topic for azure health check. If you don’t need the health-check, you may create only needed queues.\nAzure SB Setup First, we should set up our application to work with the ASB.\n// IServiceCollection services; // MessageBrokerSettings configuration; services.AddHostedService\u0026lt;AzureBrokerEmailConsumerBackService\u0026gt;(); services.AddScoped\u0026lt;IMessageBroker, AzureServiceBusPublisher\u0026gt;(); services .AddHealthChecks() .AddAzureServiceBusTopic( connectionString: configuration.HealthCheckConnection.ToString(), topicName: configuration.HealthCheckTopic.ToString()); My app’s appsettings.json file contains the following values:\n“MessageBroker”: { “Connection”: “Endpoint=sb://yournamespace.windows.net/;SharedAccessKeyName=email;SharedAccessKey=awesomesecret”, “EmailMessageTopic”: “email-message-queue”, “HealthCheckConnection”: “Endpoint=sb://yournamespace.windows.net/;SharedAccessKeyName=healthcheck;SharedAccessKey=awesomesecret”, “HealthCheckTopic”: “azuretopic” }, “UseInMemoryMessageBroker”: true, MessageBroker section is being used by MessageBrokerSettings class. azuretopic value is a service name of the topic and is used by Health-check library.\nAzure SB Publisher The ASB accepts a string as the queue message, therefore we have to serialize a message. I use JSON format for the serialization. Here is a code of my publisher:\nusing System.Threading.Tasks; using Azure.Messaging.ServiceBus; using Microsoft.Extensions.Logging; using Newtonsoft.Json; using Services.Infrastructure.Azure; namespace YourNamespace { public class AzureServiceBusPublisher : BrokerPublisherBase { private readonly MessageBrokerSettings _config; public AzureServiceBusPublisher(MessageBrokerSettings configuration, ILogger\u0026lt;AzureServiceBusPublisher\u0026gt; logger) : base(logger) { _config = configuration; } protected override async Task PublishInternalAsync\u0026lt;T\u0026gt;(string topicName, T message) { // create a Service Bus client await using var client = new ServiceBusClient(_config.Connection.ToString()); ServiceBusSender sender = client.CreateSender(topicName); // create a message that we can send // send the message await sender.SendMessageAsync( new ServiceBusMessage(JsonConvert.SerializeObject(message))); } } } Please pay attention that the class above uses BrokerPublisherBase as parent. We create ServiceBusClient for each invocation of the class, and this way is recommended by Microsoft.\nAzure SB Consumer Consuming the SB queue message is not as simple as publishing. We should create a hosted service to consume messages within the background process of the ASP.NET Core app. We will use a BackgroundService provided by .net library. We will setup Callbacks for messages and possible errors, and then we will start an endless loop to make the background service working during the main app execution.\nusing System; using System.Threading.Tasks; using Azure.Messaging.ServiceBus; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Logging; namespace YourNamespace { public class AzureBrokerEmailConsumerBackService : AzureBusTopicConsumerBase { public AzureBrokerEmailConsumerBackService( ILogger\u0026lt;AzureBrokerEmailConsumerBackService\u0026gt; logger, IServiceScopeFactory scopeFactory, MessageBrokerSettings brokerSettings) : base( logger, scopeFactory, brokerSettings) { } // handle received messages protected override NonNullableString MessageTopic =\u0026gt; BrokerSettings.EmailMessageTopic; protected override Task MessageHandleInternalAsync(IServiceProvider provider, ServiceBusReceivedMessage message) { string body = message.Body.ToString(); var email = provider.GetRequiredService\u0026lt;IEmail\u0026gt;(); return email.SendAsync(body); } } } The consumer above inherits from our special class AzureBusTopicConsumerBase. This class hides most of the code that sets up the background service. Also, the class creates scope for each received message and then provides an instance of IServiceProvider provider. The provider is useful to get any business service to execute your task:\nusing var scope = ScopeFactory.CreateScope(); await MessageHandleInternalAsync(scope.ServiceProvider, args.Message); // complete the message. messages is deleted from the queue. await args.CompleteMessageAsync(args.Message); Conclusion All you need is a config class that will decide what MQ engine will be used for the running application: the InMemory MQ engine either Azure Service Bus. I have created a helper-class for this purpose, so you can use it as well. Now you have an application that uses Azure Service Bus for staging and production environments and InMemory engine for the local development.\nHope my article was useful for you. Thank you for the reading!\n","permalink":"https://mgorbatyuk.dev/blog/development/2021-03-07-asp-net-azure-sb-queues/","summary":"If you work with Azure infrastructure and have to integrate message queues. It sounds quite simple: just create Azure Resource, write some code and then be happy! But what would you say if the resources are limited? What will you do if there are several teammates in your team, and all of you have to debug queues at the same time?\nWell, I know a minor life hack for my teams.","title":"A little life hack when you work with Azure Service Bus and ASP.NET Core"},{"content":"The standard way to accept and return data in ASP.NET world is camel case. But at the current project, I was asked to change my ASP Web API application data processing format. I had to move all the JSON data format from camelCase to snake_case.\nThe reason for it was fact that we had to start developing React application as a SPA of our system. I thought that nothing will be a trouble, but I had met some issues. Now, I want to share with you my solution of how to make your ASP Web API and JSON in the Snake Case be the best friends.\nI have implemented in and published a simple template application. A link to the GitHub repository you can find at the end of the article. All the samples will be written for ASP.NET Core built with .net5.\nChanging request and response JSON formats All we need is to change the property naming policy. The standard one is the Camel Case. Changing it is not a difficult task. You should just create a couple of classes and add some settings to your Startup.cs class.\nFirst, you should create methods to convert property names to the Snake Case. We will use Newtonsoft.Json library feature for the task:\nusing Newtonsoft.Json; using Newtonsoft.Json.Serialization; using Utils.Helpers; namespace YourNamespace { public static class JsonSerializationExtensions { private static readonly SnakeCaseNamingStrategy _snakeCaseNamingStrategy = new SnakeCaseNamingStrategy(); private static readonly JsonSerializerSettings _snakeCaseSettings = new JsonSerializerSettings { ContractResolver = new DefaultContractResolver { NamingStrategy = _snakeCaseNamingStrategy } }; public static string ToSnakeCase\u0026lt;T\u0026gt;(this T instance) { if (instance == null) { throw new ArgumentNullException(paramName: nameof(instance)); } return JsonConvert.SerializeObject(instance, _snakeCaseSettings); } public static string ToSnakeCase(this string @string) { if (@string == null) { throw new ArgumentNullException(paramName: nameof(@string)); } return _snakeCaseNamingStrategy.GetPropertyName(@string, false); } } } Here we have a couple of useful overloaded methods: the first one accepts a model to serialize and the second one accepts a string value to convert. We use library class SnakeCaseNamingStrategy for naming policy settings.\nThen, we should create a class of NamingPolicy for our Web API application. Let\u0026rsquo;s create a class SnakeCaseNamingPolicy:\nusing System.Text.Json; using Utils.Serialization; namespace YourNamespace { public class SnakeCaseNamingPolicy : JsonNamingPolicy { public override string ConvertName(string name) =\u0026gt; name.ToSnakeCase(); } } Here we use the method ToSnakeCase() that we have created in the code above. We use the SnakeCaseNamingPolicy instance in the Startup.cs file in the ConfigureServices method:\npublic class Startup { public void ConfigureServices(IServiceCollection services) { // ... services .AddMvc() .AddJsonOptions(x =\u0026gt; { x.JsonSerializerOptions.PropertyNamingPolicy = new SnakeCaseNamingPolicy(); }); // ... } } Now our Web API works with the Snake Case: requests and responses are being transformed into JSON with the Snake Case format.\nBut now we have one minor issue…\nThe image above represents a validation error. The error’s output format is a mix of Camel Case for keys and the Pascal Case for property names. The behavior of output format was not changed even we have applied a custom name policy.\nSo, let’s fix the issue.\nChanging validation output JSON format To change the validation output, we should replace a standard state response factory with our custom one. First, we start from the error class that will form our response:\nusing System; using System.Collections.Generic; using System.Net; using Microsoft.AspNetCore.Mvc; namespace YourNamespace { public class ValidationProblemDetails : ProblemDetails { // 400 status ccode is usually used for input validation errors public const int ValidationStatusCode = (int)HttpStatusCode.BadRequest; public ValidationProblemDetails(ICollection\u0026lt;ValidationError\u0026gt; validationErrors) { ValidationErrors = validationErrors; Status = ValidationStatusCode; Title = \u0026#34;Request Validation Error\u0026#34;; } public ICollection\u0026lt;ValidationError\u0026gt; ValidationErrors { get; } public string RequestId =\u0026gt; Guid.NewGuid().ToString(); } } The class accepts a list of validation errors to show them in the response. The class inherits from standard ProblemDetails class from Microsoft.AspNetCore.Mvc package. The RequestId property makes it simpler to find the log record in the log view UI system.\nThen, you should replace a standard InvalidModelStateResponseFactory with our custom one. Here is a replacement class:\nusing System.Collections.Generic; using System.Linq; using System.Threading.Tasks; using Microsoft.AspNetCore.Mvc; using Utils.Serialization; namespace YourNamespace { public class ValidationProblemDetailsResult : IActionResult { public async Task ExecuteResultAsync(ActionContext context) { var modelStateEntries = context.ModelState .Where(e =\u0026gt; e.Value.Errors.Count \u0026gt; 0) .ToArray(); var errors = new List\u0026lt;ValidationError\u0026gt;(); if (modelStateEntries.Any()) { foreach (var (key, value) in modelStateEntries) { errors.AddRange(value.Errors .Select(modelStateError =\u0026gt; new ValidationError( name: key.ToSnakeCase(), description: modelStateError.ErrorMessage))); } } await new JsonErrorResponse\u0026lt;ValidationProblemDetails\u0026gt;( context: context.HttpContext, error: new ValidationProblemDetails(errors), statusCode: ValidationProblemDetails.ValidationStatusCode).WriteAsync(); } } } And some setting in Startup.cs should be placed:\npublic class Startup { // ... public void ConfigureServices(IServiceCollection services) { // ... services .Configure\u0026lt;ApiBehaviorOptions\u0026gt;(x =\u0026gt; { x.InvalidModelStateResponseFactory = ctx =\u0026gt; new ValidationProblemDetailsResult(); }); // ... } } Now your validation error output looks like this:\nNow, our ASP.NET Core application accepts and returns JSON with the Snake Case format, and validation error output was changed too. Here is a GitHub repository where you can find the implemented solution.\n","permalink":"https://mgorbatyuk.dev/blog/development/2021-02-20-snake-case-and-asp-net-core/","summary":"The standard way to accept and return data in ASP.NET world is camel case. But at the current project, I was asked to change my ASP Web API application data processing format. I had to move all the JSON data format from camelCase to snake_case.\nThe reason for it was fact that we had to start developing React application as a SPA of our system. I thought that nothing will be a trouble, but I had met some issues.","title":"How to accept and return snake case formatted JSON in ASP Web API"},{"content":"На днях посмотрел видео, где автор видео критикует книгу о \u0026ldquo;Мужском движении\u0026rdquo;. Книга, как и само мужское движение, так себе. Видео немного лучше, но тоже среднее, на мой взгляд. Но мой пост не об этом. Больше всего в видео меня зацепил этот момент, где автор берет факт из книги и разносит его в пух и прах, как он сам думает.\nФакт из книги: \u0026ldquo;\u0026hellip; в некоторых регионах России количество разводов достигает более ста процентов от количества заключенных браков\u0026rdquo;.\nАвтор видео: \u0026ldquo;Я - дипломированный специалист по финансовым и фондовым рынкам, который четыре года учил высшую математику, хочу сказать, что это предложение не имеет смысла \u0026hellip;.. как оно может превышать сто процентов? 100% - это единое число.\nЭто пафосно выглядит, когда кто-то приводит в качестве аргумента весомости своего мнения свое образование вместо простых и понятных объяснений своих мыслей. И очень даже потешно выглядит, когда автор по-детски ошибается в своем высказывании.\nРазберем же фразу из книги еще раз: \u0026ldquo;\u0026hellip; в некоторых регионах России количество разводов достигает более ста процентов от количества заключенных браков\u0026rdquo;. Как это может произойти и почему я не вижу ничего противозаконного в этом?\nДопустим, в 2018 и 2019 году брак заключили всего 200 пар, а в 2020, только 50. При этом в 2020 году созданные в за прошлые года семьи решили разойтись и подали 100 заявлений ра расторжение брака. В итоге имеем в 2020 году на 50 заключенных браков 100 разводов, что составляет 200% от кол-ва браков. Или другой пример. Молодые люди заключили брак в Москве, затем переехали в Питер и решили там разойтись. Если предположить, что петербуржцы дотошны до математики и в год на 100 браков всегда было 100 разводов, то в этом году москвичи обеспечили им 101 развод, что составило 101%.\nВполне житейские ситуации, которые никак не кажутся какой-то фантастикой, верно? Но вот автор видео почему-то решил, что подумать больше чем пару секунд - это роскошь для него, и в итоге записал на видео свой конфуз.\nКогда собеседник ставит факт наличия диплома о высшем образовании одним из аргументов, то я слышу, как будто он говорит так: \u0026ldquo;Я считаю себя очень умным в данном вопросе и даже в этом не сомневаюсь. И удосуживаться приводить иные факты, относящиеся к предмету спора, я не буду, как будто это ниже моего достоинства\u0026rdquo;. Мне кажется, что желание возвать к своему образованию возникает тогда, когда другие аргументы исчерпаны. И очень печально, если и не было других аргументов.\nЕсли ты компетентен в предмете спора, то ты найдешь простые объяснения своей точки зрения. Нет смысла взывать к своему образованию, если ты не умеешь его применять на практике. И ты опозоришься, если ошибешься после того, как похвастался своей компетентностью.\nВзывание к образованию очень похоже на требование \u0026ldquo;уважать старость\u0026rdquo;. Мол, \u0026ldquo;я тебя старше, уважай меня\u0026rdquo;. Нет, только лишь за то, что ты стар, я не буду тебя уважать больше, чем своего ровесника. Более того, если человеку к его 60/70/80 годам больше нечем хвастануть, кроме прожитых лет, то уважать такого человека не за что. Открыто проявлять неуважение я не призываю, но я буду игнорировать любые советы и слова от таких людей.\nВерить мнению только лишь из-за образования говорящего или уважать человека больше, чем он того заслуживает, только лишь из-за возраста - это все не про реальные уменя и поступки. Слова мало что значат, \u0026ldquo;человек делом красен\u0026rdquo;. Если в следующий раз ты услышишь от своего собеседника фразу наподобие \u0026ldquo;поверь мне, я - инженер\u0026rdquo;, то к его мнению нужно отнестись с большей долей критической оценки.\n","permalink":"https://mgorbatyuk.dev/blog/opinion/2020-09-15-knowledge-as-argue-arguement/","summary":"На днях посмотрел видео, где автор видео критикует книгу о \u0026ldquo;Мужском движении\u0026rdquo;. Книга, как и само мужское движение, так себе. Видео немного лучше, но тоже среднее, на мой взгляд. Но мой пост не об этом. Больше всего в видео меня зацепил этот момент, где автор берет факт из книги и разносит его в пух и прах, как он сам думает.\nФакт из книги: \u0026ldquo;\u0026hellip; в некоторых регионах России количество разводов достигает более ста процентов от количества заключенных браков\u0026rdquo;.","title":"Знания сами по себе как аргумент в споре"},{"content":"Недавно я послушал подкаст \u0026ldquo;Идеальный бизнес-аналитик глазами разработчика\u0026rdquo; своего очень хорошего друга. Не со всеми тезисами я был согласен, однако подкаст побудил меня начать обсуждение с участниками подкаста. А потом еще и сам побывал в этом подкасте в качестве гостя.\nЧтобы понять, кто такой \u0026ldquo;идеальный аналитик\u0026rdquo;, важно определиться с набором требований. Что я жду от аналитика как разработчик? А как тимлид? А как менеджер проекта? Сколько людей, столько и мнений, и я тоже хочу порассуждать о том, каков он - этот неуловимый идеальный аналитик.\nИдеальный аналитик\u0026hellip; \u0026hellip;глазами других участников проекта Аналитик глазами разработчика. Для разработчика важно, чтобы тикет был понятен, краток и емкий. Так разработчик реализует тикет без переделок, тестировщик понимает, как нужно тестировать максимально эффективно, а тимлид и менеджер проекта не страдают. Аналитик глазами тимлида и проектного менеджера. Для тимлида важно, чтобы тикет был реализован вовремя и в соответствии с планом. А это достигается, если тикет прописан максимально качественно. Проектному менеджеру это так же важно, как и тимлиду. В целом, аналитик идеален тогда, когда результат его работы - тикеты - идеален.\n\u0026hellip;пишет качественные тикеты Но что же за зверь такой, этот \u0026ldquo;качественный тикет\u0026rdquo;? Этот тикет отвечает на все вопросы разработчика, какие бы у него они не возникли. Тут важно соблюсти баланс: тикет можно перегрузить так, что у любого читающего будет возникать вопросов больше, чем их было до его прочтения. Любой тикет должен содержать критерии приемки, которые будут полезны и разработчику, и тестировщику, и тимлиду, и проектному менеджеру. Без них, на мой взгляд, сложно понять, что же хочет увидеть в конечном итоге заказчик функциональности. Если тикет привносит новую функциональность, то критериев приемки будет достаточно.\nЕсли тикет меняет предыдущую функциональность, то лучше всего написать требования в формате \u0026ldquo;было → стало\u0026rdquo;. Нужно не забыть и о ссылках на связанные ресурсы. Так читающий получит возможность прочесть больше контекста измененной бизнес-фичи.\n\u0026hellip;общается эффективно Коммуникация - это важно. Тикеты могут вызывать вопросы, в том числе и глобальные. Но коммуникация, связанная с тикетами должна быть письменной. Почему? Потому что она будет сохранена не только в двух головах, которые завтра могут уйти с проекта, но и в общекомандной тикет-системе. Принятые решения нужно фиксировать письменно, чтобы любой участник проекта мог ознакомиться с ними в любой момент времени. В противном случае мы получаем требования изменений, которые нигде не зафиксированы, никем не прочтены и никем не могут быть утверждены, пусть и задним числом.\nЧитатель может мне возразить, что можно обсудить задачу голосом, а зафиксировать решение письменно. Да, верно. Однако есть одно НО. Ты отвлекаешь аналитика и мешаешь ему продумывать новые фичи. Мало кому из разработчиков нравится, когда его отвлекают. Многие программисты могут рассказать целые тирады о том, как они строят в своих головах сложные абстракции и как легко они рушатся и приходится начинать думать сначала. Окей, это мнение имеет право на жизнь. Но почему же эти же самые разработчики считают, что отвлекать аналитика или тестировщика можно и даже как будто бы поощряется. На мой взгляд, это неверный подход. Аналитик - тоже человек думающий, который выстраивает абстракции в голове и выкладывает их в тикет-систему вместо кода.\nИдеальный аналитик это тоже понимает и в рамках разумного сопротивляется устойчивому желанию разработчиков отвлечь его. В первый раз предупреждение, а во второй - эскалация. Нужно сразу выстраивать грамотную систему коммуникации и пресекать ее нарушения. Иначе говоря, идеальный аналитик не боится идти на рабочий здоровый конфликт с разработчиками во имя блага проекта, а толковый проектный менеджер его поддержит в этом.\n\u0026hellip;отдает все свои усилия проекту Выше я затронул очень важный момент - отдача проекту. Каждый ее участник должен вкладываться в проект максимально. Цель участия в проекте каждого - улучшение этого проекта, и никаких других целей не должно быть.\nМотивация у каждого может быть своя - деньги, знания, расширение компетенций. Но все эти варианты мотивации абсолютно не противоречат цели самого проекта. Я не понимаю людей, которые говорят \u0026ldquo;я на проекте только из-за денег\u0026rdquo;. Мысленно я продолжаю их мысль так: \u0026ldquo;... поэтому вкладываться я не буду, даже и не ждите\u0026rdquo;. А зачем еще человеку говорить подобное? Если ты хочешь денег больше, новых знаний или прокачаться в программной архитектуре, то ты сможешь это реализовать, отдавая проекту все свои усилия. Как тимлида, меня приводит в уныние работа, сделанная вполсилы.\nАналитик тоже может прокачаться в новой для себя бизнес-сфере проекта. Но идеальный аналитик - как раз тот, кто отдается проекту на все 100%.\n\u0026hellip;с чувством юмора (опционально) Это качество желательно, но не обязательно. Как бы ни было странно, но все мы - люди, и мы хотим общаться с приятными нам людьми. На мой взгляд, если у человека есть чувство юмора, то он адекватен в общении. Не обязательно общаться с аналитиком вне рамок работы и рабочего проекта, но если есть возможность перекинуться парой слов с ним в курилке, то это - приятно и благоприятствует дружелюбной атмосфере в команде.\nНе обязательно, чтобы человек всем нравился. Главное - чтобы он выполнял свои задачи эффективно. Однако мы ведь говорим об идеальном аналитике, поэтому я отметил это качество. Если уж не повезло настолько, что аналитик оказался токсичным человеком, то только верно выстроенная система коммуникации убережет остальных членов команды от его токсичности. Если уж не повезло с чувством юмора, то, благодаря правильной письменной коммуникации, атмосфера в команде не пострадает.\nА тяжело ли найти идеального аналитика Да, тяжело. Как и идеального разработчика, тестировщика или проектного менеджера. Хорошо, что уже имеющийся аналитик на проекте может прокачаться до уровня, близкого к идеальному. Поэтому не все так страшно и депрессивно, как может показаться. На поиск или взращивание идеального тиммейта может уйти вся жизнь, но я думаю, что оно того стоит.\n","permalink":"https://mgorbatyuk.dev/blog/management/2020-09-07-ideal-ba/","summary":"Недавно я послушал подкаст \u0026ldquo;Идеальный бизнес-аналитик глазами разработчика\u0026rdquo; своего очень хорошего друга. Не со всеми тезисами я был согласен, однако подкаст побудил меня начать обсуждение с участниками подкаста. А потом еще и сам побывал в этом подкасте в качестве гостя.\nЧтобы понять, кто такой \u0026ldquo;идеальный аналитик\u0026rdquo;, важно определиться с набором требований. Что я жду от аналитика как разработчик? А как тимлид? А как менеджер проекта? Сколько людей, столько и мнений, и я тоже хочу порассуждать о том, каков он - этот неуловимый идеальный аналитик.","title":"Идеальный Бизнес-Аналитик глазами разработчика"},{"content":"Недавно пересмотрел мультфильм \u0026ldquo;Кунг-фу Панда\u0026rdquo;, а точнее два из трех. Последний раз смотрел почти десять лет назад, поэтому многое уже забылось. Сейчас, когда я вступил в осознанный возраст в 26 лет ¯\\_(ツ)_/¯, философия мультфильма видится совершенно другой. Мультфильм о том, как обрести себя, как отпустить прошлое и как начать жить сегодняшним днем.\nВ первом мультфильме По, главный персонаж, воспользовался случаем и изменил свою жизнь. Случай - его посчитали избранным Воином Дракона. По и до этого чувствовал, что не принадлежит тому месту, где он был и чем занимался. А занимался он семейным бизнесом и помогал отцу в лапшичной. А снились ему сны о битвах, где По - непосредственный участник и предводителей других воинов кунг-фу. Мечтатель, одним словом. И мечтателю мешал страх \u0026ldquo;предать\u0026rdquo; мечты отца, который видел По продолжателем семейного дела.\nВ течение мультфильма зритель увидит, что По на самом деле обладает недюжиной силой и наудивление проворен для панды, когда хочет покушать. Мастер Шифу лишь раскрыл потенциал По. Так что По - действительно избранный. Легенды гласили, что чтобы стать полноправным Воином Дракона, он должен прочесть свиток, когда будет готов. Под конец мультфильма По открывает список, но там пусто. Как окажется впоследствии, свиток был зеркален и показывал, что глядящий в него и есть избранный, а секрета нет. Главное - поверить, что ты избран.\nПараллельно нам показывают историю становления протагониста - Тай Лунга. Тай Лунг когда-то был учеником Шифу, а тот возлагал на него надежды как на будущего избранного. И когда Угвэй - старейшина дома кунг-фу - говорит, что Тай Лунг не является избранным, Шифу это принимает. Но Тай Лунг - нет. Тай Лунг, как он сам рассказал, делал все, чтобы Шифу гордился им, что он положил свою жизнь на подготовку к тому, чтобы быть достойным титула. А Шифу в момент кульминации отвернулся от Тай Лунга.\nПо понял, что он будет избранным, если сам поверит в это. Более того, мне показалось, что избранности-то и нет, как таковой. По понял это, осознал себя и перестал стремиться быть избранным. Хотя в мультфильме показали, что навыки кунг-фу у него уже были, я думаю, что это для того было сделано, чтобы объяснить, как он так быстро овладел боевыми искусствами. Тай Лунг же всю жизнь жил ради цели других. Он обвинил в этом Шифу и разрушил родную деревню. Заглушил выплеском агрессии боль от неоправданных ожиданий, хотя лишь он сам возложил эти ожидания. Он сам решил жить ради цели Шифу, а не ради себя. И винить в этом Тай Лунг не может никого, кроме себя.\nВторой мультфильм - о том, как обрести внутрений покой и гармонию. Сценарий мультфильма гораздо слабее, однако философская мысли глубже. Мне это понравилось больше. Еще в первом фильме затронули тему течности бытия: жить нужно сегодня, потому что прошлое не изменить, а будущее никто не знает. Именно поэтому значение имеет лишь сегодняшний день.\nПротагонист фильма Шен уничтожил весь род панд из-за того, что по предсказанию именно панда должна была остановить его на пути захвата всего Китая. Когда По увидел символику формы войнов Шена, он начинает ловить флэшбеки, которые его обескураживают. По пытается прояснить историю и выяснить у Шена, где же его родители. Когда По узнает про геноцид, он проигрывает сражение. Восстановиться ему помогает провидица и она же ему рассказывает, что не имеет значение прошлое, его уже не вернуть и не изменить. Нужно принять его, сделать выводы и строить свою судьбу без фрустрации. Тогда По понимает, что у него был любящий отец все это время - гусь Пинг. И флэшбеки больше не беспокоят По, он обретает внутреннюю гармонию. Какая разница, как начался его путь Воина Дракона? Значение имеет, что он делает сейчас и как будет строить свою судьбу дальше. Обретя гармонию, По побеждает Шена.\nТут я вспоминаю несколько цитат дяди Айро из мультсериала \u0026ldquo;Аватар. Легенда об Аанге\u0026rdquo;. Во втором сезоне в последней серии Аанг делится с ним переживаниями, что он выбрал спасти Катару вместо обучения и становлению как аватар. Айро поддержал его: \u0026ldquo;Роль превосходства силы преувеличивают. Ты поступил очень мудро, что выбрал счастье и любовь\u0026rdquo;. Каждый видит свое в этой фразе. Айро, по моему мнению, считает тоже, что жить нужно сегодня. Нельзя отказываться от счастья в настоящем ради абстрактного блага в будущем, которое еще и не предопределено, к тому же. Вторая цитата Айро сказана в самом начале: \u0026ldquo;Я открою тебе секрет, юный маг воздуха, как ты менял форму облаков, так же можно менять линию своей судьбы!\u0026rdquo;.\nМне понравилось, что мультфильм транслирует такую восточную мудрость детям. Жаль, что я лишь сейчас смог это понять и увидеть. Дети вряд ли смогут самостоятельно понять эту философию, поэтому важно, чтобы родители разъяснили ее им.\nМногие на нашем пути будут пытаться возлагать на нас надежды и свои ожидания, даже близкие нам люди. Но никогда нельзя забывать о том, чего хочешь в этой жизни ты. Нельзя жертвовать своим счастьем сегодня ради туманного будущего завтра. Тем более, если это будущее нам пытается внушить кто-то другой. Каждый ответственен за свою жизнь и за все, что в ней происходит. Жить нужно сегодня, перестав переживать из-за свершившегося \u0026ldquo;вчера\u0026rdquo; и неопределенного \u0026ldquo;завтра\u0026rdquo;.\n","permalink":"https://mgorbatyuk.dev/blog/opinion/2020-08-01-thoughts-about-kung-fu-panda-movie/","summary":"Недавно пересмотрел мультфильм \u0026ldquo;Кунг-фу Панда\u0026rdquo;, а точнее два из трех. Последний раз смотрел почти десять лет назад, поэтому многое уже забылось. Сейчас, когда я вступил в осознанный возраст в 26 лет ¯\\_(ツ)_/¯, философия мультфильма видится совершенно другой. Мультфильм о том, как обрести себя, как отпустить прошлое и как начать жить сегодняшним днем.\nВ первом мультфильме По, главный персонаж, воспользовался случаем и изменил свою жизнь. Случай - его посчитали избранным Воином Дракона.","title":"Мысли о мультфильме \"Кунг-фу Панда\" и о становлении себя"},{"content":"Написать эту статью меня натолкнул один случай. В моей команде двое junior-девелоперов: парень и девушка, и девушке я делал код-ревью. Задача была простая: ранее она написал экстеншн-метод (extension method из .NET) для валидации свойств объекта, и я предложил перенести этот экстеншн в сам класс объекта в качестве публичного метода. Девушка перенесла метод, и в качестве аргументов передавала те же свойства, которые нужно было провалидировать. Это было странное решение, ведь свойства объекта доступны в самом методе, нет нужды передавать их извне. Я написал ей в Slack, зачем она так написала. Разработчица мне ответила, что теперь поняла суть задачи и пообещала переделать в ближайшее время.\nСуть проблемы не в том, что был написан неоптимальный код. Девелопер признался, что реализовал задачу и отправил ее на код-ревью, хотя не уловил суть задачи. Именно \u0026ldquo;не уловить суть задачи\u0026rdquo; и есть, как мне кажется, гораздо более важная проблема.\nЯ встречал такое раньше. Я и сам в начале своей карьеры бросался имплементировать задачи, даже когда не понимал их и для чего они предназначены. Когда приходилось переделывать имплементацию, я задумывался, почему же так получалось. После раздумий я пришел к выводу, что причина - непонимание задачи и того, что хотят видеть в итоге, а главное - какую проблему решают.\nЭтот вывод может показаться очевидным для опытных разработчиков, однако для меня тогдашнего это было чем-то вроде откровения с небес. Мир как будто перестал быть прежним в тот момент. Я начал относиться к задачам более скептически и всегда стал задавать себе вопрос: а зачем хотят видеть эту бизнес-задачу выполненной? Какую проблему она решает? Естественно, мне ответить мог только заказчик (product owner), и так начались сессии общения с ним. Так я начал изучать не только программную архитектуру и computer science, но и менеджмент и маркетинг.\nК задачам и требованиям разработчик должен относиться скептически.\nТеперь я каждый раз, когда я беру задачу, я анализирую ее и с точки зрения бизнес-проблемы, которую задача закрывает. Это помогает мне лучше ее реализовать и понять, стоит ли прорабаывать легко расширяемую архитектуру или задача - лишь одноразовая затычка проблемы.\nВторая причина - это искажения призм восприятия и вещания у людей: разработчиков, тестировщиков, аналитиков, проджект-менеджеров (Project manager) и продакт-менеджеров (Product manager). Когда мы работаем, мы часто забываем, что требования нам отдают не машины, а люди. А люди имеют свойство уставать вследствие перегруза. Максим Дорофеев, автор шикарнейшей книги про прокрастинацию и тайм-менеджмент, писал об этом.\nПостановщик задач может испытывать проблему, которую Максим называет \u0026ldquo;синдромом дырявого стека\u0026rdquo;: задачи поступают аналитику настолько быстро, что он бросается выполнять их тут же и не успевает закончить с прежними. И так по кругу. В итоге, ни одна из задач не проработана достаточно прозрачно для всех остальных участников проекта. А разрабам их имплементить. И если разраб не отнесется скептически к поступившей задаче и приступит к ней, не понимая сути, то продукт не получится хорошего качества. Поэтому и важно не начинать разработку, пока суть и смысл задачи не ясен.\nОчень редко эта проблема встречается вследствие злого умысла. Всегда есть факторы, которые могут исказить смысл описания тикета. Например, в голове у автора задачи картинка мира идеально прорисована, а вот словарного запаса или моральных сил не хватило на то, чтобы описать тикет полноценно. И автор считает, что тикет написан достаточно доходчиво, но другим он непонятен вообще. И это - проблема не всех остальных, а отдельно взятого неверно оформленного тикета. Я не призываю обвинять конкретных людей в этом, я призываю просто признать и принять проблему и решать ее коллективно.\nХорошо описать тикет - задача не только аналитиков, но разработчиков и всех остальных участников проекта.\nК этому призывают и некоторые принципы Agile-манифеста: второй и четвертый в частности. На планировании продакт-оунер (Product owner) \u0026ldquo;продает\u0026rdquo; задачи разработчикам, а они, в свою очередь, задают уточняющие вопросы и прорабатывают его коллективно. И только когда тикет понятен всем участникам проекта, его берут на оценку и закладывают в будущий спринт.\nЕсть еще одна причина непроработанных тикетов, которую не все признают. Чаще всего она встречатеся в продуктовых компаниях, хотя и аутсорс не лишен этого порока. Иногда заказчик или проектный менеджер просто хотят выслужиться перед своим руководством, и тогда начинается имитация бурной деятельности - незначительные требования и украшательства либо недооформленные тикеты. Иными словами, все процессы заказчик строит так, чтобы быть занятым либо на митингах с разрабами, \u0026ldquo;которые ничего не понимают и им нужно разъяснять все по несколько раз\u0026rdquo;, либо наоборот овер-описанные тикеты, где можно утерять суть тикета за тонной текста. К счастью, мне не доводилось напрямую работать с такими заказчиками, однако по рассказам друзей и по их тикетам я видел это.\nОдна из основных задач разраба в разработке - подвергать описание тикетов критике. Заказчик рассказывает о задаче разработчикам на своем языке бизнеса, а разработчики стремятся перевести его слова в язык технический и понять, как тикет повлияет на разрабатываемую систему. Этот рабочий доброжелательный конфликт всегда должен присутствовать в продуктивной рабочей среде.\nЕсли рабочего конфликта между разработчиками и заказчиком не будет, то о непроработке задач будут сигнализировать уже непосредственные конечные пользователи системы.\nМой совет всем разработчикам: помогать бизнесу разрабатывать продукт, в том числе и прорабатывая тикеты совместно. Не беритесь за тикеты, пока их не понимаете, но не нужно наотрез отказываться от тикетов. Помогая аналитикам прорабаывать задачи и требования, разработчик прокачивает и свои аналитические навыки.\n","permalink":"https://mgorbatyuk.dev/blog/opinion/2020-04-24-do-not-develop-what-you-dont-understand/","summary":"Написать эту статью меня натолкнул один случай. В моей команде двое junior-девелоперов: парень и девушка, и девушке я делал код-ревью. Задача была простая: ранее она написал экстеншн-метод (extension method из .NET) для валидации свойств объекта, и я предложил перенести этот экстеншн в сам класс объекта в качестве публичного метода. Девушка перенесла метод, и в качестве аргументов передавала те же свойства, которые нужно было провалидировать. Это было странное решение, ведь свойства объекта доступны в самом методе, нет нужды передавать их извне.","title":"Не берись делать то, чего не понимаешь"},{"content":"Предыстория Идея этой статьи родилась, пока я писал статью на другую тему: \u0026ldquo;Product development vs outsourcing\u0026rdquo;. За мою небольшую карьеру я успел поработать сначала в двух продуктовых компаниях, а затем в двух аутсорсовых. Переход с продуктовой разработки в аутсорс случился два года назад (2018) и показался мне кардинальным. С тех пор я держал в голове мысль написать об этом статью.\nСперва мне показалось, что в продуктовой компании работать лучше. Продуктовой в данном случая я называю банк, который разрабатывал свой веб-сайт, систему мобильного онлайн-банкинг и мобильные приложения. Я тогда думал, что в продуктовой компании работают, по большей части, люди заинтересованные в развитии продукта, тогда как в аутсорсе большинство разработчиков работали по принципу \u0026ldquo;сегодня один проект, завтра другой, так зачем сильно напрягаться сегодня?\u0026rdquo;. Не скажу, что я видел какой-то огонь в глазах разработчиков в банке, однако я видел яркое отношение людей к проектам в аутсорсе. Люди в аутсорсовой компании, которые участвовали далеко не в первом проекте, были \u0026ldquo;расслабленными\u0026rdquo; и не заботились об архитектуре программного кода. Сейчас я думаю, что именно таким я и видел в целом \u0026ldquo;температуру по больнице\u0026rdquo;.\nСпустя пару лет и сменив один аутсорс другим гораздо меньших масштабов я понял, что я был не совсем прав: слышал звон, да не знал где он. Я думаю, что\u0026hellip;\nотношение разработчика к проекту, где он задействован, базируется на том, видит ли он возможности чему-то научиться или нет.\nВ банке я видел многих разработчиков, которые с энтузиазмом приходили на работу и искренне обсуждали проблемы продукта, над которым работали. Курилки, посиделки в кафетериях на этажах, мероприятия вне стен банка - везде слышались разговоры о сайте, о проектах и проблемах интеграции. В аутсорсе разговоры в курилках были менее активные, а если и были, то только между разработчиками одного проекта. Иначе говоря, как будто продуктовые разговоры, но в меньших масштабах.\nЯ думаю, что разговоры о проекте в контексте, где таких разговоров быть вроде как не должно, появляются в двух случаях:\nРазработчик хочет решить проблему и научиться чему-то новому. Разработчику хочется пожаловаться и выговориться. В обоих случаях нет разницы, продуктовая это разработка или аутсорс. Конечно, все мы люди и иногда хочется, чтобы нас выслушали в определенных ситуациях, где нам даже совет и не нужен, поэтому рассмотрим более близко первую причину.\nЧему можно научиться на проекте На любом проекте каждый может найти что-то, чего он до этого не делал, и это может быть:\nтехнологии; фреймворки; алгоритмы; инструменты; роли на проекте; менторство над менее скилловыми тиммейтами. Мне кажется, что попробовать себя в новой роли на проекте - не менее интересно, чем освоить новые технологии. Например, я перешел в другую компанию пару месяцев назад для того, чтобы примерить на себе роль тимлида на проекте, который почти ничем не отличался стеком технологий от предыдущего. Другой разработчик может найти что-то новое для себя в решении бизнес-задач, которые раньше он не решал никогда. Один мой хороший друг и сильный програмист по совместительству ушел в компанию, которая захотела запустить проект по прогнозированию нагрузки на общественный транспорт на основе количества транзакций оплаты проезда в единицу времени в разные периоды суток. В этом проекте его заинтересовала именно реализация алгоритма прогнозирования.\nРаботать же с людьми, которые не видят в проекте ничего нового для себя, на мой взгляд, немного демотивирует, если не осознавать причин. Сперва может показаться, что \u0026ldquo;зачем мне пахать на проекте, хотя рядом сидит в развалку товарищ и не парится\u0026rdquo;. Товарищ действительно имеет полное право сидеть вразвалку и не париться, однако ты должен понимать, что на это есть причины, как и у тебя есть причины пахать на этом проекте. Ленивый товарищ просто сидит, пока капает зарплата на оплату платежей по ипотеке, а тебе же необходимо как можно больше нахватать опыта и навыков, которые однозначно пригодятся тебе в будущем.\nСоветы Тимлидам и менеджерам можно дать совет такой: всегда нужно искать тех, кто хочет научиться у вас чему-то новому. Такие разработчики, как минимум, честны с собой и с вами, а значит вы будете уверены в их ожиданиях и мотивации. А если у вас на проекте нечему научиться сильному кандидату, то лучше так и сказать и предложить больше зарплату - авось кандидат и \u0026ldquo;купит\u0026rdquo; у вас позицию на этих условиях. Однако это опасно, потому что если привлечь спеца только деньгами, то делать это бесконечно не получится - деньги далеко не бесконечный ресурс. Поэтому необходимо будет после найма искать иные возможности заинтересовать его.\nРазработчикам, которые понимают, что у них огонь в глазах на текуем проекте не горит, могу посоветовать только банальные вещи:\nрасширить круг своей ответственности; менторство над джунами; внедрение совершенно новой технологии на проекте; роль тимлида нового стрима в рамках текущего проекта или переход на другой проект на роль тимлида; pet-проекты. Если же ты понимаешь, что ничего из вышеперечисленного ты не хочешь, то можно вполне заняться личными pet-проектами, и, возможно, заряда огня в глазах хватит и на рабочие задачи. Всегда есть что-то, чему можно и нужно научиться, главное - не переставать искать, а иначе программирование перестанет быть хобии и станет \u0026ldquo;нелюбимой\u0026rdquo; работой.\n","permalink":"https://mgorbatyuk.dev/blog/opinion/2020-03-07-seeking-new-to-learn-is-important/","summary":"Предыстория Идея этой статьи родилась, пока я писал статью на другую тему: \u0026ldquo;Product development vs outsourcing\u0026rdquo;. За мою небольшую карьеру я успел поработать сначала в двух продуктовых компаниях, а затем в двух аутсорсовых. Переход с продуктовой разработки в аутсорс случился два года назад (2018) и показался мне кардинальным. С тех пор я держал в голове мысль написать об этом статью.\nСперва мне показалось, что в продуктовой компании работать лучше. Продуктовой в данном случая я называю банк, который разрабатывал свой веб-сайт, систему мобильного онлайн-банкинг и мобильные приложения.","title":"Желание научиться новому видно по горящим глазам разработчика"},{"content":"Написать эту статью меня побудил случай в Германии. Я решил провести пару недель в Европе, и чтобы комфортно пользоваться интернетом, решил купить симкарту и пакет в размером в 3гб. Казалось бы, одна из самых простых операций в СНГ, которая не заняла бы много времени. Но мы ведь в Германии, стране, где капитализм и социализм переплелись в крайне занятный тандем.\nЧто нужно туристу, чтобы начать пользоваться интернетом в другой стране?\nКупить симкарту. Купить интернет-пакет. Пользоваться в свое удовольствие. Однако я, будучи туристом в Германии, столкнулся с рядом проблем и совершением ненужных, с моей точки зрения, действий.\nИстория покупки симкарты У выбранного мной оператора были одни из самых выгодных условий по предложению интернет-пакетов и стоимости: 3гб интернета, безлимит по звонкам и стоимость в 15 евро, что относительно недорого. Если бы не эти факты, то я бы не стал проделывать весь этот квест, о котором ниже.\nСначала я очень удивился, когда я пришел в отделение и узнал, что у них нет самих симкарт. Довльно странная работа со складом, на мой взгляд. Тут вопрос не только удобства клиентам и особенно туристам. Из-за того, что в отделении не было запаса карт, клиенты уходят к их конкурентам. Так сделал бы и я, но условия пакетов привлекали. Мне посоветовали пойти в местный филиал \u0026ldquo;Техносулпака\u0026rdquo; и купить симкарту там, а приобрести пакет - у них. Покупка симкарты заняла минут 30 из-за того, что продавец долго заполнял данные паспорта. Возможно, продажа иностранцам чего-либо в Германии требует заполнения этой электронной макулатуры, но мне как клиенту это стоило времени.\nЧто ж, \u0026ldquo;симка\u0026rdquo; куплена, остался интернет-пакет. Возвращаюсь в отделение оператора, и там мне вместо пакета \u0026ldquo;продают\u0026rdquo; два листа формата А4: на одном из них был код, введя который я бы получил 15 евро на свой счет, на втором - номер телефона, по которому я должен был позвонить для активации интернет-пакета. Тут у меня возник резонный вопрос: а зачем тогда нужен был этот поход в отделение? Я помню времена, когда в магазинах продавали карточки на пополнение баланса телефона: вводишь комбинацию из цифр и звездочек и получаешь деньги на счету.\nВторой вопрос, который бепокоил меня еще больше - это необходимость звонить по какому-то номеру для активации пакета. Зачем? Почему? На каком языке мне там нужно будет общаться? Здесь мне уже помогли мои родственники, у которых я и остановился. Как мне сказали, на телефоне был робот, который просил нажимать нужные цифры для подтверждения покупки пакета. Таким образом, спустя два часа и кучи потраченных нервов из-за непонимания необходимости тех или иных действий.\nЗачем нужно столько людей? В Казахстане, где я живу, подобная задача требует лишь одного похода в отделение и буквально 15 минут времени. Не знаю, как проходит регистрация симкарт для неграждан РК, но почему-то кажется, что никаких дополнительных сложностей со стороны клиента, кроме ожидания, это не требует. Процесс автоматизирован лучше, чем в Германии. Я сначала искренне не понимал, почему здесь с такой простой задачей возникли такие проблемы, а потом пришла одна идея. Мне кажется, что Германия таким образом обеспечивает рабочие места людям. Об этом еще писал Юваль Ной Харари в книге \u0026ldquo;21 урок для XXI века\u0026rdquo;. Новаль пишет, что государство, вполне вероятно, сдерживает прогресс для того, чтобы низкоквалифицированное население успело адаптироваться к новым реалиям автоматизации и переучиться на другие профессии.\nМне кажется, что Германия, как страна со смешанной экономикой с большим уклоном в социалистический строй, и обеспечивает рабочие места иммигрантам за счет сдерживания автоматизации и прогресса. В рассказанной мной истории участвуют двое людей: продавец симкарты и консультант в отделении, хотя всю услугу мог предоставить только один человек вместо двух. Сохранение рабочими местами людей - это обеспечение стабильности в обществе. Думаю, что это требуется еще больше в том государстве, которое вынуждено содержать иммигрантов и сохранять \u0026ldquo;спокойствие\u0026rdquo; своим гражданам в этих условиях.\nСтабильность vs прогресс С одной стороны, полдня ожидания симкарты вместо двадцати минут - небольшая плата за относительную стабильность в обществе, где каждый ее работающий гражданин обязан отдавать почти половину заработной платы в пользу государства. С другой стороны, такой подход к экономике - отход от капитализма. Можно долго ругать капитализм как строй, однако человечество ничего лучшего пока не придумало, на мой взгляд. Как бы ни было жестоко, но я считаю, что люди должны учиться быть конкурентно способными уже сейчас, и если твою профессию сокращают в связи с оптимизацией и автоматизацией. Не стоит оттягивать этот момент как можно дольше, потому что прогресс не просто \u0026ldquo;наступает\u0026rdquo;, а уже наступил.\n","permalink":"https://mgorbatyuk.dev/blog/opinion/2020-02-27-social-employment-about/","summary":"Написать эту статью меня побудил случай в Германии. Я решил провести пару недель в Европе, и чтобы комфортно пользоваться интернетом, решил купить симкарту и пакет в размером в 3гб. Казалось бы, одна из самых простых операций в СНГ, которая не заняла бы много времени. Но мы ведь в Германии, стране, где капитализм и социализм переплелись в крайне занятный тандем.\nЧто нужно туристу, чтобы начать пользоваться интернетом в другой стране?\nКупить симкарту.","title":"О социальном трудоустройстве"},{"content":"Эту же статью я опубликовал на habr.com.\nЗачем это необходимо Когда в твоей команде работают больше одного человека, так или иначе все сталкиваются с проблемой разных стилей кодирования каждого члена команды. Кто-то пишет скобки для блоков if...else, кто-то нет. Когда проект становится больше, то такой код труднее читать и еще сложнее проводить код-ревью.\nЧтобы код-ревью и прочие командные митинги не превратились в обсуждение tab vs spaces на повышенных тонах, лучше настроить репозиторий таким образом, чтобы сам проект не допускал написание невалидного и нестандартного для команды кода.\nС одной стороны, использование разных стилей кодирования может показаться вкусовщиной, недостойной внимания. Ну не оборачивает джун единственную строку кода после условия if, а кто-то пишет, что с того? Если оставить код из под пера джуна \u0026ldquo;как есть\u0026rdquo;, то это может стать \u0026ldquo;бомбой замедленного действия\u0026rdquo;: ту строку кода после if могут удалить, и тогда под условие попадет следующая строка. Конечно, эта ситуация обычно отлавливается на код-ревью, однако бывает так, что этот потенциальный баг проходит проверку, и вот две основных причины:\nМы все люди, а люди ошибаются. Люди социальны, а значит вступать \u0026ldquo;в очередной раз\u0026rdquo; в конфликт, связанный со стилями, не захочется. И тут возможны два варианта: \u0026ldquo;Лучше поправлю сам\u0026rdquo;, думает проверяющий, и правит код. Проверяющий срывается на джуна и высказывает свои сомнения в его адекватности и необходимости существования. Как можно добиться того, чтобы каждый писал в соответствии с командным стилем? Бить по рукам на код-ревью каждый раз демотивирует и автора кода, и самого проверяющего. К счастью, эта проблема будоражит умы не одного программиста не первый год, и в нашем распоряжении сейчас есть множество инструментов.\nЦель этой статьи - рассказать другим и себе будущему, как я настраиваю репозиторий проекта таким образом, чтобы он сам обезопасил себя от невалидного кода с точки зрения стандартов команды.\nЧто мы имеем В качестве примера возьмем демонстрационный проект, код которого будет выложен на GitHub. Так как я занимаюсь разработкой на .NET Core, то и проект будет написан на нем. Что я буду использовать:\n.NET Core 3.1 Angular 8+ Github аккаунт Travis CI Я уже создал демонстрационный репозиторий проекта и настроил в нем Travis-CI. Далее в статье разберем, что необходимо было сделать для этого и почему.\nПайплайн репозитория Пайплайн репозитория - механизм, предотвращающий попадаение невалидного кода с второстепенных веток в основную master branch. \u0026ldquo;Из коробки\u0026rdquo; пайплайны доступны в Gitlab и Azure DevOps, а в Github - через Travis CI.\nНастраиваем репозиторий Мне нравится подход к разработке софта Егора Бугаенко. Я законспектировал несколько его докладов на этом блоге. Если кратко, то вот основные принципы, которым я буду следовать при настройке репозитория:\nОграничение прав на пуш. Я ограничиваю права на пуш в develop и master всем, кроме мейнтейнеров (maintainer). Пайплайн сборки. Я прописываю пайплайн для сборки проекта в CICD и прогона юниттестов как для бэкенда, так и фронта. Repository is a king. В репозитории я прописываю правила работы с кодом и gitflow, а также другие связанные с подходами в разработке документы. Fail fast. Если код написан невалидно с точки зрения стандартного стиля, то разработчик получит ошибку компиляции. CI pipeline. Пайплайн проверяет тесты, стиль кода, возможно добавляет проверку от sonarqube на качество кода. Ни один МР не должен быть залит, если пайлайн для него не прошел успешно. Что мы получаем в итоге? Во-первых, в master и develop смогут залить код только мейнтейнеры проекта. В идеале, конечно, и им нужно ограничить доступ, чтобы только \u0026ldquo;автомат\u0026rdquo; мог сливать ветки. Я оставил реализацию этого принципа \u0026ldquo;на потом\u0026rdquo;. Ограничение прав настраивается через интерфейс гитлаба, поэтому я не буду описывать этот этап здесь.\nВалидация бэкенда Я настраиваю solution-файл (*.sln) проекта так, чтобы он выдавал несоответствия написанного кода стандартам стайл-гайда .NET как ошибки компиляции. Чтобы сделать это, мне понадобится файл с перечислением кодов ошибок, пара nuget-пакетов и немного терпения.\nЯ использую stylecop в проектах для .NET Core. Чтобы его верно настроить, прежде всего мы создаем несколько файлов в корне проекта рядом с solution-файлом (ссылки ведут на gist.github.com):\nDirectory.build.props - ссылка на файл. standard.ruleset - ссылка на файл. stylecop.json - ссылка на файл. После этих действий наш проект не будет собираться, пока в нем будут ошибки стиля кодирования.\nВалидация фронтенда Фронтенд-приложение тоже необходимо валидировать. Здесь настройки пайплайна менее критичны к нарушениям стиля кода: если мы пропустим где-то точку с запятой, то проект все равно будет работать. На страже репозитория здесь будет стоять агент пайплайна. Я автоматизирую следующие команды:\n# Проверка линта ng lint # Сборка в режиме продакшна, чтобы провалидировать и html-файлы ng build --prod # Прогон тестов ng test Есть небольшой нюанс работы агентов репозитория с тестами. Дело в том, что для прогона тестов необходим движок Хрома (Chrome / Chromium), а он чаще всего отсутствует в контейнерах CI-систем. Чтобы агент мог запускать тесты фронта, я добавляю npm-пакет puppeteer в проект, который подтянет с собой и хромиум.\nТаким образом, чтобы и корректность фронтенда валидировалась пайплайном, нам необходимо проделать следующие шаги:\nДобавить новую команду \u0026quot;test-headless-ci-only\u0026quot;: \u0026quot;ng test --browsers ChromiumNoSandbox\u0026quot; в блок scripts файла packages.json: \u0026#34;scripts\u0026#34;: { \u0026#34;ng\u0026#34;: \u0026#34;ng\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;ng serve -o\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;ng build\u0026#34;, \u0026#34;build-stage\u0026#34;: \u0026#34;ng build --configuration=staging\u0026#34;, \u0026#34;build-prod\u0026#34;: \u0026#34;ng build --prod\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;ng test\u0026#34;, \u0026#34;test-headless-ci-only\u0026#34;: \u0026#34;ng test --browsers ChromiumNoSandbox\u0026#34;, \u0026#34;lint\u0026#34;: \u0026#34;ng lint\u0026#34;, \u0026#34;e2e\u0026#34;: \u0026#34;ng e2e\u0026#34; }, Установить пакет npm install puppeteer и прописать его в файле karma.conf.js в самое начало файла: const process = require(\u0026#34;process\u0026#34;); process.env.CHROME_BIN = require(\u0026#34;puppeteer\u0026#34;).executablePath(); module.exports = function(config) { ... }; Добавить кастомный лаунчер тестов в файле karma.conf.js в секцию customLaunchers: config.set({ ...., customLaunchers: { ChromiumNoSandbox: { base: \u0026#34;ChromeHeadless\u0026#34;, flags: [ \u0026#34;--no-sandbox\u0026#34;, \u0026#34;--headless\u0026#34;, \u0026#34;--disable-gpu\u0026#34;, \u0026#34;--disable-translate\u0026#34;, \u0026#34;--disable-extensions\u0026#34; ] } }, singleRun: true }); Теперь в скриптах пайплайна можно запускать тесты командой npm run est-headless-ci-only.\nСтандартизируем код фронтенда Чтобы код-ревью тикетов для фронтенда не превратились в обсуждение предпочтений форматирования, лучше всего стандартизировать его. Я пользуюсь инструментом prettierrc, потому что репозиторий проекта имеет много звезд и документация написана подробно. Эта библиотека помогает подкорректировать форматирование автоматически. Чтобы добавить prettierrc в проект, необходимо:\nУстановить пакеты prettier и pretty-quick глобально: npm install -g prettier npm install -g pretty-quick Добавить файл конфигурации с именем .prettierrc в корень фронтенд-приложения: { \u0026#34;useTabs\u0026#34;: false, \u0026#34;printWidth\u0026#34;: 120, \u0026#34;tabWidth\u0026#34;: 2, \u0026#34;singleQuote\u0026#34;: true, \u0026#34;trailingComma\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;semi\u0026#34;: true } Добавить список файлов для игнорирования prettier-ом в файл с именем .prettierignore в корень фронтенд-приложения: package.json package-lock.json tslint.json tsconfig.json browserslist .gitkeep favicon.ico tsconfig.lib.json tsconfig.app.json tsconfig.spec.json karma.conf.js protractor.conf.js ng-package.json *.html Теперь можно \u0026ldquo;привести в порядок\u0026rdquo; код фронтенда командой pretty-quick --staged.\nИспользование прекоммит-хуков (Если ресурсы CI критичны) Как можно больше работы стоит поручать CI агентам. Задача разработчиков - писать как можно больше кода, и прекоммит хуки будут тормозить вашу работу. В идеале, разработчик должен суметь запушить код любого качества, даже недописанный, а проверки кода - осуществляться только для открытого мердж-реквеста.\nЕсли вам необходимо запускать некоторые операции локально до публикации в репозиторий, то прекоммит-хуки вам помогут. Например, я добавлял форматирование кода на такой хук.\nДля фронтенда лучше всего подойдет библиотека husky. Чтобы настроить хук, необходимо:\nУстановить библиотеку husky npm install -g husky Добавить хук husk в файл package.json в конец: \u0026#34;devDependencies\u0026#34;: { ... }, \u0026#34;husky\u0026#34;: { \u0026#34;hooks\u0026#34;: { \u0026#34;pre-commit\u0026#34;: \u0026#34;pretty-quick --staged\u0026#34;, \u0026#34;pre-push\u0026#34;: \u0026#34;ng lint \u0026amp;\u0026amp; ng test --browsers ChromiumNoSandbox\u0026#34; } } Здесь я разделил команды: нет необходимости проверять тесты фронтенда на каждый коммит, но мы не дадим залить изменения в удаленный репозиторий, пока тесты не будут \u0026ldquo;зелеными\u0026rdquo;.\nИтог После того, как сделаны описанные в статье шаги, я получаю проект, который \u0026ldquo;защищает сам себя\u0026rdquo; от невалидного кода. Понятное дело, что одной проверкой синтаксиса и стайл-гайда не уберечь продукт от багов, однако даже эти незначительные вещи помогают в достижении большего качества кода и позволяют обсуждать архитектурные решения на код-ревью, а не вопросы форматирования.\n","permalink":"https://mgorbatyuk.dev/blog/development/2020-02-16-how-to-reject-invalid-code/","summary":"Эту же статью я опубликовал на habr.com.\nЗачем это необходимо Когда в твоей команде работают больше одного человека, так или иначе все сталкиваются с проблемой разных стилей кодирования каждого члена команды. Кто-то пишет скобки для блоков if...else, кто-то нет. Когда проект становится больше, то такой код труднее читать и еще сложнее проводить код-ревью.\nЧтобы код-ревью и прочие командные митинги не превратились в обсуждение tab vs spaces на повышенных тонах, лучше настроить репозиторий таким образом, чтобы сам проект не допускал написание невалидного и нестандартного для команды кода.","title":"Как не пропустить невалидный код в репозиторий"},{"content":" Я ходил на фильм \u0026ldquo;Паразиты\u0026rdquo; летом прошлого года, когда он только вышел в прокат в Казахстане. Помню, что он показался мне немного запутанным, но сюжет, игра актеров и повествование завораживалb. Мне хотелось смотреть его еще и еще и, наконец, узнать, чем же он закончится. Я - небольшой критик кино, я не могу сходу назвать и увидеть сценарные и операторские приемы, которые делают хорошие фильмы хорошими, а их отсутствие - плохие фильмы плохими. После выхода из зала я могу лишь сказать, понравился мне фильм или нет. К моменту написания этой статьи стало известно, что фильм получил два оскара в номинациях \u0026ldquo;за лучший фильм\u0026rdquo; и \u0026ldquo;за лучший иностранный фильм\u0026rdquo;. Хорошее достижение, говорят, что это - впервые за 92 года истории премии Оскар.\nКогда я вышел из кинозала после просмотра \u0026ldquo;Паразитов\u0026rdquo;, я был немного шокирован концовкой. Пока не произошло убийство главы богатого семейства Пак, мне фильм определенно нравился, он действительно завораживал. Подобное я чувствую при просмотре фильмов Тарантино, которые мне очень нравятся. Однако концовка \u0026ldquo;Паразитов\u0026rdquo; шокировала меня, и мне фильм даже разонравился в тот момент.\nМне просто ужасно не понравилась кульминация сюжета действиями и поведением отца семейства бедняков Ким. Да, отец семьи Пак высказывался презрительно про запах от водителя - главы семьи Ким, и это его определенно не красило. С другой стороны, это его мнение, которое он как раз-таки и не высказывал на публике, он обсуждал его только со своей женой. На публике в присутствии семьи Ким он не позволял себе подобных презрительных высказываний. Мы не знаем, считает ли чета Пак водителя - отца семьи Ким - за человека второго сорта, потому что кроме претензий к запаху они никоим образом не показали, что считают свою прислугу за людей \u0026ldquo;хуже себя\u0026rdquo;. Более того, претензия была только к одному из четы Ким, и даже к нему они проявляли должное уважение.\nСтало ли это отношение богатого к бедному причиной для убийства? Сомневаюсь. Думаю, что причина убийства главы семьи Пак была в другом.\nГлава бедной семьи Ким начал слышать комментарии в адрес запаха. Что мог сделать отец Ким в этом случае? Я вижу два варианта:\nПризнать, что семья Ким живет в неблагополучных условиях и как минимум исправить одно из проявлений этого - помыться и постирать свою одежду. Продолжать терпеть комментарии и затаить обиду на семью Пак. Очевидно, что второй вариант не требует особых усилий и слома мировоззрения, и поэтому глава Ким выбирает именно его. Даже если он не хочет поработать над собой, он мог бы просто уйти с этой работы, дав возможность заработать остальным членам его семьи. Более того, отец Ким - здоровый мужчина вполне работоспособного возраста. Интересно, почему он безработный? Скорее всего, у него в крови лениться и паразитировать на результатах труда других вместо того, чтобы работать и зарабатывать честно самому. Впрочем, вся семья пытается так или иначе прожить за счет других: даже показанная в начале фильма история про ловлю соседского WiFi в начале фильма подтверждает это.\nОтец Ким видит, что к нему презрительное отношение у богачей, и он продолжает присасываться к ним как паразит. По мне так это - отсутствие гордости и самоуважения. При этом это его решение гложет, и в итоге он просто не выдерживает накала внутри себя и убивает отца Пак. Этим он перечеркнул судьбы обеих семей: дети Пак остались без отца и счастливого детства (хотя в этом они уж точно не виноваты), а его родная семья - с грузом ответственности и проблемами с законом. А мог просто уйти и перестать паразитировать на богатстве других. Довольно эгоистичный поступок, как по мне.\nМне кажется, что фильм как раз показывает одну из главных причин классового неравенства - отсутствие у некоторых бедных желания работать и зарабатывать честно. Мы не знаем, каким образом семья Пак стала богатой, потому что фильм как раз и не об этом. Эти бедняки в фильме паразитируют на труде и успехе других, чем точно не вызывают симпатии. Семья Ким не хочет и не умеет работать честно, они воруют персики с прилавка, подделывают документы и подставляют других.\nФильм, по моему мнению, показывает, как не нужно себя вести, если ты беден. Сейчас, спустя полгода после просмотра и обдумывания этой статьи, я пришел к выводу, что все же фильм заслуженно получает награды, он хорошо снят, сюжет интересный. Судя по разбору операторской работы от Кинопоиска, в фильме были применены необычные приемы в работе с камерой.\nСейчас я понимаю, что он мне нравится именно потому, что обличает причины бедности некоторых и показывает, к чему может привести желание паразиторовать на труде и успехе других.\n","permalink":"https://mgorbatyuk.dev/blog/opinion/2020-02-13-about-gisaengchung-movie/","summary":"Я ходил на фильм \u0026ldquo;Паразиты\u0026rdquo; летом прошлого года, когда он только вышел в прокат в Казахстане. Помню, что он показался мне немного запутанным, но сюжет, игра актеров и повествование завораживалb. Мне хотелось смотреть его еще и еще и, наконец, узнать, чем же он закончится. Я - небольшой критик кино, я не могу сходу назвать и увидеть сценарные и операторские приемы, которые делают хорошие фильмы хорошими, а их отсутствие - плохие фильмы плохими.","title":"Мое мнение о фильме \"Паразиты\""},{"content":"Каждый раз, когда говорят, что \u0026ldquo;в советском союзе было самое лучшее образование в мире\u0026rdquo;, я в это несильно верю.\nРазница подходов образования Я не могу судить о западном школьном образовании, потому что я сам не учился в американской школе, однако могу сделать некоторые предположения на основе общеизвестной \u0026ldquo;болонской\u0026rdquo; системе образования в университетах и образовательных документальных видео американского производства.\nЗападное образование строится на желании самого обучающегося. Американскому школьнику не дают знания в том объеме, в котором их дают советсткому. Неужели американские учителя глупее советских? А если так, то почему США в 2019ом году еще существует, а СССР распался еще в начале девяностых?\nМне кажется, что американская система образования побуждает школьников самостоятельно постигать интересующие их области знаний и, соответственно, не грузит неинтересующими их. При этом американская система не только \u0026ldquo;зачитывает\u0026rdquo; о законах физики, химии и исторических фактах, но и рассказывает их предысторию. Рассказ о том, каким образом ученый в прошлом сделал свое открытие, не менее интересен, чем само открытие. Приведу в пример открытие инфракрасного излучения Уильямом Гершелем в 1800 году. Он хотел понять, какой спектр света из расщепленного пучка излучает больше энергии. В темной комнате он расположил 7 термометров так, что каждый из них лежал под своим цветом расщепленной радуги. Также он положил восьмой термометр в темную часть комнаты рядом, чтобы получить контрольный показатель. Спустя время он вернулся в комнату и обнаружил, что термометр в темной части комнаты, лежащий рядом с красной частью пучка света, показал наибольшую температуру.\nТакие рассказы об открытиях показывают школьникам, что возможности \u0026ldquo;подстерегают\u0026rdquo; на каждом шагу. Главное - найти их и воспользоваться. Так складывается предпринимательский ум, я полагаю. При этом американское образование дает больше свободного времени школьникам как раз на самостоятельное обучение. Конечно, это свободное время школьник может потратить и на хулиганство, но тогда он вряд ли достигнет высот в карьере.\nВ советском союзе же детям преподавали факты из науки в отрыве от истории их открытия. Видимо, утверждающие школьную программу считали, что людям не нужно знать это, ведь после школы подросток пойдет в университет или ПТУ, а дальше станет \u0026ldquo;винтиком\u0026rdquo; на заводе. А на заводах и в колхозах, к слову, тоже уже поставлен такой план, что выполнять \u0026ldquo;пятилетки в три года\u0026rdquo; можно хоть каждый раз и получать за это бонусы от партии. Иначе говоря, за школьника уже всё решили, и заботиться ему почти не о чем.\nРебенок, получивший настолько большой объем информации в течение дня в школе уже не хочет изучать что-то еще дома. То есть знания-то получены в большом объеме, но как их применить в жизни школьник не знает и что самое плохое - знать не стремится в силу информационного перегруза. Тут мне вспоминается картинка из интернета, где два бомжа обсуждают и расписывают мелом какую-то теорему из математики, а третий удивленно на них смотрит.\nОтсутствие релевантных исследований Как можно вообще провести исследование, чтобы выяснить \u0026ldquo;лучшую\u0026rdquo; систему образования в мире? Чтобы подтвердить некую теорию, исследователи проводят опыт на двух репрезентативных выборках, одна из которых - контрольная, к которой никакие эксперименты не применяются. Так исследователи могут понять, а есть ли влияние исследуемого предмета на выборку.\nДопустим, мы хотим сравнить образование в СССР с какой-нибудь системой из западного мира. Для примера возьмем США. В случае изучения образований нам бы понадобилось 4 группы репрезентативных людей: две группы обучались бы сначала в рамках одной системы, затем они же должны быть \u0026ldquo;подвержены\u0026rdquo; другой системе образования. Другие две группы являются контрольными и лишь обучаются по одной системе.\nЯ вижу здесь несколько проблем, которые и делают это исследование почти невыполнимым.\nПроблема #1. Как подвергнуть людей повторному образованию \u0026quot; с чистого листа\u0026quot;? Невозможно обучить группу людей сначала по одной системе, а затем по другой, ведь они будут уже обучены некоторым знаниям, и контрольные тесты гипотетически будут лучше, чем в первый раз при другой системе. Значит мы должны каким-то образом стереть память, чтобы они \u0026ldquo;вошли\u0026rdquo; в новую системы с чистым умом. Пока что нет стабильного способа стереть память человеку, и вряд ли он появится в обозримом будущем.\nПроблема #2. Как учесть влияние возрастных изменений подростков? Для чистоты эксперимента мы должны будем откатить возраст участников на начало школьной жизни, чтобы учесть и гормональные эффекты взросления на качество получения знаний. Средство омоложения - мечта человечества, но пока что успехов в этой области немного, поэтому мы вынуждены ждать его выпуска для проведения нашего эксперимента.\nПроблема #3. Семья и генетика Чтобы определить именно влияние образование на результирующий интеллект человека, мы должны исключить влияние семьи на испытуемого. Мало кто из людей в здравом уме согласится отдать свое чадо в изолированное сообщество ради эксперимента, актуальность которого невелика, по-моему.\nГенетика и заложенные природой интеллектуальные способности тоже необходимо учитывать, однако этот момент мы уже решили самим фактом репрезентативной выборки - мы отобрали людей из разных слоев населения. Тем не менее, мы должны взять для эксперимента людей с очень близкими показателями исходного эксперимента, чтобы выяснить именно качество образования разных стран, а не способность это образование получать.\nПроблема #4. Бытие определяет сознание Школьник живет в социуме, и из этого следует, что он получает знания не только в школе, но и из телевизора и книг, к которым имеет беспрепятственный доступ. Интернет мы не рассматриваем, потому что во время существования советсткого союза интернет в понимании 2019 года не существовал. Получается, что чтобы исключить это влияние, мы должны ограничить испытуемых от него.\nС другой стороны, влияющее общество на испытуемого так же было подвержено образованию, которое мы исследуем. Получается, что оно так же является одним из исследуемых факторов образования. Однако перед исследователями стоит задача отфильтровать те нешкольные ресурсы, которые были сами произведены без влияния других школ.\nА зачем нужен сейчас такой эксперимент? С одной стороны, результаты нашего эксперимента нужны для окончательного решения диллемы, которая волнует умы людей не одно поколение. Однако учитывая сложности проведения этого эксперимента, успокоение споров отдельно взятых слоев населения, на мой взгляд, не стоит того. Невозможно организовать сейчас из-за отсутствия технологий омоложения и стирания памяти, слишком дорого и неэтично по отношению к испытуемым.\nВ заключение Мне кажется, что довод \u0026ldquo;зато образование в СССР было лучшим\u0026rdquo; звучит тогда, когда и так небольшой список преимуществ коммунистического строя и СССР относительно капитализма и капиталистических стран подходит к концу. Это своего рода попытка хоть что-то найти хорошее. На деле же аргумент об образовании не подкреплен почти ничем.\nБолее того, не стоит забывать, что банки перед телевизором, чтобы их зарядил Кашпировский, ставили именно те люди, которые получали \u0026ldquo;лучшее в мире\u0026rdquo; советское образование.\nСсылки по теме: Причина развала СССР. Мнение инженера Remarks of senator John F. Kennedy About Soviet Union education system on Quora Here’s why education in the USSR was among the best in the world ","permalink":"https://mgorbatyuk.dev/blog/different/2019-09-29-was-ussr-education-really-good/","summary":"Каждый раз, когда говорят, что \u0026ldquo;в советском союзе было самое лучшее образование в мире\u0026rdquo;, я в это несильно верю.\nРазница подходов образования Я не могу судить о западном школьном образовании, потому что я сам не учился в американской школе, однако могу сделать некоторые предположения на основе общеизвестной \u0026ldquo;болонской\u0026rdquo; системе образования в университетах и образовательных документальных видео американского производства.\nЗападное образование строится на желании самого обучающегося. Американскому школьнику не дают знания в том объеме, в котором их дают советсткому.","title":"Действительно ли образование в СССР было \"лучшим в мире\"?"},{"content":"В комментариях к одному видео некто задал интересный вопрос:\nА должны ли программисты изучать бизнес-сферу проекта, где работают?\nАвтор видео не успел ответить, а я же посчитал, что меня забыли спросить и что я должен ответить на этот вопрос.\nПочему не стоит слепо доверять прописанным требованиям Некоторые разработчики могут подумать, что они приходят в компанию писать код и разрабатывать архитектуру, а не вдаваться в подробности бизнеса компании. Что, мол, бизнес-аналитики должны прорабатывать все нюансы проекта и сценарии взаимодействия (Use Case - UML). И это значит, по мнению этих разработчиков, что можно не о чем не волноваться, читать требования и воплощать их в жизнь так, как прописаны аналитиком. С одной стороны, такое мнение имеет право на жизнь, однако есть пара проблем:\nбизнес-аналитик может быть недостаточно квалифицированным; бизнес-аналитик может быть уставшим; бизнес-аналитик может не знать технических нюансов и возможностей; у бизнес-аналитика может быть \u0026ldquo;замыт глаз\u0026rdquo; подставь свой вариант, который опишет еще одну вероятность ошибиться на этапе проработки требований. Как это может повлиять на программиста? А вроде бы и никак, ведь его задача была реализовать функционал по требованиям, и если требования ошибочны, то и вина лежит на бизнес-аналитике, а не на разработчике. Мне кажется, что такое мышление деструктивно и не приводит к успеху. И вот почему.\nЭффективная работа с требованиями задачи На то, чтобы разработчик вникал в бизнес-сферу, есть две причины.\nВо-первых, разработчик должен вникать в бизнес-требования не только потому, что ему претворять их в жизнь, но и для того, чтобы оценить их критическим взглядом \u0026ldquo;со стороны\u0026rdquo;. Если разработчик задаст вопросы \u0026ldquo;а почему так, а не иначе\u0026rdquo;, то бизнес-аналитик расскажет больше контекста и, возможно, поделится будущими плананми на запрашиваемый сейчас функционал. Так разработчик, во-первых, будет в курсе развития проекта, а во-вторых, сможет учесть эти планы в проработке архитектуры сейчас. Как бонус, бизнес-аналитик может иначе взглянуть на запрашиваемый функционал и, вероятно, упомянуть важные аспекты, которые он забыл внести в основную задачу.\nВо-вторых, чем лучше разработчик погружен в бизнес-контекст, тем больше улучшений он может предложить заказчику и аналитикам и тем менее он будет зависим от решения вопросов, которые совсем незначительны и не влияют на изначальные требования. Например, во время реализации задачи разработчик наталкивается на дилемму, описания которой нет в задаче. И тут у него есть три сценария:\nЗадать вопрос аналитику и/или продакту (Product Owner) и ждать четких инструкций. Продумать и предложить на выбор несколько сценариев решения дилеммы, которые по мнению разработчика будут наиболее эффективны, и ждать решения. Сделать то же самое, что и в пункте 2, а затем начать реализовывать тот вариант, который, по мнению разработчика, лучше всего подойдет продукту и ляжет красиво на текущую программную архитектуру. В первом случае разработчик ведет себя лишь как исполнитель четкой инструкции. И тут нет ничего плохого, однако большую ценность и незаменимость в таком разработчике заказчик врядли увидит. Такому разработчику легко найти замену, и даже вероятно, что замена будет стоить дешевле. А когда разработчик захочет повышения, то вероятность, что заказчик пойдет навстречу ему, крайне мала.\nВо втором случае ценность разработчика немного выше. Заказчик уже не должен вникать в контекст, а может отталкиваться от предложенных вариантов и описания их последствий. Таким образом, решение дилеммы будет придумано быстрее с большой долей вероятности. Чем чаще такие случаи будут происходить, тем легче будет разработчику учесть опыт прошлых предожений и делать предложения ценнее для бизнеса и точнее. В свою очередь разработчик делает себя более ценным для заказчика, и на удержание его на проекте пойдут охотнее. Иначе говоря, просить повышения будет легче.\nТретий случай немного отличается от второго тем, что разработчик идет на риск, что подход, который он сам выбрал для реализации, не будет выбран заказчиком. Однако я не вижу в этом большой проблемы, ведь, во-первых, полученный опыт можно учесть в реализации утвержденного сценария, а во вторых, вопрос врядли был глобальным, что разные варианты его решения приводили к кардинально разным архитектурным решениям.\nЧитатель может подумать, разработчик потратил некоторое оплаченное заказчиком время впустую, однако это не так, и вот почему:\nразработчик не виноват, что после этапа аналитики остались вопросы, требующие согласования владельцем продукта; разработчик погрузился больше в проблему бизнеса, чтобы предожить варианты решения, и это точно не может характеризоваться как трата времени разработчик вырос как самостоятельный и инициативный специалист в глазах заказчика. В результате этой ситуации разработчик заработал себе очки в карму, и когда он захочет повышения на текущем проекте, бизнес вряд ли откажется от дальнейшего сотрудничества с таким специалистом и примет участия в переговорах о новой зарплате.\nЕще одна причина, почему разработчику нужно интересоваться бизнесом Если бы от разработчиков и не ждали погружения в контекст, а только лишь исполнение четких инструкций от бизнес-аналитиков, то такого разработчика почти ничто не отличает от обычного компьютера. Иначе говоря, разработчик становится механическим переводчиком бизнес-требований, написанных на английском человеческом языке, на язык программный. Правда, еще этот разработчик стоит гораздо дороже компьютера, иногда жалуется на \u0026ldquo;плохие\u0026rdquo; условия и периодически требует повышения. А еще может проявлять свой непростой характер. И зачем такой разработчик нужен бизнесу, если можно разработать и использовать специальный инструмент, который бы делал то же самое?\nК слову, попыток сделать инструмент, который позволил бы непрограммистам программировать продукт, было много, однако Microsoft, Uber, Google, Yandex и прочие IT-компании продолжают упорно хантить самых лучших разработчиков со всего мира. Не думаю, что они там у себя плачут, колятся, но продолжают есть кактус.\nЕсли разработчику не интересна бизнес-сфера проекта Такое тоже может быть, и тут могу сказать следующее. Если разработчик не готов проявлять заинтересованность и инииативу, то пусть будет готов, что однажды с ним расстанутся, так как нашли более дешевую замену. Иначе говоря, ваша осведомленность в бизнес-сфере - это ваше конкурентное преимущество.\nТак что же теперь делать? Навыки, полученные во время обсуждений требований, будут полезны разработчику в любом случае. Умение продавать технические улучшения никогда не были лишними, да и от дополнительные знаний бизнеса еще не один разработчик сильно не пострадал. И даже если не интересен текущий проект, то стоит прокачивать вышеописанные навыки для будущего проекта и/или работодателя.\n","permalink":"https://mgorbatyuk.dev/blog/management/2019-09-25-do-programmers-should-know-business-sphere/","summary":"В комментариях к одному видео некто задал интересный вопрос:\nА должны ли программисты изучать бизнес-сферу проекта, где работают?\nАвтор видео не успел ответить, а я же посчитал, что меня забыли спросить и что я должен ответить на этот вопрос.\nПочему не стоит слепо доверять прописанным требованиям Некоторые разработчики могут подумать, что они приходят в компанию писать код и разрабатывать архитектуру, а не вдаваться в подробности бизнеса компании. Что, мол, бизнес-аналитики должны прорабатывать все нюансы проекта и сценарии взаимодействия (Use Case - UML).","title":"Должны ли программисты изучать бизнес-сферу проекта"},{"content":"Disclamer Источник: https://www.joelonsoftware.com. Эта статья - вольный перевод без претензии на достоверность.\nВ переводе не стремился сохранить формулировки автора, а использовал перефразирования, которые использую в своей речи сам.\nТест содержит 12 быстрых вопросов, и каждый ответ \u0026ldquo;Да\u0026rdquo; дает один балл. Градация результата такова: 12 баллов - идеально, 11 - это приемлемо, 10 и меньше - у команды есть проблемы. Ну а если команда набрала только лишь 2-3, то у нее действительно серьезные проблемы.\nДаже если эта команда разрабатывает самый классый продукт, она не должна забывать о качестве и процессах. Если команда стремится к тому, чтобы набирать 12 баллов в тесте Джоела, то она сможет доставлять фичи на прод и онбордить новичков гораздо быстрее, влияние человеческого фактора и шанс появления серьезных багов будет меньше.\nТест Джоела 1. Используете ли систему контроля версий? Даже можно не обсуждать этот вопрос. Если не используют, то можно поинтересоваться, какой постфикс в имени zip-архива с исходным кодом на данный момент.\nСтоит спросить про GitFlow, который команда применяет. Если она не применяет установленный какой-то, то стоит расспросить подробно, ведь команда может и не знать, что пользуется одним из них.\n2. Можете ли вы сделать билд (в прод) в один шаг? Если не могут, то во сколько шагов? Что мешает автоматизировать процесс до нажатия одной кнопки / запуска одного скрипта.\n3. Делаете ли ежедневные билды? Иными словами, используют ли CI-инструменты. Если нет, то почему нет.\n4. Ведете ли систему баг-трекинга? Софт пишут люди, и люди ошибаются. Это значит, что в софте были, есть и будут \u0026ldquo;таиться\u0026rdquo; баги, какие бы классные спецы его ни писали.\nхорошая система баг-трекинга хранит следующее:\nШаги для воспроизведения Ожидаемое поведение Наблюдаемое поведение (которое отличается от ожидаемого) На кого назначен баг (кто над ним работает) Будет ли баг пофикшен или нет 5. Фиксите ли вы баги перед тем, как начать писать новый код? В идеальном мире разработчики фиксят баги до того, как эти баги попадают в продакшн. Однако мир не идеален, и разработчики чинят не всё и не всегда. Спроси, кто в команде решает, какие баги нужно фиксить и какие остаются техническим долгом.\nЕсли команда не заморачивается над багами, то что можно сказать о такой команде?\n6. Есть ли у вас план работ? Разработчики должны знать, куда движется проект. Ведь только так они смогут проработать такую архитектуру сейчас, чтобы в нее \u0026ldquo;безболезненно\u0026rdquo; вписались любые будущие изменения. При этом важно находить баланс и не программировать будущую функциональность.\nТакже стоит заметить, что этот вопрос не только о планах развития продукта, но и о сроках выполнения. Поставленные сроки дисциплинируют разработчиков, если, конечно же, они запланировали эти сроки.\n7. Есть ли документация? Странная вещь - эта документация: все согласны, что она нужна и полезна, но никто ее не пишет.\nРазработчики предпочитают писать такой код, чтобы он сам \u0026ldquo;говорил за себя ясно и понятно\u0026rdquo;. При это степень \u0026ldquo;ясности и понятности\u0026rdquo; может быть такой, что только одному автору и понятен код, и то здесь и сейчас. Ведь через полгода вполне вероятно, что автор сам забудет написанную им логику.\nЧеловеко-понятные комментарии к коду нужны, и главное - отразить в них скорее не поведение кода, а объяснение причин такого поведения. Ссылки на тикет тоже будут полезны.\nВедение документации в Вики/Конфлюенсе также полезно, особенно когда разработчики внедряют что-то совершенно новое: новую архитектуру, сторонний модуль или интеграцию с внутренними или внешними сервисами. Любая мысль, написанная \u0026ldquo;на бумаге\u0026rdquo;, лучше, чем ничего.\n8. Работают ли разработчики в тишине? Вхождение в поток - очень важно. Не одна статья об этом написана. Состояние потока тяжело поймать и легко потерять, когда вокруг шумно. Поэтому стоит поинтересоваться у будущей команды, в каких условиях они работают.\nПрерывания потока обходятся \u0026ldquo;дорого\u0026rdquo;, поэтому небольшие комнаты на ограниченное количество человек предпочтительнее, по-моему, чем опэнспейс на 100 человек.\n9. Используете ли вы наилучшие из имеющихся инструментов? Если сборка проекта \u0026ldquo;тормозится\u0026rdquo; мощностями компьютера, то лучше стоит апгрейднуть этот компьютер. Разработка GUI с двумя мониторами гораздо эффективней, чем с одним и постоянными сменами активного окна.\nТот же самый принцип актуален и для софта. Если есть решение, где нужный функционал предоставлен \u0026ldquo;из коробки\u0026rdquo;, но он стоит N денег, то лучше выбрать его, чем брать не совсем подходящий, требующий доработки напильником, но бесплатный. Ведь в любом случае вы заплатите за использование этого бесплатного инструмента временем настройки разработчиком.\n\u0026ldquo;Top notch development teams don’t torture their programmers (Лучшие команды разработчиков не мучают своих програмистов) (с) Joel Spolsky\u0026rdquo;\n10. У вас есть тестировщики? В целом стоит узнать, как команда подходит к тестированию своего продукта. Есть ли юниттесты, интеграционные, ручные и/или автотесты?\n11. Пишут ли код кандидаты на позицию во время интервью? Ты и так узнаешь ответ на этот вопрос, ведь обычно сессия вопросов кандидата команде идет как раз в конце собеседования. Если кодинга не было, то стоит задать вопрос \u0026ldquo;почему\u0026rdquo;.\nТы врядли наймешь кондитера для выпечки торта для своей свадьбы без пробы, так и нанимать программиста без проверки его навыков кодирования не стоит.\n12. Используете ли вы \u0026ldquo;коридорное (hallway)\u0026rdquo; тестирование? Коридорное тестирование - это когда ты берешь случайного пользователя (как будто в коридоре) и просишь его протестировать новую фичу. Так ты увидишь в реальной жизни, как незнающий продукт человек взаимодействует с ним.\n","permalink":"https://mgorbatyuk.dev/blog/employment/2019-09-22-what-should-i-ask-from-future-team/","summary":"Disclamer Источник: https://www.joelonsoftware.com. Эта статья - вольный перевод без претензии на достоверность.\nВ переводе не стремился сохранить формулировки автора, а использовал перефразирования, которые использую в своей речи сам.\nТест содержит 12 быстрых вопросов, и каждый ответ \u0026ldquo;Да\u0026rdquo; дает один балл. Градация результата такова: 12 баллов - идеально, 11 - это приемлемо, 10 и меньше - у команды есть проблемы. Ну а если команда набрала только лишь 2-3, то у нее действительно серьезные проблемы.","title":"Что я должен спросить у своей будущей команды. The Joel test."},{"content":"Disclaimer: Данная статья — только мнение отдельно взятого разработчика о бизнес-процессах в отдельно взятой компании. Никаких неопровержимых доказательств здесь не приводят.\nЯ работаю в команде разработки раздела сайта в банке. Сайт внешний, содержит FAQ о продуктах банка. Посещаемость клиентами в стране около 587к в месяц. Хотя относительно остальных разделов сайта это небольшая цифра. Например, в разделе “Мой банк” — мобильное интернет-отделение — посещаемость гораздо выше, но точных цифр мне никто не дал. Да я и не просил. Веб-приложение работает с кучей внутренних сервисов, дизайн раздела должен строго соответствовать установленному на всем сайте. В общем, наша команда не автономна, всегда есть зависимости от других подразделений.\nРаботаем по скраму, по крайней мере пытаемся. Что-то не получается, довольно часто факапим спринты. На очередном дэйли у кого-то из команды возникла:\nА почему бы нам не переехать на канбан? Там нет спринтов, каждый берет задачи по мере освобождения, делает их так быстро, как может он. Не нужно планировать спринты, каждый подтягивает задачи себе и делает потихоньку. Крупные юзер-стори анализирует, делит на небольшие задачи, остальные могут подхватить их. После анализа озвучивает сроки продакту. Одни плюсы!\nС одной стороны, да, одни плюсы. Но что-то мне подсказывает, что мышление “мы факапим спринты — давайте откажемся от спринтов” не очень верное. Обсуждали мы этот переход в течение недели при любом удобном случае, но так и не пришли к единому мнению. В этой статье я хочу поразмышлять о том, подходит ли канбан нашей команде, есть ли у него минусы по сравнению со скрамом.\nКакова ситуация в банке Чтобы понять, почему участники команды начали высказывать мысли о переездах на новые методологии, нужно описать контекст. В течение последних пары месяцев наш отдел работал по текущим задачам без особой группировки по целям или направлениям. На нашем разделе сайта есть формы обращения клиентов, которые станут, по мнению нашего PO, заменой письменным обращениям клиентов в отделениях банка. Замысел неплохой — цифровизация-информатизация, digital и все такое.\nСразу скажу, что далее по тексту для обозначения бизнес-заказчика я буду использовать разные варианты: PO, Product Owner, продакт оунер, продакт, заказчик. Под этими названиями я имею в виду только одну определенную роль — product owner в Agile.\nОднако процесс этот нелегок. Нашему PO нужно принудить другие отделы, которые рассматривают эти обращения, изменить свои бизнес-процессы. А такова природа человека, что если боли особой нет, то и менять нечего. Например, один отдел вел свою базу данных в простом EXCEL-файле, который шарил на сетевом диске. “Доступ к базе одновременно? Зачем, мы ж можем попросить других не трогать файл, пока работаю я”. Предложили внедрить свое подобие CRM-системы — нехотя согласились, а спустя полгода разработки уже требуют новые фичи, чтобы были написаны еще вчера. В общем, процесс ввода форм на сайте затянулся. Продакт в течение спринта накидывал новые требования по блокам, полям ввода и прочим штукам, на которые юристы компании указывали.\nФактически, все разработчики работали над задачами, условия которых менялись по несколько раз в спринт. Получается, что и спринт как таковой потерял важность и стал лишь формальным триггером к тому, чтобы проводить периодические встречи скрама. Планирование мы проводили тоже формально, потому что не было смысла задавать какие-то вопросы заказчику — все равно они могут измениться в течение спринта. Скрам-покер тоже перестали проводить — зачем нам оценивать задачу сейчас, если все равно придут правки. А не брать задачу в спринт нельзя, потому что на это есть два фактора: • Заказчик хочет наконец-то внедрить эти формы в обращение, ему психологически легче, если он видит, что задача формально “в работе”;• Часть задачи все же понятна — можем потихоньку клепать верстку фронта и делать другие низкоуровневые вещи интеграции с другими внутренними сервисами.\nКак мы должны были поступить по скраму. В идеальном мире по скраму разработчики не должны брать в спринт юзер-стори, пока сам продакт оунер не знает, что нужно делать по ней. Уже не вспомнить, из какой книги или статьи я сделал такой вывод, но мне кажется, что\nесли нашему Product owner’у нужно согласование от третьего лица, значит это третье лицо и есть истинный Product owner.\nЧитатель может мой вывод перевернуть с ног на голову и сказать, что все несут ответственность перед СЕО компании и никакие стратегические вопросы не должны принимать без его ведома и/или согласия. Значит СЕО — продакт для всех команд. Это отчасти верно, но у СЕО может пупок развязаться от такой нагрузки. Для того СЕО и назначает ответственных за продукты и направления, делегируя им право принятия решений, если они не противоречат общей философии компании.\nНа планирование заказчик приходит с уже определенным и согласованным бизнес-видением юзер-стори (User story). Разработчики должны задавать спонтанно возникающие вопросы на планировании, а продакт — на них отвечать. Разработчики наполняют каждую юзер-стори минимальным набором требований, с которыми можно начинать работу по ним. Иначе в планировании пропадает смысл.\nПроблемы нашего скрама. Мне кажется, что все проблемы нашего скрама исходят из неверного начала спринта — планирования. Само мероприятие превращается в назначение задач людям, которые должны будут отслеживать телодвижения по задачам, если появится какая-то зависимость от третих лиц. Задачи часто переводятся автоматом в колонку “Ожидание”, а исполнитель ждет некоего триггера, чтобы начать хоть что-то делать. Параллельно, чтоб не пить кофе все 8 часов рабочего времени, в спринт берутся операционные задачи или задачи из техдолга.\nЧерез две недели видим одну из двух ситуаций:• В спринт накиданы еще задачи с бэклога, потому что разработчик закончил свою текучку до окончания спринта, а триггер по бизнесовым задачам так и не появился.• В спринте осталась куча текущих задач в колонке “Сделать”, потому что триггер по бизнесовым наступил рано. Еще хуже, если некоторые задачи остались в колонке “в ожидании”. Разработчик большую часть спринта занимался бизнесовой задачей, не начиная текучку или бросив на полпути. Ведь бизнес-задача более приоритетна, не так ли?\nСкрам не просто так призывает не назначать продакт-оунером прямого руководителя программистов. Продакт на планировании презентует юзер-стори, пытается вдохновить разработчиков, заинтересовать. Разработчики в свою очередь стремятся выяснить больше о задаче сразу на планировании, чтобы на начало спринта они понимали, с чего начать. Если бы продакт был в иерархии властвования над отделом разработки, то о какой презентации задач может идти речь? Продакт может просто сказать “надо взять, там выясните требования”, а программисты не могут не подчиниться. Идеальный “водопад”.\nНемного о канбане и его сути Канбан — это еще один фреймворк аджайла. Изначально его сформировали в производстве на заводе Toyota. Но смекалистые программисты увидели, что этот принцип можно применять и в разработке ПО. Суть канбана в том, что управляющие проектом акцентируют свое внимание на скорости завершения отдельно взятой задачи. Иначе говоря, на скорость потока задач и проходимость потока. В скраме же основное внимание обращают на производительность команды — количество реализованных задач в единицу итерации.\nКанбан — это об ограничениях. Канбан позволяет определить бутылочные горлышки процесса разработки, так как вводит ограничения на количество задач в той или иной колонке: • В “работе” не должно быть больше задач, чем количество разработчиков в отделе. • В “ожидании/код-ревью/тестировании” не должно быть больше, чем N задач, где N — утвержденное число всеми участниками процесса.\nЕсли мы видим, что на тестировании скапливается много задач, то это — повод пересмотреть правила и процессы тестирования. А разработчик не может перевести свою задачу на тестирование, пока там не появится место для нее. Что делать в данном случае? Я считаю, что пока не нанят еще один тестировщик, то сам разработчик берет другие задачи на тестирование, чтобы освободить место для своей.\nРуководители могут сказать, что это слишком дорого: час разработчика стоит дороже, чем час тестировщика, который тестирует вручную. Все верно — время разработчика стоит дорого. Но нужно платить, пока проблема медленного тестирования не решена. Получается, что необходимо либо расширять штат тестировщиков, либо внедрять системы автотестирования интерфейса. Можно придумать и другие варианты решения проблемы. Ну а канбан выполнил свою роль — он выявил проблему в цепочке поставки продукта.\nАналогично будет и с задачами в ожидании: разработчик не может перевести задачу “в ожидание”, если там нет места. А если место занято на 100%, то это повод разобраться с факторами, мешающим работе над этими задачами.\nДругой отдел не может согласовать свои требования в нашей совместной интеграции? Предлагаем свои варианты и/или пишем урезанные “туповатые” возможности этой самой интеграции, создавая задачу типа “доделать урезанную функциональность фичи А”. Ждем дизайна от ответственного подразделения? Предлагаем нашему продакту написать интерфейс, не противоречащий общему гайдлайну, пока дизайн не утвердили. Продакт не соглашается? Значит зря взяли вообще в работу, если знаем, что дизайн в этой задаче очень важен и отдход от него может стоит репутации компании. Ну а конкретный разработчик работает над внутренними делами отдела: техдолг, рефакторинг, внедрение typescript в проект. А то уже стыдно в 2к18 году только лишь jquery на фронте пользоваться. Что, что? Продакт против работы над typescript? Ну а что вы хотели, не нужно давать в работу задачи, где есть зависимость от третьих подразделений и она еще не решена.\nПочему канбан не решит наши проблемы Каждый заказчик желает знать, когда его фича будет в продакшене. И очень желает, чтобы программисты выдерживали сроки, которые называют. Короткие итерации в скраме были придуманы для того, чтобы подстегнуть разработчиков делить задачи. Небольшие задачи легче прогнозировать. И очень желательно, если прямо на планировании относительно крупная юзер-стори и будет поделена.\nКанбан не отменяет планирование, заказчик все также должен презентовать юзер-стори и их значимость для проекта, а разработчики — задавать спонтанно возникающие вопросы. Все также разработчики должны давать оценки небольшим задачам в 2–5 дней, а большие задачи — брать на анализ, чтобы понять возможность поделить на небольшие. По моему мнению, задачу не должны брать в спринт, пока ее реализация занимает больше чем 10 рабочих дней одного программиста. Если продакту она нужна “вчера”, то разработчики должны делить ее. А вдруг не все требования юзер-стори нужны сейчас, некоторые могут и потерпеть до следующего спринта? А вдруг есть возможность параллельно делать задачу? А вдруг можно наговнокодить с обязательным выпилом говнокода в следующем спринте? Есть много вариантов.\nУтверждать, что нельзя поделить задачи на небольшие, в 99% случаев неправильные — любую задачу в вебе можно поделить пополам: два человека могут работать параллельно над красотой на фронте и подкапотной логикой в бэкенде. Если разработчики не умеют делить задачи пополам, то должны учиться. Некоторые могут возразить, что деление задачи для ее параллельного выполнения накладывает дополнительные расходы: время, чтобы определить границы деления, время на мердж в мастер и все такое. Я считаю, что это небольшая плата за следующее:• Что разработчики в команде лучше будут понимать проект;• Научатся делить задачи на небольшие кусочки и сдавать их в срок;• Чаще будут общаться в отделе, что еще больше сплотит группу людей в команду.\nПланировать и выдерживать периоды планирования нужно, потому что продакт хочет понимать, когда он получит ту или иную фичу в продакшене. Можно сообщить ему, что фича А будет готова через 20 дней, фича Б — 14 дней, а фичи В-К — мелкие, что можно раскидать их за две недели.Тогда продакт оунер должен держать в голове пачку юзер-стори и примерную дату их выполнения в голове и/или в блокноте. А может прямо на доске скрама — вот же и есть тот самый список задач, которые будут накачены на бой спустя две недели.\nПроблемы сроков При скраме, если кто-то не успевает свои задачи закончить, остальные должны стремиться ему помочь. Иначе зачем на каждом дэйли нам задают вопрос “есть ли что-то такое, что мешает закончить спринт вовремя?” В канбане перестроиться на выполнение тяжелее, ведь у каждого есть своя задача в работе, которую человек обязался сдать к определенному сроку. Я думаю, что ответ очевиден, что выберет человек: помочь другому закрыть его задачу или закрыть свою в срок.\nВ скраме все понятно: команда не сделала задачи за спринт — виновата команда. Нужно теперь понять на ретроспективе, почему зафакапили спринт, сделать выводы и работать над ними. В канбане за срыв сроков отдельно взятой задачи несет ответственность её исполнитель. И если он помогал другим с их задачами, то он зафакапил свою задачу по объективной причине. Но объяснить это заказчику становится тяжелее, значит каждому придется вести себе специальный дневник и записывать туда записи типа “потратил полтора часа, чтобы помочь человеку M. закончить его задачу” и “делал ревью человеку П. в течение двух часов”. Потом же нужно будет подсчитывать все эти записи, чтобы понять, равно ли общее время штрафному, на сколько зафакапил задачу. И да поможет тебе бог, если не будет тождества между ними.\nРазработчики должны думать прежде всего о задаче, над которой они работают. Точной статистики нет, но я считаю, что программист думает 60–70% над задачей и только остальное время пишет код. Если он будет думать еще и над тем, не забыл ли он внести запись для оправданий в будущем, то о какой эффективности идет речь?\nЧто же теперь делать? Уж точно не затевать переезды на канбан, если не сумели работать по скраму. Канбан, как и скрам, не отменяет ограничения сверху, и нельзя потихоньку работать над задачей, пока заваривается чаёк. Заказчик будет давить на разработчиков, чтобы быстрее делали задачи. В скраме вся команда ответственная за набор задач, и продакту нужно давить на пятерых людей.\nФича А из примера выше занимает 20 дней? Давайте делить! Нельзя делить на планировании потому что можем не успеть поделить в течение двух часов? Пусть один из разработчиков возьмет ее на анализ на пару дней, определит способы разделения. Можем с заказчиком договориться, что поделенные задачи возьмем тут же в спринте, если вся юзер-стори срочная, а можем отложить на следующий спринт. Можем делать урезанные фичи в спринте, чтоб потом доделать в последующих.\nЯ считаю, что можно и нужно играть именно содержанием задачи, чтобы она умещалась в спринт. Увеличение сроков спринта или отказ от них вообще уж точно не решит проблему факапов спринта. Ну а если сейчас лето и период отпусков у всех, в том числе и заказчиков и людей во всех связанных интеграциями подразделениях, то давайте признаем это и просто не будем планировать большие юзер-стори на летний период, а займемся своими внутренними задачами или фиксом давно известных багов, до которых так и не доходят руки.\nP.S. Если читателю показалось, что он видит совпадения с реальными людьми и компаниями, то это — только совпадения и они случайны.\n","permalink":"https://mgorbatyuk.dev/blog/opinion/2019-09-19-kanban-for-development-in-bank/","summary":"Disclaimer: Данная статья — только мнение отдельно взятого разработчика о бизнес-процессах в отдельно взятой компании. Никаких неопровержимых доказательств здесь не приводят.\nЯ работаю в команде разработки раздела сайта в банке. Сайт внешний, содержит FAQ о продуктах банка. Посещаемость клиентами в стране около 587к в месяц. Хотя относительно остальных разделов сайта это небольшая цифра. Например, в разделе “Мой банк” — мобильное интернет-отделение — посещаемость гораздо выше, но точных цифр мне никто не дал.","title":"Scrum vs Kanban для разработки в банке"},{"content":"Часто во время интервью спрашивают нас о чем-то, но это ведь собеседование, значит и кандидат на позицию тоже выбирает из компаний. Необходимо задавать вопросы на собеседованиях, и чем они провокационней, тем лучше.\nВопросы Как часто проводятся груминги, дэйли и другие митинги Agile? Необходимо понаблюдать за реакцией собеседника: устало он отвечает или бодро. Вряд ли отсутствие энтузиазма в голосе будет при отличных и продуктивных митингах.\nКак часто происходят пожары? Пожар - это когда какой-то сотрудник остается в офисе допоздна и тушит его. Если пожары постоянны, то на тебя будут смотреть как на дезертира, когда ты встанешь в условные 5 часов вечера и пойдешь домой.\nКак обстоят дела с конференциями? Если ты выступаешь, то странно, когда компания заставляет тебя отрабатывать это на выходных. Ведь ты своим выступлением приносишь пользу пиаром компании. Даже если ты не будешь выступать, то все равно ответ покажет многое о компании.\nНасколько строгие дэдлайны? Нужно узнать, как часто тебя будут просить сделать задачу N за Y дней. Именно такие команды верят в миф, что тесты замедляют разработку, а вон тот \u0026ldquo;грязный\u0026rdquo; класс исправят на следующей неделе. Профессионал не нарушает принципы качественного кода, ведь его для этого и наняли - делать качественный продукт.\nКакие плюсы и минусы у вашей компании? Вопрос стоит задавать в конце собеседования. Он покажет суть компании. При вопросе о плюсах если собеседник говорит о технике и виде из окна, то это важный звонок, ведь он не вспомнил о тех самых крутых технологиях и сотне микросервисов.\nА если человек не вспоминает о минусах, то он или лжет, или ему все равно. А такое происходит тогда, когда минусы становятся чем-то обыденным. Это ведет к перегоранию.\nСтоит уточнить о переработках. Не стоит продавать свою мотивацию за коэффициент к зарплате и работе в выходные и поздние часы.\nА можете сделать код-ревью моего кода? Необходимо принести небольшую заготовку и попросить оценить. Это реальный рабочий момент, с которым ты будешь иметь дело каждый день.\nКакая будет моя первая задача? Какая она, моя первая таска? Пусть расскажут в деталях, что тебе предстоит делать в первые дни в компании. Ответ на вопрос покажет, какой есть бэклог в команде и как коллеги умеют объяснять.\nПроводите ли ретроспективу? Если говорят, что да, то попросите назвать две основные проблемы, которые поднимались прошлый раз. И какие же они действия собираются предпринять? Так ты узнаешь, какие проблемы есть в команде и что они делают с ними. Если говорят, что проблем нет, то это точно говорит об обратном.\nЗачем это мне вообще нужно? Интервьюеры обычно не ожидают вопросы подобного характера. Нужно рассказать, что ты ответственно подходишь к выбору рабочего места, что тебе важна команда, где ты будешь работать, что ты нацелен на долгосрочное сотрудничество. Ведь именно это и в интересах компании.\nЕще важно попросить показать рабочее место. Оцени мебель и технику.\nСписок более точечных вопросов. Чем я буду заниматься? Только узкими обязанностями или еще и смежными? Какой стек на моём проекте? Есть ли легаси? Что с тестированием? Есть ли CI/CD и девопс инженер? Будет ли единый ПМ и четко заданный жизненный цикл таски? Есть ли Бизнес Аналитика? Системы мониторинга, сборщик логов? Переработки бывают? Оплата? Системы трекинга времени и руткиты на рабочем компе? Отпуска: дробление отпуска, включены или нет выходные, за сколько нужно предупреждать, отказы? За что и как часто получаются премии? Кто определяет их размер? Есть ли СБ? Какие требования у СБ? Почему открыта вакансия? Если не новая, то куда ушел предыдущий разработчик? Аналогично про гибкий график, карьерный рост. Что это значит и в чем выражается. Ретроспектива. Код ревью в компании: кто, как долго, что если пожар. Источники Вопросы будущему работодателю - habr.com Собеседуем работодателя, или как не уволиться в первый месяц - habr.com ","permalink":"https://mgorbatyuk.dev/blog/employment/2019-09-19-questions-for-future-employer/","summary":"Часто во время интервью спрашивают нас о чем-то, но это ведь собеседование, значит и кандидат на позицию тоже выбирает из компаний. Необходимо задавать вопросы на собеседованиях, и чем они провокационней, тем лучше.\nВопросы Как часто проводятся груминги, дэйли и другие митинги Agile? Необходимо понаблюдать за реакцией собеседника: устало он отвечает или бодро. Вряд ли отсутствие энтузиазма в голосе будет при отличных и продуктивных митингах.\nКак часто происходят пожары? Пожар - это когда какой-то сотрудник остается в офисе допоздна и тушит его.","title":"Вопросы будущему работодателю"},{"content":"Источник: habr.com, но ссылку утерял, а поиск по гуглу ничего не дал\nРабота и дружба Что способствует дружеским отношениям внутри вашей команды? Большинство людей не признают, что члены их команды не близки друг другу или им не хватает командной работы. Спрашивая о том, чем связана команда, вы получите четкое представление о том, насколько все дружелюбны и сплочены. Члены одной команды посещают конференции вместе, а члены другой были друзьями еще до того, как присоединиться к компании. Возможно, вы узнаете о совместных социальных активностях и переработках.\nВо время обеда обсуждаются рабочие темы или более личные? Если ваш интервьюер не знает, как ответить на этот вопрос, спросите его/ее, предпочитают ли люди обедать за своими столами или ходят в кафе. Не стесняйтесь задавать разным людям один и тот же вопрос, чтобы вы могли нарисовать полную картину. Вопрос о разговорах во время обеда дают представление об отношениях внутри команды. В некоторых компаниях проводится четкая граница между профессиональным и личным, в то время как других этой границы нет.\nКарьерный рост По какой причине инженеры чаще всего увольняются из компании? Четкие ответы на этот вопрос дают четкую картину. «У нас нет текучки за последние 18 месяцев» или «Последние 5 человек, которые ушли, начали создавать свои собственные компании». Но чаще звучат менее четкие ответы, поскольку интервьюеры редко говорят прямо, что люди уходят из-за нездоровой рабочей атмосферы или постоянных переработок. Поэтому вам нужно будет определить, как ваш интервьюер отвечает на эти вопросы в дополнение к тому, что он на самом деле говорит. Да. Вы проводите собеседование с вашим интервьюером.\nПочему на эту должность вы ищете внешних кандидатов? (Для менеджеров или ведущих ролей) Вы должны выяснить, они не могут закрыть вакансию кем-то из членов команды. Вы можете узнать, что повышения редко практикуются в этой компании или что существует серьезный пробел в знаниях или опыте, за восстановление которого вы будете ответственны.\nНачинал ли кто-нибудь из старших инженеров работать в этой компании с позиции младшего инженера? Это особенно полезно для джуниоров. Если вы первый джуниор разработчик, то спросите, какие ожидания у команды от этой позиции и с к кому вы можете обращаться за помощью. Вы также узнаете, есть ли карьерный рост в компании. Здорово узнать, что другие младшие разработчики смогли вырасти в компании. Спросите, можете ли вы встретиться и поговорить с таким человеком, даже если это не тот человек, с которым вы будете работать напрямую.\nКаков процесс, например, перехода в другой проект или в другую команду? Хороший ответ будет включать примеры множества людей, которые сделали именно это. «Джесс просто перешла из команды разработчиков к команду инфраструктуры. Стивен начал работать инженером и теперь является менеджером проектов». Просто потому, что у компании есть установленная политика в отношении внутренней мобильности, это не означает, что она осуществляется. Узнайте, как легко попробовать разные вещи, и как устроен переход между проектами / командами на основе интереса и соответствия. Сможете ли вы сами быть инициатором для таких переходов? Как много времени это займет? Поддерживает ли компания эти изменения?\nПсихологическая обстановка Можете ли вы привести мне пример ошибки, которую вы допустили. Как она была обработана? В идеале ваш интервьюер будет честно отвечать. Если людям комфортно обсуждать большие неудачи, то это хороший знак. Это говорит о том, что компания создала безопасную среду для людей, чтобы пережить неудачу, и что эта среда открыта к рискам и экспериментам. Если люди закрыты в обсуждении неудач, это может указывать на культуру вины в компании.\nНасколько быстро реагируют люди на электронные письма / сообщения в Slack в выходные и после 6 вечера? Так вы сможете получить представление о реальных рабочих часах и о том, как члены команды общаются друг с другом. Не стоит задавать прямой вопрос о балансе работы / жизни в компании. Мало того, что некоторые интервьюеры могут интерпретировать это как нежелание работать, но так еще и наверняка дадут вам шаблонный ответ.\nБыли ли реорганизации команды и как они проходили? Затем спросите: «Что побудило реогранизацию и каковы были изменения?» Рассказы о реорганизациях позволяют узнать, как работает общий бизнес и куда он идет. Компании решаются на реструктуризацию по нескольким причинам: сбои в работе, смена клиентской базы, рост или сокращение численности персонала, контроль над менеджером или просто попытка исправить то, что не работает.\nВы полезно узнать, какие проблемы существуют, как они измеряются и насколько хорошо они рассматривают вовлеченных лиц при внесении этих изменений.\nРазработка Можете ли вы описать процесс разработки от постановки задачи до выпуска в продакшн? Здесь нет правильного или неправильного ответа. Вам нужно выяснить, разделяют ли в компании ваше видение развития. Если вы предпочитаете работать быстро и цените самостоятельность, вам вряд ли будет комфортно в команде, где 5 раз ревьюят код и перед его выпуском в продакшн ждут одобрения бизнес-команды.\nКакие инструменты вы используете для контроля версий? Хорошие команды используют хорошие инструменты. Если вы не хотите попасть в команду, которая пользуется устаревшие инструменты, то разумно спросить, какую систему контроля версий они используют.\nКак ваша команда перешла к использованию нынешнего фрейворка? Если вы просто спросите: «Почему вы решили использовать X?», то инженеры могут включить защитную реакцию. Вопросы с «почему» могут быть восприняты как атака. Поскольку вы хуже знакомы с их технологическим стеком и бизнесом, чем они, то лучше спросить, как они пришли к решению использовать те или иные технологии, рассматривали ли они другие варианты, как они оценивали компромиссы между ними? Вы узнаете, кто имеет право принимать решения, когда речь заходит о технологиях, и где компания находятся с позиции технологий.\nКомандные ценности Кто в компании для вас самый мотивирующий пример и почему? Так вы узнаете больше о том, кто здесь работает и какие качества уважают в компании. Кроме того, попросите своего/ю интервьюера пригласить члена команды, которым он гордится/вдохновляется. Если ему/ей сложно выбрать только одного человека, это хороший знак. Если вам назовут людей со всей компании, то это тоже хороший знак.\nНа каком проекте я буду работать и какие показатели будут определять успех? Каждый должен спросить о том, над чем он будет работать, как только он присоединится. Конечно, это должно быть чем-то интересным и сложным для вас, но вы также должны выяснить, есть ли четкие показатели для оценки вашей производительности. Если ваш интервьюер избегает второй половины вопроса, вы можете спросить конкретно, будете ли вы отвечать за улучшение скорости и доступности сервисов, монетизации или удержания пользователей. Вы не только получите представление о том, что вы будете делать, но также как компания управляет данными.\nКак происходит управление продуктом? Важно понять, какую роль играют инженеры в компании и будете ли вы принимать участие в разработке идей и концепций или будете делегировать такую работу, кто имеет полномочия принимать решения.\nУточняющими вопросами могут быть: Как вы распределяете обязанности сотрудников? Насколько много говорят инженеры о том, что построено и как оно построено?\n","permalink":"https://mgorbatyuk.dev/blog/employment/2019-09-19-questions-for-company/","summary":"Источник: habr.com, но ссылку утерял, а поиск по гуглу ничего не дал\nРабота и дружба Что способствует дружеским отношениям внутри вашей команды? Большинство людей не признают, что члены их команды не близки друг другу или им не хватает командной работы. Спрашивая о том, чем связана команда, вы получите четкое представление о том, насколько все дружелюбны и сплочены. Члены одной команды посещают конференции вместе, а члены другой были друзьями еще до того, как присоединиться к компании.","title":"Вопросы компании при собеседованиях"},{"content":"Источник: записи из моего блокнота. Возможно, на лекциях MBA рассказывали, а может и записал откуда-то.\nРуководитель - человек, распоряжающийся людскими ресурсами. Менеджер - работний, от принимаемых решений которого зависит в той или иной степени прибыль компании.\nПринципы восточного менеджмента 1. Все законы войны распространияются и на искусство ведения бизнеса Успех может ослепить менеджера, а поражение - заставить его думать, что виновы все и вся, но только не он.\n2. Если ты силен, то покажи слабость; если ты слаб - покажи силу. Если ты близко, то покажи, что ты далеко; если ты далеко - покажи, что близко. Действия и обстоятельства внутри фирмы должны быть скрыты от конкурентов, но при этом они должны думать, что все про нас знают.\n3. Приоритет самоанализу. Объективная оценка себя и конкурентов. Есои не уверены в качестве работы сотрудников, то нужно с этим что-то делать.\n4. Любой бизнес должен постоянно развиваться. Если недостаточно ресурсов, то можно перейти к обороне, но ненадолго.\n5. Не следует жестко противостоять трудностям. Можно временно \u0026ldquo;прогнуться\u0026rdquo;, чтобы набрать силы и скинуть груз. Не страшно отступить, страшно не продолжать борьбу.\n6. Не стоит бросаться на проблему в лоб. Нужно исследовать вопрос на наличие слабых мест. Не трать все силы на атаку в лоб.\n7. Ученость и умствование есть причина смуты в государстве. Мудрый правитель держит желудки рабочих сытыми, а головы - пустыми.\n8. В любой фирме должны быть передовики. На передовиках строится костяк фирмы. Факт принадлежности к такой группе дает работнику мотивации продолжать в том же темпе.\n","permalink":"https://mgorbatyuk.dev/blog/management/2019-09-08-eastern-management/","summary":"Источник: записи из моего блокнота. Возможно, на лекциях MBA рассказывали, а может и записал откуда-то.\nРуководитель - человек, распоряжающийся людскими ресурсами. Менеджер - работний, от принимаемых решений которого зависит в той или иной степени прибыль компании.\nПринципы восточного менеджмента 1. Все законы войны распространияются и на искусство ведения бизнеса Успех может ослепить менеджера, а поражение - заставить его думать, что виновы все и вся, но только не он.\n2. Если ты силен, то покажи слабость; если ты слаб - покажи силу.","title":"Восточный менеджмент"},{"content":"Situation Попроси рассказать кандидата о ситуации. Контекст, предпосылки и т.д.\nTask / Trouble Какую проблему увидел кандидат в ситуации, почему охарактеризовал ее проблемой.\nActions Какие действия он предпринял для решения проблемы. Почему именно такие. Нужно задавать больше вопросов с How, Why, Who, которые побуждают к рассказу.\nResults / Roadblocks Каких результатов кандидат достиг своими действиями.\nSelf-apprisal Как оцениает кандидат свои действия и результаты.Какие выводы он делает из сложившегося кейса. Что бы кандидат сделал сегодня иначе, если бы сделал.\nПримечания нельзя задавать закрытые вопросы, на которые можно ответить только Да/Нет Избегай вопросов типа \u0026ldquo;Повел бы себя в той ситуации \u0026lt;описание поведения\u0026gt;\u0026hellip;?\u0026rdquo; или \u0026ldquo;У тебя хороший тайм-менеджмент?\u0026rdquo; Не спрашивай терминологию - в ответ получишь выжимки из википедии Задавай открытые вопросы и приводи примеры Попроси рассказать о reverse-enginering навыках ","permalink":"https://mgorbatyuk.dev/blog/management/2019-09-08-starts-schema-interview/","summary":"Situation Попроси рассказать кандидата о ситуации. Контекст, предпосылки и т.д.\nTask / Trouble Какую проблему увидел кандидат в ситуации, почему охарактеризовал ее проблемой.\nActions Какие действия он предпринял для решения проблемы. Почему именно такие. Нужно задавать больше вопросов с How, Why, Who, которые побуждают к рассказу.\nResults / Roadblocks Каких результатов кандидат достиг своими действиями.\nSelf-apprisal Как оцениает кандидат свои действия и результаты.Какие выводы он делает из сложившегося кейса. Что бы кандидат сделал сегодня иначе, если бы сделал.","title":"Модель S.T.A.R.S. для оценки Soft-Skills"},{"content":"Из википелии:\nТест Тьюринга — эмпирический тест, идея которого была предложена Аланом Тьюрингом в статье «Вычислительные машины и разум» (англ. Computing Machinery and Intelligence), опубликованной в 1950 году в философском журнале «Mind». Тьюринг задался целью определить, может ли машина мыслить.Стандартное звучание закона: «Если компьютер может работать так, что человек не в состоянии определить, с кем он общается — с другим человеком или с машиной, — считается, что он прошел тест Тьюринга»\nЦель теста Тьюринга - определить, может ли машина имитировать поведение человека настолько, что сам человек не поймет, машина перед ним или живой человек.\nЕсть прецедент, когда чат-бот смог пройти этот тест: в 2014 году разработали чат-бот, который \u0026ldquo;научился\u0026rdquo; диалогу на основе твиттер-сообщений. Испытуемые люди в большинстве своем поверили, что перед ними 13-летний подросток, а не машина.\nЗабавно, что тест Тьюринга, фактически, определяет, может ли машина выглядеть как человек, имитировать его поведение через разговор/диалог.\nПри этом Тьюринг был геем, и в 1953 году был осужден за мужеложество. В те времена в Британии гомосексуализм был законодательно запрещен. Тьюринг попал в неприятную ситуацию с юношей-вором, и в итоге вынужден был сознаться в полиции в своей ориентации. Вместо тюрьмы он выбрал химическую кастрацию, и год спустя его тело было найдено с отравлением цианидом. Был ли это суицид - достоверно неизвестно, ибо не нашли посмертной записки или чего-то подобного.\nЭто значит, что Тьюринг был вынужден скрывать свою гомосексуальность и вести себя на публике так, чтобы его приняли за гетеросексуального мужчину. А компьютер, по его тесту, должен был вести себя так, чтобы его приняли за человека. Довольно интересное совпадение.\n","permalink":"https://mgorbatyuk.dev/blog/opinion/2019-09-08-thoughts-about-test-of-turing/","summary":"Из википелии:\nТест Тьюринга — эмпирический тест, идея которого была предложена Аланом Тьюрингом в статье «Вычислительные машины и разум» (англ. Computing Machinery and Intelligence), опубликованной в 1950 году в философском журнале «Mind». Тьюринг задался целью определить, может ли машина мыслить.Стандартное звучание закона: «Если компьютер может работать так, что человек не в состоянии определить, с кем он общается — с другим человеком или с машиной, — считается, что он прошел тест Тьюринга»","title":"Суть теста Тьюринга"},{"content":"Ссылка на видеозапись выступления про обратную связь в компании\nПрезентация\n","permalink":"https://mgorbatyuk.dev/blog/videos/2019-09-08-video-conference-feedback-about/","summary":"Ссылка на видеозапись выступления про обратную связь в компании\nПрезентация","title":"Этапы эволюции обратной связи в команде разработки"},{"content":"I am a software .NET developer. Mostly doing web development.\nI try to understand the business domain and purposes of a project where I work. It helps me to understand better the essence of the product and continuously improve it.\nI pay much attention on code quality and building reliable software solutions. Also, I like to share my knowledge and enjoy playing a mentor role.\nMy pet-projects Tech.Interviewer - a platform for technical interviewers who want to keep their notes and share them as pdf with recruiters and candidates. Kazakhstan IT salaries - service for collecting and analyzing IT salaries in Kazakhstan. Helps people to understand the market and make better salary decisions. Individual Entrepreneur in Kazakhstan about KB - a knowledge base about Individual Entrepreneur (ru: \u0026ldquo;ИП\u0026rdquo;) in Kazakhstan. Helps people to understand the process of registration and running IE. I can help you with \u0026hellip; .NET Angular 2+ Clean code Elasticsearch SQL GitFlow Docker Setting up CI/CD Where you can find me LinkedIn Telegram channel Boosty Getmentor.dev profile Solvery.io profile Medium.com GitHub GitLab My CV Here you will find my CV, if you need it\nView CV\n","permalink":"https://mgorbatyuk.dev/about/","summary":"about","title":"About me"},{"content":"Ниже выложены все записи моих публичных выступлений. Последние идут сверху.\nКак часто стоит менять проекты Когда 2022-12-14 Организатор AlmatyJS Ссылка youtube Пост в телеграм AlmatyJS Как не превратить собеседования в кошмар Когда 2022-11-29 Организатор AlmatyJS Ссылка youtube Пост в телеграм AlmatyJS Как не превратить собеседования в кошмар Когда 2022-08-23 Организатор Solvery.io Ссылка youtube Открытый урок по ASP.NET Core разработчик Когда 2021-11-04 Организатор Otus.ru Ссылка youtube Открытый урок по Async/Await в C# Когда 2021-09-22 Организатор Otus.ru Ссылка youtube ","permalink":"https://mgorbatyuk.dev/speaking/","summary":"speaking","title":"Public speaking"}]