<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial on Maxim Gorbatyuk blog</title>
    <link>https://maximgorbatyuk.github.io/tags/tutorial/</link>
    <description>Recent content in tutorial on Maxim Gorbatyuk blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://maximgorbatyuk.github.io/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to integrate Identity Server into your web application</title>
      <link>https://maximgorbatyuk.github.io/blog/development/2021-12-26-how-to-integrate-identity-server/</link>
      <pubDate>Sun, 26 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://maximgorbatyuk.github.io/blog/development/2021-12-26-how-to-integrate-identity-server/</guid>
      <description>Letâ€™s imagine you have a web application built as monolith and you want to introduce microservices. Or you may have several clients connected to your backend solution: mobile app, SPA, devices, etc. One of the first tasks that you have to solve is integrating authentication and authorization. In my opinion, one of the simplest way is integrating SSO (Single-Sign-On system) into your application.
There is an opensource ready-to-use product IdentityServer4 which implements OpenID Connect and OAuth2.</description>
    </item>
    
    <item>
      <title>A little life hack when you work with Azure Service Bus and ASP.NET Core</title>
      <link>https://maximgorbatyuk.github.io/blog/development/2021-03-07-asp-net-azure-sb-queues/</link>
      <pubDate>Sun, 07 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://maximgorbatyuk.github.io/blog/development/2021-03-07-asp-net-azure-sb-queues/</guid>
      <description>If you work with Azure infrastructure and have to integrate message queues. It sounds quite simple: just create Azure Resource, write some code and then be happy! But what would you say if the resources are limited? What will you do if there are several teammates in your team, and all of you have to debug queues at the same time?
Well, I know a minor life hack for my teams.</description>
    </item>
    
    <item>
      <title>How to accept and return snake case formatted JSON in ASP Web API</title>
      <link>https://maximgorbatyuk.github.io/blog/development/2021-02-20-snake-case-and-asp-net-core/</link>
      <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://maximgorbatyuk.github.io/blog/development/2021-02-20-snake-case-and-asp-net-core/</guid>
      <description>The standard way to accept and return data in ASP.NET world is camel case. But at the current project, I was asked to change my ASP Web API application data processing format. I had to move all the JSON data format from camelCase to snake_case.
The reason for it was fact that we had to start developing React application as a SPA of our system. I thought that nothing will be a trouble, but I had met some issues.</description>
    </item>
    
  </channel>
</rss>
